//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/kxml2/wap/WbxmlSerializer.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/OutputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Writer.h"
#include "java/lang/Boolean.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/kxml2/wap/Wbxml.h"
#include "org/kxml2/wap/WbxmlSerializer.h"
#include "org/xmlpull/v1/XmlSerializer.h"

@interface OrgKxml2WapWbxmlSerializer () {
 @public
  jint attrPage_;
  jint tagPage_;
  NSString *encoding_;
}

- (void)writeStrWithNSString:(NSString *)text;

- (void)writeStrTWithNSString:(NSString *)s
                  withBoolean:(jboolean)mayPrependSpace;

@end

J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlSerializer, encoding_, NSString *)

__attribute__((unused)) static void OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(OrgKxml2WapWbxmlSerializer *self, NSString *text);

__attribute__((unused)) static void OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(OrgKxml2WapWbxmlSerializer *self, NSString *s, jboolean mayPrependSpace);

@implementation OrgKxml2WapWbxmlSerializer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgKxml2WapWbxmlSerializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgXmlpullV1XmlSerializer>)attributeWithNSString:(NSString *)namespace_
                                          withNSString:(NSString *)name
                                          withNSString:(NSString *)value {
  [((JavaUtilVector *) nil_chk(attributes_)) addElementWithId:name];
  [((JavaUtilVector *) nil_chk(attributes_)) addElementWithId:value];
  return self;
}

- (void)cdsectWithNSString:(NSString *)cdsect {
  [self textWithNSString:cdsect];
}

- (void)commentWithNSString:(NSString *)comment {
}

- (void)docdeclWithNSString:(NSString *)docdecl {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Cannot write docdecl for WBXML");
}

- (void)entityRefWithNSString:(NSString *)er {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"EntityReference not supported for WBXML");
}

- (jint)getDepth {
  return depth_;
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  return false;
}

- (NSString *)getNamespace {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"NYI");
}

- (NSString *)getName {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"NYI");
}

- (NSString *)getPrefixWithNSString:(NSString *)nsp
                        withBoolean:(jboolean)create {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"NYI");
}

- (id)getPropertyWithNSString:(NSString *)name {
  return nil;
}

- (void)ignorableWhitespaceWithNSString:(NSString *)sp {
}

- (void)endDocument {
  OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(out_, [((JavaIoByteArrayOutputStream *) nil_chk(stringTableBuf_)) size]);
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:[((JavaIoByteArrayOutputStream *) nil_chk(stringTableBuf_)) toByteArray]];
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:[((JavaIoByteArrayOutputStream *) nil_chk(buf_)) toByteArray]];
  [((JavaIoOutputStream *) nil_chk(out_)) flush];
}

- (void)flush {
}

- (void)checkPendingWithBoolean:(jboolean)degenerated {
  if (pending_ == nil) return;
  jint len = [((JavaUtilVector *) nil_chk(attributes_)) size];
  IOSIntArray *idx = (IOSIntArray *) cast_chk([((JavaUtilHashtable *) nil_chk(tagTable_)) getWithId:pending_], [IOSIntArray class]);
  if (idx == nil) {
    [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:len == 0 ? (degenerated ? OrgKxml2WapWbxml_LITERAL : OrgKxml2WapWbxml_LITERAL_C) : (degenerated ? OrgKxml2WapWbxml_LITERAL_A : OrgKxml2WapWbxml_LITERAL_AC)];
    OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, pending_, false);
  }
  else {
    if (IOSIntArray_Get(idx, 0) != tagPage_) {
      tagPage_ = IOSIntArray_Get(idx, 0);
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:OrgKxml2WapWbxml_SWITCH_PAGE];
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:tagPage_];
    }
    [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:len == 0 ? (degenerated ? IOSIntArray_Get(idx, 1) : IOSIntArray_Get(idx, 1) | 64) : (degenerated ? IOSIntArray_Get(idx, 1) | 128 : IOSIntArray_Get(idx, 1) | 192)];
  }
  for (jint i = 0; i < len; ) {
    idx = (IOSIntArray *) cast_chk([((JavaUtilHashtable *) nil_chk(attrStartTable_)) getWithId:[((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:i]], [IOSIntArray class]);
    if (idx == nil) {
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:OrgKxml2WapWbxml_LITERAL];
      OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, (NSString *) cast_chk([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:i], [NSString class]), false);
    }
    else {
      if (IOSIntArray_Get(idx, 0) != attrPage_) {
        attrPage_ = IOSIntArray_Get(idx, 0);
        [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:0];
        [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:attrPage_];
      }
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:IOSIntArray_Get(idx, 1)];
    }
    idx = (IOSIntArray *) cast_chk([((JavaUtilHashtable *) nil_chk(attrValueTable_)) getWithId:[((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:++i]], [IOSIntArray class]);
    if (idx == nil) {
      OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(self, (NSString *) cast_chk([((JavaUtilVector *) nil_chk(attributes_)) elementAtWithInt:i], [NSString class]));
    }
    else {
      if (IOSIntArray_Get(idx, 0) != attrPage_) {
        attrPage_ = IOSIntArray_Get(idx, 0);
        [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:0];
        [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:attrPage_];
      }
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:IOSIntArray_Get(idx, 1)];
    }
    ++i;
  }
  if (len > 0) [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:OrgKxml2WapWbxml_END];
  JreStrongAssign(&pending_, nil);
  [((JavaUtilVector *) nil_chk(attributes_)) removeAllElements];
}

- (void)processingInstructionWithNSString:(NSString *)pi {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"PI NYI");
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown feature ", name));
}

- (void)setOutputWithJavaIoWriter:(JavaIoWriter *)writer {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"Wbxml requires an OutputStream!");
}

- (void)setOutputWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withNSString:(NSString *)encoding {
  JreStrongAssign(&self->encoding_, encoding == nil ? @"UTF-8" : encoding);
  JreStrongAssign(&self->out_, outArg);
  JreStrongAssignAndConsume(&buf_, new_JavaIoByteArrayOutputStream_init());
  JreStrongAssignAndConsume(&stringTableBuf_, new_JavaIoByteArrayOutputStream_init());
}

- (void)setPrefixWithNSString:(NSString *)prefix
                 withNSString:(NSString *)nsp {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"NYI");
}

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value {
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"unknown property ", property));
}

- (void)startDocumentWithNSString:(NSString *)s
              withJavaLangBoolean:(JavaLangBoolean *)b {
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:(jint) 0x03];
  [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:(jint) 0x01];
  if (s != nil) {
    JreStrongAssign(&encoding_, s);
  }
  if ([((NSString *) nil_chk([((NSString *) nil_chk(encoding_)) uppercaseString])) isEqual:@"UTF-8"]) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:106];
  }
  else if ([((NSString *) nil_chk([((NSString *) nil_chk(encoding_)) uppercaseString])) isEqual:@"ISO-8859-1"]) {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:(jint) 0x04];
  }
  else {
    @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(s);
  }
}

- (id<OrgXmlpullV1XmlSerializer>)startTagWithNSString:(NSString *)namespace_
                                         withNSString:(NSString *)name {
  if (namespace_ != nil && ![@"" isEqual:namespace_]) @throw create_JavaLangRuntimeException_initWithNSString_(@"NSP NYI");
  [self checkPendingWithBoolean:false];
  JreStrongAssign(&pending_, name);
  depth_++;
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithCharArray:(IOSCharArray *)chars
                                           withInt:(jint)start
                                           withInt:(jint)len {
  [self checkPendingWithBoolean:false];
  OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(self, [NSString java_stringWithCharacters:chars offset:start length:len]);
  return self;
}

- (id<OrgXmlpullV1XmlSerializer>)textWithNSString:(NSString *)text {
  [self checkPendingWithBoolean:false];
  OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(self, text);
  return self;
}

- (void)writeStrWithNSString:(NSString *)text {
  OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(self, text);
}

- (id<OrgXmlpullV1XmlSerializer>)endTagWithNSString:(NSString *)namespace_
                                       withNSString:(NSString *)name {
  if (pending_ != nil) [self checkPendingWithBoolean:true];
  else [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:OrgKxml2WapWbxml_END];
  depth_--;
  return self;
}

- (void)writeWapExtensionWithInt:(jint)type
                          withId:(id)data {
  [self checkPendingWithBoolean:false];
  [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithInt:type];
  {
    IOSByteArray *bytes;
    switch (type) {
      case OrgKxml2WapWbxml_EXT_0:
      case OrgKxml2WapWbxml_EXT_1:
      case OrgKxml2WapWbxml_EXT_2:
      break;
      case OrgKxml2WapWbxml_OPAQUE:
      bytes = (IOSByteArray *) cast_chk(data, [IOSByteArray class]);
      OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(buf_, ((IOSByteArray *) nil_chk(bytes))->size_);
      [((JavaIoByteArrayOutputStream *) nil_chk(buf_)) writeWithByteArray:bytes];
      break;
      case OrgKxml2WapWbxml_EXT_I_0:
      case OrgKxml2WapWbxml_EXT_I_1:
      case OrgKxml2WapWbxml_EXT_I_2:
      [self writeStrIWithJavaIoOutputStream:buf_ withNSString:(NSString *) cast_chk(data, [NSString class])];
      break;
      case OrgKxml2WapWbxml_EXT_T_0:
      case OrgKxml2WapWbxml_EXT_T_1:
      case OrgKxml2WapWbxml_EXT_T_2:
      OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, (NSString *) cast_chk(data, [NSString class]), false);
      break;
      default:
      @throw create_JavaLangIllegalArgumentException_init();
    }
  }
}

+ (void)writeIntWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                               withInt:(jint)i {
  OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(outArg, i);
}

- (void)writeStrIWithJavaIoOutputStream:(JavaIoOutputStream *)outArg
                           withNSString:(NSString *)s {
  IOSByteArray *data = [((NSString *) nil_chk(s)) java_getBytesWithCharsetName:encoding_];
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithByteArray:data];
  [outArg writeWithInt:0];
}

- (void)writeStrTWithNSString:(NSString *)s
                  withBoolean:(jboolean)mayPrependSpace {
  OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, s, mayPrependSpace);
}

- (void)setTagTableWithInt:(jint)page
         withNSStringArray:(IOSObjectArray *)tagTable {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tagTable))->size_; i++) {
    if (IOSObjectArray_Get(tagTable, i) != nil) {
      id idx = [IOSIntArray arrayWithInts:(jint[]){ page, i + 5 } count:2];
      [((JavaUtilHashtable *) nil_chk(self->tagTable_)) putWithId:IOSObjectArray_Get(tagTable, i) withId:idx];
    }
  }
}

- (void)setAttrStartTableWithInt:(jint)page
               withNSStringArray:(IOSObjectArray *)attrStartTable {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(attrStartTable))->size_; i++) {
    if (IOSObjectArray_Get(attrStartTable, i) != nil) {
      id idx = [IOSIntArray arrayWithInts:(jint[]){ page, i + 5 } count:2];
      [((JavaUtilHashtable *) nil_chk(self->attrStartTable_)) putWithId:IOSObjectArray_Get(attrStartTable, i) withId:idx];
    }
  }
}

- (void)setAttrValueTableWithInt:(jint)page
               withNSStringArray:(IOSObjectArray *)attrValueTable {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(attrValueTable))->size_; i++) {
    if (IOSObjectArray_Get(attrValueTable, i) != nil) {
      id idx = [IOSIntArray arrayWithInts:(jint[]){ page, i + (jint) 0x085 } count:2];
      [((JavaUtilHashtable *) nil_chk(self->attrValueTable_)) putWithId:IOSObjectArray_Get(attrValueTable, i) withId:idx];
    }
  }
}

- (void)dealloc {
  RELEASE_(stringTable_);
  RELEASE_(out_);
  RELEASE_(buf_);
  RELEASE_(stringTableBuf_);
  RELEASE_(pending_);
  RELEASE_(name_);
  RELEASE_(namespace__);
  RELEASE_(attributes_);
  RELEASE_(attrStartTable_);
  RELEASE_(attrValueTable_);
  RELEASE_(tagTable_);
  RELEASE_(encoding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, 4, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 26, 21, 4, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 27, 28, 4, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 27, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 3, 4, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlSerializer;", 0x1, 30, 21, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, 4, -1, -1, -1 },
    { NULL, "V", 0x8, 33, 34, 4, -1, -1, -1 },
    { NULL, "V", 0x0, 35, 19, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 36, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 38, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(attributeWithNSString:withNSString:withNSString:);
  methods[2].selector = @selector(cdsectWithNSString:);
  methods[3].selector = @selector(commentWithNSString:);
  methods[4].selector = @selector(docdeclWithNSString:);
  methods[5].selector = @selector(entityRefWithNSString:);
  methods[6].selector = @selector(getDepth);
  methods[7].selector = @selector(getFeatureWithNSString:);
  methods[8].selector = @selector(getNamespace);
  methods[9].selector = @selector(getName);
  methods[10].selector = @selector(getPrefixWithNSString:withBoolean:);
  methods[11].selector = @selector(getPropertyWithNSString:);
  methods[12].selector = @selector(ignorableWhitespaceWithNSString:);
  methods[13].selector = @selector(endDocument);
  methods[14].selector = @selector(flush);
  methods[15].selector = @selector(checkPendingWithBoolean:);
  methods[16].selector = @selector(processingInstructionWithNSString:);
  methods[17].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[18].selector = @selector(setOutputWithJavaIoWriter:);
  methods[19].selector = @selector(setOutputWithJavaIoOutputStream:withNSString:);
  methods[20].selector = @selector(setPrefixWithNSString:withNSString:);
  methods[21].selector = @selector(setPropertyWithNSString:withId:);
  methods[22].selector = @selector(startDocumentWithNSString:withJavaLangBoolean:);
  methods[23].selector = @selector(startTagWithNSString:withNSString:);
  methods[24].selector = @selector(textWithCharArray:withInt:withInt:);
  methods[25].selector = @selector(textWithNSString:);
  methods[26].selector = @selector(writeStrWithNSString:);
  methods[27].selector = @selector(endTagWithNSString:withNSString:);
  methods[28].selector = @selector(writeWapExtensionWithInt:withId:);
  methods[29].selector = @selector(writeIntWithJavaIoOutputStream:withInt:);
  methods[30].selector = @selector(writeStrIWithJavaIoOutputStream:withNSString:);
  methods[31].selector = @selector(writeStrTWithNSString:withBoolean:);
  methods[32].selector = @selector(setTagTableWithInt:withNSStringArray:);
  methods[33].selector = @selector(setAttrStartTableWithInt:withNSStringArray:);
  methods[34].selector = @selector(setAttrValueTableWithInt:withNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stringTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "out_", "LJavaIoOutputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "buf_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "stringTableBuf_", "LJavaIoByteArrayOutputStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "pending_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "namespace__", "LNSString;", .constantValue.asLong = 0, 0x0, 41, -1, -1, -1 },
    { "attributes_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "attrStartTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "attrValueTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tagTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "attrPage_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tagPage_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "attribute", "LNSString;LNSString;LNSString;", "cdsect", "LNSString;", "LJavaIoIOException;", "comment", "docdecl", "entityRef", "getFeature", "getPrefix", "LNSString;Z", "getProperty", "ignorableWhitespace", "checkPending", "Z", "processingInstruction", "setFeature", "setOutput", "LJavaIoWriter;", "LJavaIoOutputStream;LNSString;", "setPrefix", "LNSString;LNSString;", "setProperty", "LNSString;LNSObject;", "startDocument", "LNSString;LJavaLangBoolean;", "startTag", "text", "[CII", "writeStr", "endTag", "writeWapExtension", "ILNSObject;", "writeInt", "LJavaIoOutputStream;I", "writeStrI", "writeStrT", "setTagTable", "I[LNSString;", "setAttrStartTable", "setAttrValueTable", "namespace" };
  static const J2ObjcClassInfo _OrgKxml2WapWbxmlSerializer = { "WbxmlSerializer", "org.kxml2.wap", ptrTable, methods, fields, 7, 0x1, 35, 15, -1, -1, -1, -1, -1 };
  return &_OrgKxml2WapWbxmlSerializer;
}

@end

void OrgKxml2WapWbxmlSerializer_init(OrgKxml2WapWbxmlSerializer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stringTable_, new_JavaUtilHashtable_init());
  JreStrongAssignAndConsume(&self->buf_, new_JavaIoByteArrayOutputStream_init());
  JreStrongAssignAndConsume(&self->stringTableBuf_, new_JavaIoByteArrayOutputStream_init());
  JreStrongAssignAndConsume(&self->attributes_, new_JavaUtilVector_init());
  JreStrongAssignAndConsume(&self->attrStartTable_, new_JavaUtilHashtable_init());
  JreStrongAssignAndConsume(&self->attrValueTable_, new_JavaUtilHashtable_init());
  JreStrongAssignAndConsume(&self->tagTable_, new_JavaUtilHashtable_init());
}

OrgKxml2WapWbxmlSerializer *new_OrgKxml2WapWbxmlSerializer_init() {
  J2OBJC_NEW_IMPL(OrgKxml2WapWbxmlSerializer, init)
}

OrgKxml2WapWbxmlSerializer *create_OrgKxml2WapWbxmlSerializer_init() {
  J2OBJC_CREATE_IMPL(OrgKxml2WapWbxmlSerializer, init)
}

void OrgKxml2WapWbxmlSerializer_writeStrWithNSString_(OrgKxml2WapWbxmlSerializer *self, NSString *text) {
  jint p0 = 0;
  jint lastCut = 0;
  jint len = [((NSString *) nil_chk(text)) java_length];
  while (p0 < len) {
    while (p0 < len && [text charAtWithInt:p0] < 'A') {
      p0++;
    }
    jint p1 = p0;
    while (p1 < len && [text charAtWithInt:p1] >= 'A') {
      p1++;
    }
    if (p1 - p0 > 10) {
      if (p0 > lastCut && [text charAtWithInt:p0 - 1] == ' ' && [((JavaUtilHashtable *) nil_chk(self->stringTable_)) getWithId:[text java_substring:p0 endIndex:p1]] == nil) {
        [((JavaIoByteArrayOutputStream *) nil_chk(self->buf_)) writeWithInt:OrgKxml2WapWbxml_STR_T];
        OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, [text java_substring:lastCut endIndex:p1], false);
      }
      else {
        if (p0 > lastCut && [text charAtWithInt:p0 - 1] == ' ') {
          p0--;
        }
        if (p0 > lastCut) {
          [((JavaIoByteArrayOutputStream *) nil_chk(self->buf_)) writeWithInt:OrgKxml2WapWbxml_STR_T];
          OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, [text java_substring:lastCut endIndex:p0], false);
        }
        [((JavaIoByteArrayOutputStream *) nil_chk(self->buf_)) writeWithInt:OrgKxml2WapWbxml_STR_T];
        OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, [text java_substring:p0 endIndex:p1], true);
      }
      lastCut = p1;
    }
    p0 = p1;
  }
  if (lastCut < len) {
    [((JavaIoByteArrayOutputStream *) nil_chk(self->buf_)) writeWithInt:OrgKxml2WapWbxml_STR_T];
    OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(self, [text java_substring:lastCut endIndex:len], false);
  }
}

void OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(JavaIoOutputStream *outArg, jint i) {
  OrgKxml2WapWbxmlSerializer_initialize();
  IOSByteArray *buf = [IOSByteArray arrayWithLength:5];
  jint idx = 0;
  do {
    *IOSByteArray_GetRef(buf, idx++) = (jbyte) (i & (jint) 0x7f);
    i = JreRShift32(i, 7);
  }
  while (i != 0);
  while (idx > 1) {
    [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(buf, --idx) | (jint) 0x80];
  }
  [((JavaIoOutputStream *) nil_chk(outArg)) writeWithInt:IOSByteArray_Get(buf, 0)];
}

void OrgKxml2WapWbxmlSerializer_writeStrTWithNSString_withBoolean_(OrgKxml2WapWbxmlSerializer *self, NSString *s, jboolean mayPrependSpace) {
  JavaLangInteger *idx = (JavaLangInteger *) cast_chk([((JavaUtilHashtable *) nil_chk(self->stringTable_)) getWithId:s], [JavaLangInteger class]);
  if (idx != nil) {
    OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(self->buf_, [idx intValue]);
  }
  else {
    jint i = [((JavaIoByteArrayOutputStream *) nil_chk(self->stringTableBuf_)) size];
    if ([((NSString *) nil_chk(s)) charAtWithInt:0] >= '0' && mayPrependSpace) {
      s = JreStrcat("C$", ' ', s);
      OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(self->buf_, i + 1);
    }
    else {
      OrgKxml2WapWbxmlSerializer_writeIntWithJavaIoOutputStream_withInt_(self->buf_, i);
    }
    [((JavaUtilHashtable *) nil_chk(self->stringTable_)) putWithId:s withId:create_JavaLangInteger_initWithInt_(i)];
    if ([s charAtWithInt:0] == ' ') {
      [((JavaUtilHashtable *) nil_chk(self->stringTable_)) putWithId:[s java_substring:1] withId:create_JavaLangInteger_initWithInt_(i + 1)];
    }
    jint j = [s java_lastIndexOf:' '];
    if (j > 1) {
      [((JavaUtilHashtable *) nil_chk(self->stringTable_)) putWithId:[s java_substring:j] withId:create_JavaLangInteger_initWithInt_(i + j)];
      [((JavaUtilHashtable *) nil_chk(self->stringTable_)) putWithId:[s java_substring:j + 1] withId:create_JavaLangInteger_initWithInt_(i + j + 1)];
    }
    [self writeStrIWithJavaIoOutputStream:self->stringTableBuf_ withNSString:s];
    [((JavaIoByteArrayOutputStream *) nil_chk(self->stringTableBuf_)) flush];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgKxml2WapWbxmlSerializer)
