//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/kxml2/wap/WbxmlParser.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/ByteArrayOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/util/Hashtable.h"
#include "java/util/Vector.h"
#include "org/kxml2/wap/Wbxml.h"
#include "org/kxml2/wap/WbxmlParser.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgKxml2WapWbxmlParser () {
 @public
  JavaIoInputStream *in_;
  jint TAG_TABLE_;
  jint ATTR_START_TABLE_;
  jint ATTR_VALUE_TABLE_;
  IOSObjectArray *attrStartTable_;
  IOSObjectArray *attrValueTable_;
  IOSObjectArray *tagTable_;
  IOSByteArray *stringTable_;
  JavaUtilHashtable *cacheStringTable_;
  jboolean processNsp_;
  jint depth_;
  IOSObjectArray *elementStack_;
  IOSObjectArray *nspStack_;
  IOSIntArray *nspCounts_;
  jint attributeCount_;
  IOSObjectArray *attributes_;
  jint nextId_;
  JavaUtilVector *tables_;
  jint version__;
  jint publicIdentifierId_;
  NSString *prefix_;
  NSString *namespace__;
  NSString *name_;
  NSString *text_;
  id wapExtensionData_;
  jint wapCode_;
  jint type_;
  jboolean degenerated_;
  jboolean isWhitespace_;
  NSString *encoding_;
}

- (jboolean)adjustNsp;

- (void)setTableWithInt:(jint)page
                withInt:(jint)type
      withNSStringArray:(IOSObjectArray *)table;

- (void)exceptionWithNSString:(NSString *)desc;

- (void)selectPageWithInt:(jint)nr
              withBoolean:(jboolean)tags;

- (void)nextImpl;

- (jint)peekId;

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(jint)required;

@end

J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, in_, JavaIoInputStream *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, attrStartTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, attrValueTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, tagTable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, stringTable_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, cacheStringTable_, JavaUtilHashtable *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, elementStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, nspStack_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, nspCounts_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, attributes_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, tables_, JavaUtilVector *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, prefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, namespace__, NSString *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, text_, NSString *)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, wapExtensionData_, id)
J2OBJC_FIELD_SETTER(OrgKxml2WapWbxmlParser, encoding_, NSString *)

inline NSString *OrgKxml2WapWbxmlParser_get_UNEXPECTED_EOF();
static NSString *OrgKxml2WapWbxmlParser_UNEXPECTED_EOF = @"Unexpected EOF";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgKxml2WapWbxmlParser, UNEXPECTED_EOF, NSString *)

inline NSString *OrgKxml2WapWbxmlParser_get_ILLEGAL_TYPE();
static NSString *OrgKxml2WapWbxmlParser_ILLEGAL_TYPE = @"Wrong event type";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgKxml2WapWbxmlParser, ILLEGAL_TYPE, NSString *)

__attribute__((unused)) static jboolean OrgKxml2WapWbxmlParser_adjustNsp(OrgKxml2WapWbxmlParser *self);

__attribute__((unused)) static void OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(OrgKxml2WapWbxmlParser *self, jint page, jint type, IOSObjectArray *table);

__attribute__((unused)) static void OrgKxml2WapWbxmlParser_exceptionWithNSString_(OrgKxml2WapWbxmlParser *self, NSString *desc);

__attribute__((unused)) static void OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(OrgKxml2WapWbxmlParser *self, jint nr, jboolean tags);

__attribute__((unused)) static void OrgKxml2WapWbxmlParser_nextImpl(OrgKxml2WapWbxmlParser *self);

__attribute__((unused)) static jint OrgKxml2WapWbxmlParser_peekId(OrgKxml2WapWbxmlParser *self);

__attribute__((unused)) static IOSObjectArray *OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(OrgKxml2WapWbxmlParser *self, IOSObjectArray *arr, jint required);

NSString *OrgKxml2WapWbxmlParser_HEX_DIGITS = @"0123456789abcdef";

@implementation OrgKxml2WapWbxmlParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgKxml2WapWbxmlParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)getFeatureWithNSString:(NSString *)feature {
  if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES)) isEqual:feature]) return processNsp_;
  else return false;
}

- (NSString *)getInputEncoding {
  return encoding_;
}

- (void)defineEntityReplacementTextWithNSString:(NSString *)entity
                                   withNSString:(NSString *)value {
}

- (id)getPropertyWithNSString:(NSString *)property {
  return nil;
}

- (jint)getNamespaceCountWithInt:(jint)depth {
  if (depth > self->depth_) @throw create_JavaLangIndexOutOfBoundsException_init();
  return IOSIntArray_Get(nil_chk(nspCounts_), depth);
}

- (NSString *)getNamespacePrefixWithInt:(jint)pos {
  return IOSObjectArray_Get(nil_chk(nspStack_), JreLShift32(pos, 1));
}

- (NSString *)getNamespaceUriWithInt:(jint)pos {
  return IOSObjectArray_Get(nil_chk(nspStack_), (JreLShift32(pos, 1)) + 1);
}

- (NSString *)getNamespaceWithNSString:(NSString *)prefix {
  if ([@"xml" isEqual:prefix]) return @"http://www.w3.org/XML/1998/namespace";
  if ([@"xmlns" isEqual:prefix]) return @"http://www.w3.org/2000/xmlns/";
  for (jint i = (JreLShift32([self getNamespaceCountWithInt:depth_], 1)) - 2; i >= 0; i -= 2) {
    if (prefix == nil) {
      if (IOSObjectArray_Get(nil_chk(nspStack_), i) == nil) return IOSObjectArray_Get(nspStack_, i + 1);
    }
    else if ([prefix isEqual:IOSObjectArray_Get(nil_chk(nspStack_), i)]) return IOSObjectArray_Get(nil_chk(nspStack_), i + 1);
  }
  return nil;
}

- (jint)getDepth {
  return depth_;
}

- (NSString *)getPositionDescription {
  JavaLangStringBuffer *buf = create_JavaLangStringBuffer_initWithNSString_(type_ < ((IOSObjectArray *) nil_chk(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES)))->size_ ? IOSObjectArray_Get(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES), type_) : @"unknown");
  [buf appendWithChar:' '];
  if (type_ == OrgXmlpullV1XmlPullParser_START_TAG || type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    if (degenerated_) [buf appendWithNSString:@"(empty) "];
    [buf appendWithChar:'<'];
    if (type_ == OrgXmlpullV1XmlPullParser_END_TAG) [buf appendWithChar:'/'];
    if (prefix_ != nil) [buf appendWithNSString:JreStrcat("C$C$C", '{', namespace__, '}', prefix_, ':')];
    [buf appendWithNSString:name_];
    jint cnt = JreLShift32(attributeCount_, 2);
    for (jint i = 0; i < cnt; i += 4) {
      [buf appendWithChar:' '];
      if (IOSObjectArray_Get(nil_chk(attributes_), i + 1) != nil) [buf appendWithNSString:JreStrcat("C$C$C", '{', IOSObjectArray_Get(attributes_, i), '}', IOSObjectArray_Get(attributes_, i + 1), ':')];
      [buf appendWithNSString:JreStrcat("$$$C", IOSObjectArray_Get(nil_chk(attributes_), i + 2), @"='", IOSObjectArray_Get(attributes_, i + 3), '\'')];
    }
    [buf appendWithChar:'>'];
  }
  else if (type_ == OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE) ;
  else if (type_ != OrgXmlpullV1XmlPullParser_TEXT) [buf appendWithNSString:[self getText]];
  else if (isWhitespace_) [buf appendWithNSString:@"(whitespace)"];
  else {
    NSString *text = [self getText];
    if ([((NSString *) nil_chk(text)) java_length] > 16) text = JreStrcat("$$", [text java_substring:0 endIndex:16], @"...");
    [buf appendWithNSString:text];
  }
  return [buf description];
}

- (jint)getLineNumber {
  return -1;
}

- (jint)getColumnNumber {
  return -1;
}

- (jboolean)isWhitespace {
  if (type_ != OrgXmlpullV1XmlPullParser_TEXT && type_ != OrgXmlpullV1XmlPullParser_IGNORABLE_WHITESPACE && type_ != OrgXmlpullV1XmlPullParser_CDSECT) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, OrgKxml2WapWbxmlParser_ILLEGAL_TYPE);
  return isWhitespace_;
}

- (NSString *)getText {
  return text_;
}

- (IOSCharArray *)getTextCharactersWithIntArray:(IOSIntArray *)poslen {
  if (type_ >= OrgXmlpullV1XmlPullParser_TEXT) {
    *IOSIntArray_GetRef(nil_chk(poslen), 0) = 0;
    *IOSIntArray_GetRef(poslen, 1) = [((NSString *) nil_chk(text_)) java_length];
    IOSCharArray *buf = [IOSCharArray arrayWithLength:[((NSString *) nil_chk(text_)) java_length]];
    [((NSString *) nil_chk(text_)) java_getChars:0 sourceEnd:[text_ java_length] destination:buf destinationBegin:0];
    return buf;
  }
  *IOSIntArray_GetRef(nil_chk(poslen), 0) = -1;
  *IOSIntArray_GetRef(poslen, 1) = -1;
  return nil;
}

- (NSString *)getNamespace {
  return namespace__;
}

- (NSString *)getName {
  return name_;
}

- (NSString *)getPrefix {
  return prefix_;
}

- (jboolean)isEmptyElementTag {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, OrgKxml2WapWbxmlParser_ILLEGAL_TYPE);
  return degenerated_;
}

- (jint)getAttributeCount {
  return attributeCount_;
}

- (NSString *)getAttributeTypeWithInt:(jint)index {
  return @"CDATA";
}

- (jboolean)isAttributeDefaultWithInt:(jint)index {
  return false;
}

- (NSString *)getAttributeNamespaceWithInt:(jint)index {
  if (index >= attributeCount_) @throw create_JavaLangIndexOutOfBoundsException_init();
  return IOSObjectArray_Get(nil_chk(attributes_), JreLShift32(index, 2));
}

- (NSString *)getAttributeNameWithInt:(jint)index {
  if (index >= attributeCount_) @throw create_JavaLangIndexOutOfBoundsException_init();
  return IOSObjectArray_Get(nil_chk(attributes_), (JreLShift32(index, 2)) + 2);
}

- (NSString *)getAttributePrefixWithInt:(jint)index {
  if (index >= attributeCount_) @throw create_JavaLangIndexOutOfBoundsException_init();
  return IOSObjectArray_Get(nil_chk(attributes_), (JreLShift32(index, 2)) + 1);
}

- (NSString *)getAttributeValueWithInt:(jint)index {
  if (index >= attributeCount_) @throw create_JavaLangIndexOutOfBoundsException_init();
  return IOSObjectArray_Get(nil_chk(attributes_), (JreLShift32(index, 2)) + 3);
}

- (NSString *)getAttributeValueWithNSString:(NSString *)namespace_
                               withNSString:(NSString *)name {
  for (jint i = (JreLShift32(attributeCount_, 2)) - 4; i >= 0; i -= 4) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(attributes_), i + 2))) isEqual:name] && (namespace_ == nil || [((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(attributes_), i))) isEqual:namespace_])) return IOSObjectArray_Get(nil_chk(attributes_), i + 3);
  }
  return nil;
}

- (jint)getEventType {
  return type_;
}

- (jint)next {
  isWhitespace_ = true;
  jint minType = 9999;
  while (true) {
    NSString *save = text_;
    OrgKxml2WapWbxmlParser_nextImpl(self);
    if (type_ < minType) minType = type_;
    if (minType > OrgXmlpullV1XmlPullParser_CDSECT) continue;
    if (minType >= OrgXmlpullV1XmlPullParser_TEXT) {
      if (save != nil) JreStrongAssign(&text_, text_ == nil ? save : JreStrcat("$$", save, text_));
      switch (OrgKxml2WapWbxmlParser_peekId(self)) {
        case OrgKxml2WapWbxml_ENTITY:
        case OrgKxml2WapWbxml_STR_I:
        case OrgKxml2WapWbxml_STR_T:
        case OrgKxml2WapWbxml_LITERAL:
        case OrgKxml2WapWbxml_LITERAL_C:
        case OrgKxml2WapWbxml_LITERAL_A:
        case OrgKxml2WapWbxml_LITERAL_AC:
        continue;
      }
    }
    break;
  }
  type_ = minType;
  if (type_ > OrgXmlpullV1XmlPullParser_TEXT) type_ = OrgXmlpullV1XmlPullParser_TEXT;
  return type_;
}

- (jint)nextToken {
  isWhitespace_ = true;
  OrgKxml2WapWbxmlParser_nextImpl(self);
  return type_;
}

- (jint)nextTag {
  [self next];
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT && isWhitespace_) [self next];
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG && type_ != OrgXmlpullV1XmlPullParser_START_TAG) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"unexpected type");
  return type_;
}

- (NSString *)nextText {
  if (type_ != OrgXmlpullV1XmlPullParser_START_TAG) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"precondition: START_TAG");
  [self next];
  NSString *result;
  if (type_ == OrgXmlpullV1XmlPullParser_TEXT) {
    result = [self getText];
    [self next];
  }
  else result = @"";
  if (type_ != OrgXmlpullV1XmlPullParser_END_TAG) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"END_TAG expected");
  return result;
}

- (void)requireWithInt:(jint)type
          withNSString:(NSString *)namespace_
          withNSString:(NSString *)name {
  if (type != self->type_ || (namespace_ != nil && ![namespace_ isEqual:[self getNamespace]]) || (name != nil && ![name isEqual:[self getName]])) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$", @"expected: ", (type == OrgKxml2WapWbxmlParser_WAP_EXTENSION ? @"WAP Ext." : (JreStrcat("$$$C$", IOSObjectArray_Get(nil_chk(JreLoadStatic(OrgXmlpullV1XmlPullParser, TYPES)), type), @" {", namespace_, '}', name)))));
}

- (void)setInputWithJavaIoReader:(JavaIoReader *)reader {
  OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"InputStream required");
}

- (void)setInputWithJavaIoInputStream:(JavaIoInputStream *)inArg
                         withNSString:(NSString *)enc {
  JreStrongAssign(&self->in_, inArg);
  @try {
    version__ = [self readByte];
    publicIdentifierId_ = [self readInt];
    if (publicIdentifierId_ == 0) [self readInt];
    jint charset = [self readInt];
    if (nil == enc) {
      switch (charset) {
        case 4:
        JreStrongAssign(&encoding_, @"ISO-8859-1");
        break;
        case 106:
        JreStrongAssign(&encoding_, @"UTF-8");
        break;
        default:
        @throw create_JavaIoUnsupportedEncodingException_initWithNSString_(JreStrcat("I", charset));
      }
    }
    else {
      JreStrongAssign(&encoding_, enc);
    }
    jint strTabSize = [self readInt];
    JreStrongAssignAndConsume(&stringTable_, [IOSByteArray newArrayWithLength:strTabSize]);
    jint ok = 0;
    while (ok < strTabSize) {
      jint cnt = [((JavaIoInputStream *) nil_chk(inArg)) readWithByteArray:stringTable_ withInt:ok withInt:strTabSize - ok];
      if (cnt <= 0) break;
      ok += cnt;
    }
    OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, 0, true);
    OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, 0, false);
  }
  @catch (JavaIoIOException *e) {
    OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"Illegal input format");
  }
}

- (void)setFeatureWithNSString:(NSString *)feature
                   withBoolean:(jboolean)value {
  if ([((NSString *) nil_chk(OrgXmlpullV1XmlPullParser_FEATURE_PROCESS_NAMESPACES)) isEqual:feature]) processNsp_ = value;
  else OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$", @"unsupported feature: ", feature));
}

- (void)setPropertyWithNSString:(NSString *)property
                         withId:(id)value {
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"unsupported property: ", property));
}

- (jboolean)adjustNsp {
  return OrgKxml2WapWbxmlParser_adjustNsp(self);
}

- (void)setTableWithInt:(jint)page
                withInt:(jint)type
      withNSStringArray:(IOSObjectArray *)table {
  OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(self, page, type, table);
}

- (void)exceptionWithNSString:(NSString *)desc {
  OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, desc);
}

- (void)selectPageWithInt:(jint)nr
              withBoolean:(jboolean)tags {
  OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, nr, tags);
}

- (void)nextImpl {
  OrgKxml2WapWbxmlParser_nextImpl(self);
}

- (id)parseWapExtensionWithInt:(jint)id_ {
  switch (id_) {
    case OrgKxml2WapWbxml_EXT_I_0:
    case OrgKxml2WapWbxml_EXT_I_1:
    case OrgKxml2WapWbxml_EXT_I_2:
    return [self readStrI];
    case OrgKxml2WapWbxml_EXT_T_0:
    case OrgKxml2WapWbxml_EXT_T_1:
    case OrgKxml2WapWbxml_EXT_T_2:
    return create_JavaLangInteger_initWithInt_([self readInt]);
    case OrgKxml2WapWbxml_EXT_0:
    case OrgKxml2WapWbxml_EXT_1:
    case OrgKxml2WapWbxml_EXT_2:
    return nil;
    case OrgKxml2WapWbxml_OPAQUE:
    {
      jint count = [self readInt];
      IOSByteArray *buf = [IOSByteArray arrayWithLength:count];
      while (count > 0) {
        count -= [((JavaIoInputStream *) nil_chk(in_)) readWithByteArray:buf withInt:buf->size_ - count withInt:count];
      }
      return buf;
    }
    default:
    OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$I", @"illegal id: ", id_));
    return nil;
  }
}

- (void)readAttr {
  jint id_ = [self readByte];
  jint i = 0;
  while (id_ != 1) {
    while (id_ == OrgKxml2WapWbxml_SWITCH_PAGE) {
      OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, [self readByte], false);
      id_ = [self readByte];
    }
    NSString *name = [self resolveIdWithNSStringArray:attrStartTable_ withInt:id_];
    JavaLangStringBuffer *value;
    jint cut = [((NSString *) nil_chk(name)) java_indexOf:'='];
    if (cut == -1) value = create_JavaLangStringBuffer_init();
    else {
      value = create_JavaLangStringBuffer_initWithNSString_([name java_substring:cut + 1]);
      name = [name java_substring:0 endIndex:cut];
    }
    id_ = [self readByte];
    while (id_ > 128 || id_ == OrgKxml2WapWbxml_SWITCH_PAGE || id_ == OrgKxml2WapWbxml_ENTITY || id_ == OrgKxml2WapWbxml_STR_I || id_ == OrgKxml2WapWbxml_STR_T || (id_ >= OrgKxml2WapWbxml_EXT_I_0 && id_ <= OrgKxml2WapWbxml_EXT_I_2) || (id_ >= OrgKxml2WapWbxml_EXT_T_0 && id_ <= OrgKxml2WapWbxml_EXT_T_2)) {
      switch (id_) {
        case OrgKxml2WapWbxml_SWITCH_PAGE:
        OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, [self readByte], false);
        break;
        case OrgKxml2WapWbxml_ENTITY:
        [value appendWithChar:(jchar) [self readInt]];
        break;
        case OrgKxml2WapWbxml_STR_I:
        [value appendWithNSString:[self readStrI]];
        break;
        case OrgKxml2WapWbxml_EXT_I_0:
        case OrgKxml2WapWbxml_EXT_I_1:
        case OrgKxml2WapWbxml_EXT_I_2:
        case OrgKxml2WapWbxml_EXT_T_0:
        case OrgKxml2WapWbxml_EXT_T_1:
        case OrgKxml2WapWbxml_EXT_T_2:
        case OrgKxml2WapWbxml_EXT_0:
        case OrgKxml2WapWbxml_EXT_1:
        case OrgKxml2WapWbxml_EXT_2:
        case OrgKxml2WapWbxml_OPAQUE:
        [value appendWithNSString:[self resolveWapExtensionWithInt:id_ withId:[self parseWapExtensionWithInt:id_]]];
        break;
        case OrgKxml2WapWbxml_STR_T:
        [value appendWithNSString:[self readStrT]];
        break;
        default:
        [value appendWithNSString:[self resolveIdWithNSStringArray:attrValueTable_ withInt:id_]];
      }
      id_ = [self readByte];
    }
    JreStrongAssign(&attributes_, OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(self, attributes_, i + 4));
    IOSObjectArray_Set(nil_chk(attributes_), i++, @"");
    IOSObjectArray_Set(attributes_, i++, nil);
    IOSObjectArray_Set(attributes_, i++, name);
    IOSObjectArray_Set(attributes_, i++, [value description]);
    attributeCount_++;
  }
}

- (jint)peekId {
  return OrgKxml2WapWbxmlParser_peekId(self);
}

- (NSString *)resolveWapExtensionWithInt:(jint)id_
                                  withId:(id)data {
  if ([data isKindOfClass:[IOSByteArray class]]) {
    JavaLangStringBuffer *sb = create_JavaLangStringBuffer_init();
    IOSByteArray *b = (IOSByteArray *) cast_chk(data, [IOSByteArray class]);
    for (jint i = 0; i < ((IOSByteArray *) nil_chk(b))->size_; i++) {
      [sb appendWithChar:[((NSString *) nil_chk(OrgKxml2WapWbxmlParser_HEX_DIGITS)) charAtWithInt:(JreRShift32(IOSByteArray_Get(b, i), 4)) & (jint) 0x0f]];
      [sb appendWithChar:[OrgKxml2WapWbxmlParser_HEX_DIGITS charAtWithInt:IOSByteArray_Get(b, i) & (jint) 0x0f]];
    }
    return [sb description];
  }
  return JreStrcat("$@C", @"$(", data, ')');
}

- (NSString *)resolveIdWithNSStringArray:(IOSObjectArray *)tab
                                 withInt:(jint)id_ {
  jint idx = (id_ & (jint) 0x07f) - 5;
  if (idx == -1) {
    wapCode_ = -1;
    return [self readStrT];
  }
  if (idx < 0 || tab == nil || idx >= tab->size_ || IOSObjectArray_Get(tab, idx) == nil) @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I$", @"id ", id_, @" undef."));
  wapCode_ = idx + 5;
  return IOSObjectArray_Get(tab, idx);
}

- (void)parseElementWithInt:(jint)id_ {
  type_ = OrgXmlpullV1XmlPullParser_START_TAG;
  JreStrongAssign(&name_, [self resolveIdWithNSStringArray:tagTable_ withInt:id_ & (jint) 0x03f]);
  attributeCount_ = 0;
  if ((id_ & 128) != 0) {
    [self readAttr];
  }
  degenerated_ = ((id_ & 64) == 0);
  jint sp = JreLShift32(depth_++, 2);
  JreStrongAssign(&elementStack_, OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(self, elementStack_, sp + 4));
  IOSObjectArray_Set(nil_chk(elementStack_), sp + 3, name_);
  if (depth_ >= ((IOSIntArray *) nil_chk(nspCounts_))->size_) {
    IOSIntArray *bigger = [IOSIntArray arrayWithLength:depth_ + 4];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(nspCounts_, 0, bigger, 0, nspCounts_->size_);
    JreStrongAssign(&nspCounts_, bigger);
  }
  *IOSIntArray_GetRef(nspCounts_, depth_) = IOSIntArray_Get(nspCounts_, depth_ - 1);
  for (jint i = attributeCount_ - 1; i > 0; i--) {
    for (jint j = 0; j < i; j++) {
      if ([((NSString *) nil_chk([self getAttributeNameWithInt:i])) isEqual:[self getAttributeNameWithInt:j]]) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$", @"Duplicate Attribute: ", [self getAttributeNameWithInt:i]));
    }
  }
  if (processNsp_) OrgKxml2WapWbxmlParser_adjustNsp(self);
  else JreStrongAssign(&namespace__, @"");
  IOSObjectArray_Set(nil_chk(elementStack_), sp, namespace__);
  IOSObjectArray_Set(elementStack_, sp + 1, prefix_);
  IOSObjectArray_Set(elementStack_, sp + 2, name_);
}

- (IOSObjectArray *)ensureCapacityWithNSStringArray:(IOSObjectArray *)arr
                                            withInt:(jint)required {
  return OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(self, arr, required);
}

- (jint)readByte {
  jint i = [((JavaIoInputStream *) nil_chk(in_)) read];
  if (i == -1) @throw create_JavaIoIOException_initWithNSString_(@"Unexpected EOF");
  return i;
}

- (jint)readInt {
  jint result = 0;
  jint i;
  do {
    i = [self readByte];
    result = (JreLShift32(result, 7)) | (i & (jint) 0x7f);
  }
  while ((i & (jint) 0x80) != 0);
  return result;
}

- (NSString *)readStrI {
  JavaIoByteArrayOutputStream *buf = create_JavaIoByteArrayOutputStream_init();
  jboolean wsp = true;
  while (true) {
    jint i = [((JavaIoInputStream *) nil_chk(in_)) read];
    if (i == 0) {
      break;
    }
    if (i == -1) {
      @throw create_JavaIoIOException_initWithNSString_(OrgKxml2WapWbxmlParser_UNEXPECTED_EOF);
    }
    if (i > 32) {
      wsp = false;
    }
    [buf writeWithInt:i];
  }
  isWhitespace_ = wsp;
  NSString *result = [NSString java_stringWithBytes:[buf toByteArray] charsetName:encoding_];
  [buf close];
  return result;
}

- (NSString *)readStrT {
  jint pos = [self readInt];
  if (cacheStringTable_ == nil) {
    JreStrongAssignAndConsume(&cacheStringTable_, new_JavaUtilHashtable_init());
  }
  NSString *forReturn = (NSString *) cast_chk([cacheStringTable_ getWithId:create_JavaLangInteger_initWithInt_(pos)], [NSString class]);
  if (forReturn == nil) {
    jint end = pos;
    while (end < ((IOSByteArray *) nil_chk(stringTable_))->size_ && IOSByteArray_Get(stringTable_, end) != 0x0000) {
      end++;
    }
    forReturn = [NSString java_stringWithBytes:stringTable_ offset:pos length:end - pos charsetName:encoding_];
    [((JavaUtilHashtable *) nil_chk(cacheStringTable_)) putWithId:create_JavaLangInteger_initWithInt_(pos) withId:forReturn];
  }
  return forReturn;
}

- (void)setTagTableWithInt:(jint)page
         withNSStringArray:(IOSObjectArray *)table {
  OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(self, page, TAG_TABLE_, table);
}

- (void)setAttrStartTableWithInt:(jint)page
               withNSStringArray:(IOSObjectArray *)table {
  OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(self, page, ATTR_START_TABLE_, table);
}

- (void)setAttrValueTableWithInt:(jint)page
               withNSStringArray:(IOSObjectArray *)table {
  OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(self, page, ATTR_VALUE_TABLE_, table);
}

- (jint)getWapCode {
  return wapCode_;
}

- (id)getWapExtensionData {
  return wapExtensionData_;
}

- (void)dealloc {
  RELEASE_(in_);
  RELEASE_(attrStartTable_);
  RELEASE_(attrValueTable_);
  RELEASE_(tagTable_);
  RELEASE_(stringTable_);
  RELEASE_(cacheStringTable_);
  RELEASE_(elementStack_);
  RELEASE_(nspStack_);
  RELEASE_(nspCounts_);
  RELEASE_(attributes_);
  RELEASE_(tables_);
  RELEASE_(prefix_);
  RELEASE_(namespace__);
  RELEASE_(name_);
  RELEASE_(text_);
  RELEASE_(wapExtensionData_);
  RELEASE_(encoding_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[C", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 15, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, 19, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 24, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, 4, -1, -1, -1 },
    { NULL, "Z", 0x12, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x12, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 31, 1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, 4, -1, -1, -1 },
    { NULL, "V", 0x12, -1, -1, 34, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, 7, 34, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 34, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, 36, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 39, 40, 36, -1, -1, -1 },
    { NULL, "V", 0x0, 41, 7, 34, -1, -1, -1 },
    { NULL, "[LNSString;", 0x12, 42, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 36, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, 36, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, 36, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, 36, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 44, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFeatureWithNSString:);
  methods[2].selector = @selector(getInputEncoding);
  methods[3].selector = @selector(defineEntityReplacementTextWithNSString:withNSString:);
  methods[4].selector = @selector(getPropertyWithNSString:);
  methods[5].selector = @selector(getNamespaceCountWithInt:);
  methods[6].selector = @selector(getNamespacePrefixWithInt:);
  methods[7].selector = @selector(getNamespaceUriWithInt:);
  methods[8].selector = @selector(getNamespaceWithNSString:);
  methods[9].selector = @selector(getDepth);
  methods[10].selector = @selector(getPositionDescription);
  methods[11].selector = @selector(getLineNumber);
  methods[12].selector = @selector(getColumnNumber);
  methods[13].selector = @selector(isWhitespace);
  methods[14].selector = @selector(getText);
  methods[15].selector = @selector(getTextCharactersWithIntArray:);
  methods[16].selector = @selector(getNamespace);
  methods[17].selector = @selector(getName);
  methods[18].selector = @selector(getPrefix);
  methods[19].selector = @selector(isEmptyElementTag);
  methods[20].selector = @selector(getAttributeCount);
  methods[21].selector = @selector(getAttributeTypeWithInt:);
  methods[22].selector = @selector(isAttributeDefaultWithInt:);
  methods[23].selector = @selector(getAttributeNamespaceWithInt:);
  methods[24].selector = @selector(getAttributeNameWithInt:);
  methods[25].selector = @selector(getAttributePrefixWithInt:);
  methods[26].selector = @selector(getAttributeValueWithInt:);
  methods[27].selector = @selector(getAttributeValueWithNSString:withNSString:);
  methods[28].selector = @selector(getEventType);
  methods[29].selector = @selector(next);
  methods[30].selector = @selector(nextToken);
  methods[31].selector = @selector(nextTag);
  methods[32].selector = @selector(nextText);
  methods[33].selector = @selector(requireWithInt:withNSString:withNSString:);
  methods[34].selector = @selector(setInputWithJavaIoReader:);
  methods[35].selector = @selector(setInputWithJavaIoInputStream:withNSString:);
  methods[36].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[37].selector = @selector(setPropertyWithNSString:withId:);
  methods[38].selector = @selector(adjustNsp);
  methods[39].selector = @selector(setTableWithInt:withInt:withNSStringArray:);
  methods[40].selector = @selector(exceptionWithNSString:);
  methods[41].selector = @selector(selectPageWithInt:withBoolean:);
  methods[42].selector = @selector(nextImpl);
  methods[43].selector = @selector(parseWapExtensionWithInt:);
  methods[44].selector = @selector(readAttr);
  methods[45].selector = @selector(peekId);
  methods[46].selector = @selector(resolveWapExtensionWithInt:withId:);
  methods[47].selector = @selector(resolveIdWithNSStringArray:withInt:);
  methods[48].selector = @selector(parseElementWithInt:);
  methods[49].selector = @selector(ensureCapacityWithNSStringArray:withInt:);
  methods[50].selector = @selector(readByte);
  methods[51].selector = @selector(readInt);
  methods[52].selector = @selector(readStrI);
  methods[53].selector = @selector(readStrT);
  methods[54].selector = @selector(setTagTableWithInt:withNSStringArray:);
  methods[55].selector = @selector(setAttrStartTableWithInt:withNSStringArray:);
  methods[56].selector = @selector(setAttrValueTableWithInt:withNSStringArray:);
  methods[57].selector = @selector(getWapCode);
  methods[58].selector = @selector(getWapExtensionData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HEX_DIGITS", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 47, -1, -1 },
    { "WAP_EXTENSION", "I", .constantValue.asInt = OrgKxml2WapWbxmlParser_WAP_EXTENSION, 0x19, -1, -1, -1, -1 },
    { "UNEXPECTED_EOF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "ILLEGAL_TYPE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 49, -1, -1 },
    { "in_", "LJavaIoInputStream;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TAG_TABLE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ATTR_START_TABLE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ATTR_VALUE_TABLE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrStartTable_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attrValueTable_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tagTable_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stringTable_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cacheStringTable_", "LJavaUtilHashtable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "processNsp_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "depth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "elementStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspStack_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nspCounts_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributes_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tables_", "LJavaUtilVector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "version__", "I", .constantValue.asLong = 0, 0x2, 50, -1, -1, -1 },
    { "publicIdentifierId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "namespace__", "LNSString;", .constantValue.asLong = 0, 0x2, 51, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wapExtensionData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wapCode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "degenerated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isWhitespace_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "encoding_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getFeature", "LNSString;", "defineEntityReplacementText", "LNSString;LNSString;", "LOrgXmlpullV1XmlPullParserException;", "getProperty", "getNamespaceCount", "I", "getNamespacePrefix", "getNamespaceUri", "getNamespace", "getTextCharacters", "[I", "getAttributeType", "isAttributeDefault", "getAttributeNamespace", "getAttributeName", "getAttributePrefix", "getAttributeValue", "LOrgXmlpullV1XmlPullParserException;LJavaIoIOException;", "require", "ILNSString;LNSString;", "setInput", "LJavaIoReader;", "LJavaIoInputStream;LNSString;", "setFeature", "LNSString;Z", "setProperty", "LNSString;LNSObject;", "setTable", "II[LNSString;", "exception", "selectPage", "IZ", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "parseWapExtension", "LJavaIoIOException;", "resolveWapExtension", "ILNSObject;", "resolveId", "[LNSString;I", "parseElement", "ensureCapacity", "setTagTable", "I[LNSString;", "setAttrStartTable", "setAttrValueTable", &OrgKxml2WapWbxmlParser_HEX_DIGITS, &OrgKxml2WapWbxmlParser_UNEXPECTED_EOF, &OrgKxml2WapWbxmlParser_ILLEGAL_TYPE, "version", "namespace" };
  static const J2ObjcClassInfo _OrgKxml2WapWbxmlParser = { "WbxmlParser", "org.kxml2.wap", ptrTable, methods, fields, 7, 0x1, 59, 34, -1, -1, -1, -1, -1 };
  return &_OrgKxml2WapWbxmlParser;
}

@end

void OrgKxml2WapWbxmlParser_init(OrgKxml2WapWbxmlParser *self) {
  NSObject_init(self);
  self->TAG_TABLE_ = 0;
  self->ATTR_START_TABLE_ = 1;
  self->ATTR_VALUE_TABLE_ = 2;
  JreStrongAssign(&self->cacheStringTable_, nil);
  JreStrongAssignAndConsume(&self->elementStack_, [IOSObjectArray newArrayWithLength:16 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->nspStack_, [IOSObjectArray newArrayWithLength:8 type:NSString_class_()]);
  JreStrongAssignAndConsume(&self->nspCounts_, [IOSIntArray newArrayWithLength:4]);
  JreStrongAssignAndConsume(&self->attributes_, [IOSObjectArray newArrayWithLength:16 type:NSString_class_()]);
  self->nextId_ = -2;
  JreStrongAssignAndConsume(&self->tables_, new_JavaUtilVector_init());
}

OrgKxml2WapWbxmlParser *new_OrgKxml2WapWbxmlParser_init() {
  J2OBJC_NEW_IMPL(OrgKxml2WapWbxmlParser, init)
}

OrgKxml2WapWbxmlParser *create_OrgKxml2WapWbxmlParser_init() {
  J2OBJC_CREATE_IMPL(OrgKxml2WapWbxmlParser, init)
}

jboolean OrgKxml2WapWbxmlParser_adjustNsp(OrgKxml2WapWbxmlParser *self) {
  jboolean any = false;
  for (jint i = 0; i < JreLShift32(self->attributeCount_, 2); i += 4) {
    NSString *attrName = IOSObjectArray_Get(nil_chk(self->attributes_), i + 2);
    jint cut = [((NSString *) nil_chk(attrName)) java_indexOf:':'];
    NSString *prefix;
    if (cut != -1) {
      prefix = [attrName java_substring:0 endIndex:cut];
      attrName = [attrName java_substring:cut + 1];
    }
    else if ([attrName isEqual:@"xmlns"]) {
      prefix = attrName;
      attrName = nil;
    }
    else continue;
    if (![((NSString *) nil_chk(prefix)) isEqual:@"xmlns"]) {
      any = true;
    }
    else {
      jint j = JreLShift32(((*IOSIntArray_GetRef(nil_chk(self->nspCounts_), self->depth_))++), 1);
      JreStrongAssign(&self->nspStack_, OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(self, self->nspStack_, j + 2));
      IOSObjectArray_Set(nil_chk(self->nspStack_), j, attrName);
      IOSObjectArray_Set(self->nspStack_, j + 1, IOSObjectArray_Get(nil_chk(self->attributes_), i + 3));
      if (attrName != nil && [((NSString *) nil_chk(IOSObjectArray_Get(self->attributes_, i + 3))) isEqual:@""]) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, @"illegal empty namespace");
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->attributes_, i + 4, self->attributes_, i, (JreLShift32((--self->attributeCount_), 2)) - i);
      i -= 4;
    }
  }
  if (any) {
    for (jint i = (JreLShift32(self->attributeCount_, 2)) - 4; i >= 0; i -= 4) {
      NSString *attrName = IOSObjectArray_Get(nil_chk(self->attributes_), i + 2);
      jint cut = [((NSString *) nil_chk(attrName)) java_indexOf:':'];
      if (cut == 0) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"illegal attribute name: ", attrName, @" at ", self));
      else if (cut != -1) {
        NSString *attrPrefix = [attrName java_substring:0 endIndex:cut];
        attrName = [attrName java_substring:cut + 1];
        NSString *attrNs = [self getNamespaceWithNSString:attrPrefix];
        if (attrNs == nil) @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$@", @"Undefined Prefix: ", attrPrefix, @" in ", self));
        IOSObjectArray_Set(nil_chk(self->attributes_), i, attrNs);
        IOSObjectArray_Set(self->attributes_, i + 1, attrPrefix);
        IOSObjectArray_Set(self->attributes_, i + 2, attrName);
        for (jint j = (JreLShift32(self->attributeCount_, 2)) - 4; j > i; j -= 4) if ([((NSString *) nil_chk(attrName)) isEqual:IOSObjectArray_Get(nil_chk(self->attributes_), j + 2)] && [attrNs isEqual:IOSObjectArray_Get(nil_chk(self->attributes_), j)]) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$C$", @"Duplicate Attribute: {", attrNs, '}', attrName));
      }
    }
  }
  jint cut = [((NSString *) nil_chk(self->name_)) java_indexOf:':'];
  if (cut == 0) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$", @"illegal tag name: ", self->name_));
  else if (cut != -1) {
    JreStrongAssign(&self->prefix_, [((NSString *) nil_chk(self->name_)) java_substring:0 endIndex:cut]);
    JreStrongAssign(&self->name_, [((NSString *) nil_chk(self->name_)) java_substring:cut + 1]);
  }
  JreStrongAssign(&self->namespace__, [self getNamespaceWithNSString:self->prefix_]);
  if (self->namespace__ == nil) {
    if (self->prefix_ != nil) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$$", @"undefined prefix: ", self->prefix_));
    JreStrongAssign(&self->namespace__, OrgXmlpullV1XmlPullParser_NO_NAMESPACE);
  }
  return any;
}

void OrgKxml2WapWbxmlParser_setTableWithInt_withInt_withNSStringArray_(OrgKxml2WapWbxmlParser *self, jint page, jint type, IOSObjectArray *table) {
  if (self->stringTable_ != nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"setXxxTable must be called before setInput!");
  }
  while ([((JavaUtilVector *) nil_chk(self->tables_)) size] < 3 * page + 3) {
    [((JavaUtilVector *) nil_chk(self->tables_)) addElementWithId:nil];
  }
  [((JavaUtilVector *) nil_chk(self->tables_)) setElementAtWithId:table withInt:page * 3 + type];
}

void OrgKxml2WapWbxmlParser_exceptionWithNSString_(OrgKxml2WapWbxmlParser *self, NSString *desc) {
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_withOrgXmlpullV1XmlPullParser_withNSException_(desc, self, nil);
}

void OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(OrgKxml2WapWbxmlParser *self, jint nr, jboolean tags) {
  if ([((JavaUtilVector *) nil_chk(self->tables_)) size] == 0 && nr == 0) return;
  if (nr * 3 > [((JavaUtilVector *) nil_chk(self->tables_)) size]) OrgKxml2WapWbxmlParser_exceptionWithNSString_(self, JreStrcat("$I$", @"Code Page ", nr, @" undefined!"));
  if (tags) JreStrongAssign(&self->tagTable_, (IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(self->tables_)) elementAtWithInt:nr * 3 + self->TAG_TABLE_], IOSClass_arrayType(NSString_class_(), 1)));
  else {
    JreStrongAssign(&self->attrStartTable_, (IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(self->tables_)) elementAtWithInt:nr * 3 + self->ATTR_START_TABLE_], IOSClass_arrayType(NSString_class_(), 1)));
    JreStrongAssign(&self->attrValueTable_, (IOSObjectArray *) cast_check([((JavaUtilVector *) nil_chk(self->tables_)) elementAtWithInt:nr * 3 + self->ATTR_VALUE_TABLE_], IOSClass_arrayType(NSString_class_(), 1)));
  }
}

void OrgKxml2WapWbxmlParser_nextImpl(OrgKxml2WapWbxmlParser *self) {
  NSString *s;
  if (self->type_ == OrgXmlpullV1XmlPullParser_END_TAG) {
    self->depth_--;
  }
  if (self->degenerated_) {
    self->type_ = OrgXmlpullV1XmlPullParser_END_TAG;
    self->degenerated_ = false;
    return;
  }
  JreStrongAssign(&self->text_, nil);
  JreStrongAssign(&self->prefix_, nil);
  JreStrongAssign(&self->name_, nil);
  jint id_ = OrgKxml2WapWbxmlParser_peekId(self);
  while (id_ == OrgKxml2WapWbxml_SWITCH_PAGE) {
    self->nextId_ = -2;
    OrgKxml2WapWbxmlParser_selectPageWithInt_withBoolean_(self, [self readByte], true);
    id_ = OrgKxml2WapWbxmlParser_peekId(self);
  }
  self->nextId_ = -2;
  switch (id_) {
    case -1:
    self->type_ = OrgXmlpullV1XmlPullParser_END_DOCUMENT;
    break;
    case OrgKxml2WapWbxml_END:
    {
      jint sp = JreLShift32((self->depth_ - 1), 2);
      self->type_ = OrgXmlpullV1XmlPullParser_END_TAG;
      JreStrongAssign(&self->namespace__, IOSObjectArray_Get(nil_chk(self->elementStack_), sp));
      JreStrongAssign(&self->prefix_, IOSObjectArray_Get(self->elementStack_, sp + 1));
      JreStrongAssign(&self->name_, IOSObjectArray_Get(self->elementStack_, sp + 2));
    }
    break;
    case OrgKxml2WapWbxml_ENTITY:
    {
      self->type_ = OrgXmlpullV1XmlPullParser_ENTITY_REF;
      jchar c = (jchar) [self readInt];
      JreStrongAssign(&self->text_, JreStrcat("C", c));
      JreStrongAssign(&self->name_, JreStrcat("CI", '#', ((jint) c)));
    }
    break;
    case OrgKxml2WapWbxml_STR_I:
    self->type_ = OrgXmlpullV1XmlPullParser_TEXT;
    JreStrongAssign(&self->text_, [self readStrI]);
    break;
    case OrgKxml2WapWbxml_EXT_I_0:
    case OrgKxml2WapWbxml_EXT_I_1:
    case OrgKxml2WapWbxml_EXT_I_2:
    case OrgKxml2WapWbxml_EXT_T_0:
    case OrgKxml2WapWbxml_EXT_T_1:
    case OrgKxml2WapWbxml_EXT_T_2:
    case OrgKxml2WapWbxml_EXT_0:
    case OrgKxml2WapWbxml_EXT_1:
    case OrgKxml2WapWbxml_EXT_2:
    case OrgKxml2WapWbxml_OPAQUE:
    self->type_ = OrgKxml2WapWbxmlParser_WAP_EXTENSION;
    self->wapCode_ = id_;
    JreStrongAssign(&self->wapExtensionData_, [self parseWapExtensionWithInt:id_]);
    break;
    case OrgKxml2WapWbxml_PI:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"PI curr. not supp.");
    case OrgKxml2WapWbxml_STR_T:
    {
      self->type_ = OrgXmlpullV1XmlPullParser_TEXT;
      JreStrongAssign(&self->text_, [self readStrT]);
    }
    break;
    default:
    [self parseElementWithInt:id_];
  }
}

jint OrgKxml2WapWbxmlParser_peekId(OrgKxml2WapWbxmlParser *self) {
  if (self->nextId_ == -2) {
    self->nextId_ = [((JavaIoInputStream *) nil_chk(self->in_)) read];
  }
  return self->nextId_;
}

IOSObjectArray *OrgKxml2WapWbxmlParser_ensureCapacityWithNSStringArray_withInt_(OrgKxml2WapWbxmlParser *self, IOSObjectArray *arr, jint required) {
  if (((IOSObjectArray *) nil_chk(arr))->size_ >= required) return arr;
  IOSObjectArray *bigger = [IOSObjectArray arrayWithLength:required + 16 type:NSString_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(arr, 0, bigger, 0, arr->size_);
  return bigger;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgKxml2WapWbxmlParser)
