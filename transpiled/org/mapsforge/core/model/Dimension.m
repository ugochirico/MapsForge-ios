//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/model/Dimension.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/model/Dimension.h"
#include "org/mapsforge/core/model/Point.h"

inline jlong OrgMapsforgeCoreModelDimension_get_serialVersionUID();
#define OrgMapsforgeCoreModelDimension_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreModelDimension, serialVersionUID, jlong)

@implementation OrgMapsforgeCoreModelDimension

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  OrgMapsforgeCoreModelDimension_initWithInt_withInt_(self, width, height);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeCoreModelDimension class]])) {
    return false;
  }
  OrgMapsforgeCoreModelDimension *other = (OrgMapsforgeCoreModelDimension *) cast_chk(obj, [OrgMapsforgeCoreModelDimension class]);
  if (self->width_ != ((OrgMapsforgeCoreModelDimension *) nil_chk(other))->width_) {
    return false;
  }
  else if (self->height_ != other->height_) {
    return false;
  }
  return true;
}

- (OrgMapsforgeCoreModelPoint *)getCenter {
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_((jfloat) self->width_ / 2, (jfloat) self->height_ / 2);
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + self->width_;
  result = prime * result + self->height_;
  return result;
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"width="];
  [stringBuilder appendWithInt:self->width_];
  [stringBuilder appendWithNSString:@", height="];
  [stringBuilder appendWithInt:self->height_];
  return [stringBuilder description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(getCenter);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeCoreModelDimension_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreModelDimension = { "Dimension", "org.mapsforge.core.model", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreModelDimension;
}

@end

void OrgMapsforgeCoreModelDimension_initWithInt_withInt_(OrgMapsforgeCoreModelDimension *self, jint width, jint height) {
  NSObject_init(self);
  if (width < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"width must not be negative: ", width));
  }
  else if (height < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"height must not be negative: ", height));
  }
  self->width_ = width;
  self->height_ = height;
}

OrgMapsforgeCoreModelDimension *new_OrgMapsforgeCoreModelDimension_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreModelDimension, initWithInt_withInt_, width, height)
}

OrgMapsforgeCoreModelDimension *create_OrgMapsforgeCoreModelDimension_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreModelDimension, initWithInt_withInt_, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreModelDimension)
