//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/model/Rectangle.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"

inline jlong OrgMapsforgeCoreModelRectangle_get_serialVersionUID();
#define OrgMapsforgeCoreModelRectangle_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreModelRectangle, serialVersionUID, jlong)

@implementation OrgMapsforgeCoreModelRectangle

- (instancetype)initWithDouble:(jdouble)left
                    withDouble:(jdouble)top
                    withDouble:(jdouble)right
                    withDouble:(jdouble)bottom {
  OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(self, left, top, right, bottom);
  return self;
}

- (jboolean)containsWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point {
  return self->left_ <= ((OrgMapsforgeCoreModelPoint *) nil_chk(point))->x_ && self->right_ >= point->x_ && self->top_ <= point->y_ && self->bottom_ >= point->y_;
}

- (OrgMapsforgeCoreModelRectangle *)envelopeWithDouble:(jdouble)padding {
  return create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(self->left_ - padding, self->top_ - padding, self->right_ + padding, self->bottom_ + padding);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeCoreModelRectangle class]])) {
    return false;
  }
  OrgMapsforgeCoreModelRectangle *other = (OrgMapsforgeCoreModelRectangle *) cast_chk(obj, [OrgMapsforgeCoreModelRectangle class]);
  if (JavaLangDouble_doubleToLongBitsWithDouble_(self->left_) != JavaLangDouble_doubleToLongBitsWithDouble_(((OrgMapsforgeCoreModelRectangle *) nil_chk(other))->left_)) {
    return false;
  }
  else if (JavaLangDouble_doubleToLongBitsWithDouble_(self->top_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->top_)) {
    return false;
  }
  else if (JavaLangDouble_doubleToLongBitsWithDouble_(self->right_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->right_)) {
    return false;
  }
  else if (JavaLangDouble_doubleToLongBitsWithDouble_(self->bottom_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->bottom_)) {
    return false;
  }
  return true;
}

- (OrgMapsforgeCoreModelPoint *)getCenter {
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_([self getCenterX], [self getCenterY]);
}

- (jdouble)getCenterX {
  return (self->left_ + self->right_) / 2;
}

- (jdouble)getCenterY {
  return (self->top_ + self->bottom_) / 2;
}

- (jdouble)getHeight {
  return self->bottom_ - self->top_;
}

- (jdouble)getWidth {
  return self->right_ - self->left_;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  jlong temp;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->left_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->top_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->right_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->bottom_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  return result;
}

- (jboolean)intersectsWithOrgMapsforgeCoreModelRectangle:(OrgMapsforgeCoreModelRectangle *)rectangle {
  if (self == rectangle) {
    return true;
  }
  return self->left_ <= ((OrgMapsforgeCoreModelRectangle *) nil_chk(rectangle))->right_ && rectangle->left_ <= self->right_ && self->top_ <= rectangle->bottom_ && rectangle->top_ <= self->bottom_;
}

- (jboolean)intersectsCircleWithDouble:(jdouble)pointX
                            withDouble:(jdouble)pointY
                            withDouble:(jdouble)radius {
  jdouble halfWidth = [self getWidth] / 2;
  jdouble halfHeight = [self getHeight] / 2;
  jdouble centerDistanceX = JavaLangMath_absWithDouble_(pointX - [self getCenterX]);
  jdouble centerDistanceY = JavaLangMath_absWithDouble_(pointY - [self getCenterY]);
  if (centerDistanceX > halfWidth + radius) {
    return false;
  }
  else if (centerDistanceY > halfHeight + radius) {
    return false;
  }
  if (centerDistanceX <= halfWidth) {
    return true;
  }
  else if (centerDistanceY <= halfHeight) {
    return true;
  }
  jdouble cornerDistanceX = centerDistanceX - halfWidth;
  jdouble cornerDistanceY = centerDistanceY - halfHeight;
  return cornerDistanceX * cornerDistanceX + cornerDistanceY * cornerDistanceY <= radius * radius;
}

- (OrgMapsforgeCoreModelRectangle *)shiftWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)origin {
  if (((OrgMapsforgeCoreModelPoint *) nil_chk(origin))->x_ == 0 && origin->y_ == 0) {
    return self;
  }
  return create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(self->left_ + origin->x_, self->top_ + origin->y_, self->right_ + origin->x_, self->bottom_ + origin->y_);
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"left="];
  [stringBuilder appendWithDouble:self->left_];
  [stringBuilder appendWithNSString:@", top="];
  [stringBuilder appendWithDouble:self->top_];
  [stringBuilder appendWithNSString:@", right="];
  [stringBuilder appendWithDouble:self->right_];
  [stringBuilder appendWithNSString:@", bottom="];
  [stringBuilder appendWithDouble:self->bottom_];
  return [stringBuilder description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelRectangle;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelRectangle;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:);
  methods[1].selector = @selector(containsWithOrgMapsforgeCoreModelPoint:);
  methods[2].selector = @selector(envelopeWithDouble:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(getCenter);
  methods[5].selector = @selector(getCenterX);
  methods[6].selector = @selector(getCenterY);
  methods[7].selector = @selector(getHeight);
  methods[8].selector = @selector(getWidth);
  methods[9].selector = @selector(hash);
  methods[10].selector = @selector(intersectsWithOrgMapsforgeCoreModelRectangle:);
  methods[11].selector = @selector(intersectsCircleWithDouble:withDouble:withDouble:);
  methods[12].selector = @selector(shiftWithOrgMapsforgeCoreModelPoint:);
  methods[13].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeCoreModelRectangle_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "bottom_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "left_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "right_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "top_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDD", "contains", "LOrgMapsforgeCoreModelPoint;", "envelope", "D", "equals", "LNSObject;", "hashCode", "intersects", "LOrgMapsforgeCoreModelRectangle;", "intersectsCircle", "DDD", "shift", "toString" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreModelRectangle = { "Rectangle", "org.mapsforge.core.model", ptrTable, methods, fields, 7, 0x1, 14, 5, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreModelRectangle;
}

@end

void OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(OrgMapsforgeCoreModelRectangle *self, jdouble left, jdouble top, jdouble right, jdouble bottom) {
  NSObject_init(self);
  if (left > right) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D", @"left: ", left, @", right: ", right));
  }
  else if (top > bottom) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D", @"top: ", top, @", bottom: ", bottom));
  }
  self->left_ = left;
  self->top_ = top;
  self->right_ = right;
  self->bottom_ = bottom;
}

OrgMapsforgeCoreModelRectangle *new_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(jdouble left, jdouble top, jdouble right, jdouble bottom) {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreModelRectangle, initWithDouble_withDouble_withDouble_withDouble_, left, top, right, bottom)
}

OrgMapsforgeCoreModelRectangle *create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(jdouble left, jdouble top, jdouble right, jdouble bottom) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreModelRectangle, initWithDouble_withDouble_withDouble_withDouble_, left, top, right, bottom)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreModelRectangle)
