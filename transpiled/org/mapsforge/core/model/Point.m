//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/model/Point.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/model/Point.h"

inline jlong OrgMapsforgeCoreModelPoint_get_serialVersionUID();
#define OrgMapsforgeCoreModelPoint_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreModelPoint, serialVersionUID, jlong)

@implementation OrgMapsforgeCoreModelPoint

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y {
  OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(self, x, y);
  return self;
}

- (jint)compareToWithId:(OrgMapsforgeCoreModelPoint *)point {
  cast_chk(point, [OrgMapsforgeCoreModelPoint class]);
  if (self->x_ > ((OrgMapsforgeCoreModelPoint *) nil_chk(point))->x_) {
    return 1;
  }
  else if (self->x_ < point->x_) {
    return -1;
  }
  else if (self->y_ > point->y_) {
    return 1;
  }
  else if (self->y_ < point->y_) {
    return -1;
  }
  return 0;
}

- (jdouble)distanceWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point {
  return JavaLangMath_hypotWithDouble_withDouble_(self->x_ - ((OrgMapsforgeCoreModelPoint *) nil_chk(point))->x_, self->y_ - point->y_);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeCoreModelPoint class]])) {
    return false;
  }
  OrgMapsforgeCoreModelPoint *other = (OrgMapsforgeCoreModelPoint *) cast_chk(obj, [OrgMapsforgeCoreModelPoint class]);
  if (JavaLangDouble_doubleToLongBitsWithDouble_(self->x_) != JavaLangDouble_doubleToLongBitsWithDouble_(((OrgMapsforgeCoreModelPoint *) nil_chk(other))->x_)) {
    return false;
  }
  else if (JavaLangDouble_doubleToLongBitsWithDouble_(self->y_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->y_)) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  jlong temp;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->x_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(self->y_);
  result = prime * result + (jint) (temp ^ (JreURShift64(temp, 32)));
  return result;
}

- (OrgMapsforgeCoreModelPoint *)offsetWithDouble:(jdouble)dx
                                      withDouble:(jdouble)dy {
  if (0 == dx && 0 == dy) {
    return self;
  }
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(self->x_ + dx, self->y_ + dy);
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"x="];
  [stringBuilder appendWithDouble:self->x_];
  [stringBuilder appendWithNSString:@", y="];
  [stringBuilder appendWithDouble:self->y_];
  return [stringBuilder description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithDouble:withDouble:);
  methods[1].selector = @selector(compareToWithId:);
  methods[2].selector = @selector(distanceWithOrgMapsforgeCoreModelPoint:);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(offsetWithDouble:withDouble:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeCoreModelPoint_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "x_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "y_", "D", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DD", "compareTo", "LOrgMapsforgeCoreModelPoint;", "distance", "equals", "LNSObject;", "hashCode", "offset", "toString", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/mapsforge/core/model/Point;>;Ljava/io/Serializable;" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreModelPoint = { "Point", "org.mapsforge.core.model", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, 9, -1 };
  return &_OrgMapsforgeCoreModelPoint;
}

@end

void OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(OrgMapsforgeCoreModelPoint *self, jdouble x, jdouble y) {
  NSObject_init(self);
  self->x_ = x;
  self->y_ = y;
}

OrgMapsforgeCoreModelPoint *new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(jdouble x, jdouble y) {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreModelPoint, initWithDouble_withDouble_, x, y)
}

OrgMapsforgeCoreModelPoint *create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(jdouble x, jdouble y) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreModelPoint, initWithDouble_withDouble_, x, y)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreModelPoint)
