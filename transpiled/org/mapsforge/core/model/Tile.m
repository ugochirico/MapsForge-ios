//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/model/Tile.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"

@interface OrgMapsforgeCoreModelTile () {
 @public
  OrgMapsforgeCoreModelBoundingBox *boundingBox_;
  OrgMapsforgeCoreModelPoint *origin_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeCoreModelTile, boundingBox_, OrgMapsforgeCoreModelBoundingBox *)
J2OBJC_FIELD_SETTER(OrgMapsforgeCoreModelTile, origin_, OrgMapsforgeCoreModelPoint *)

inline jlong OrgMapsforgeCoreModelTile_get_serialVersionUID();
#define OrgMapsforgeCoreModelTile_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreModelTile, serialVersionUID, jlong)

@implementation OrgMapsforgeCoreModelTile

+ (jint)getMaxTileNumberWithByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(zoomLevel);
}

- (instancetype)initWithInt:(jint)tileX
                    withInt:(jint)tileY
                   withByte:(jbyte)zoomLevel
                    withInt:(jint)tileSize {
  OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(self, tileX, tileY, zoomLevel, tileSize);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeCoreModelTile class]])) {
    return false;
  }
  OrgMapsforgeCoreModelTile *other = (OrgMapsforgeCoreModelTile *) cast_chk(obj, [OrgMapsforgeCoreModelTile class]);
  if (self->tileX_ != ((OrgMapsforgeCoreModelTile *) nil_chk(other))->tileX_) {
    return false;
  }
  else if (self->tileY_ != other->tileY_) {
    return false;
  }
  else if (self->zoomLevel_ != other->zoomLevel_) {
    return false;
  }
  else if (self->tileSize_ != other->tileSize_) {
    return false;
  }
  return true;
}

- (OrgMapsforgeCoreModelBoundingBox *)getBoundingBox {
  if (self->boundingBox_ == nil) {
    jdouble minLatitude = JavaLangMath_maxWithDouble_withDouble_(OrgMapsforgeCoreUtilMercatorProjection_LATITUDE_MIN, OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(tileY_ + 1, zoomLevel_));
    jdouble minLongitude = JavaLangMath_maxWithDouble_withDouble_(-180, OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(self->tileX_, zoomLevel_));
    jdouble maxLatitude = JavaLangMath_minWithDouble_withDouble_(OrgMapsforgeCoreUtilMercatorProjection_LATITUDE_MAX, OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(self->tileY_, zoomLevel_));
    jdouble maxLongitude = JavaLangMath_minWithDouble_withDouble_(180, OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(tileX_ + 1, zoomLevel_));
    if (maxLongitude == -180) {
      maxLongitude = 180;
    }
    JreStrongAssignAndConsume(&self->boundingBox_, new_OrgMapsforgeCoreModelBoundingBox_initWithDouble_withDouble_withDouble_withDouble_(minLatitude, minLongitude, maxLatitude, maxLongitude));
  }
  return self->boundingBox_;
}

- (id<JavaUtilSet>)getNeighbours {
  id<JavaUtilSet> neighbours = create_JavaUtilHashSet_initWithInt_(8);
  [neighbours addWithId:[self getLeft]];
  [neighbours addWithId:[self getAboveLeft]];
  [neighbours addWithId:[self getAbove]];
  [neighbours addWithId:[self getAboveRight]];
  [neighbours addWithId:[self getRight]];
  [neighbours addWithId:[self getBelowRight]];
  [neighbours addWithId:[self getBelow]];
  [neighbours addWithId:[self getBelowLeft]];
  return neighbours;
}

- (OrgMapsforgeCoreModelRectangle *)getBoundaryAbsolute {
  return create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(((OrgMapsforgeCoreModelPoint *) nil_chk([self getOrigin]))->x_, ((OrgMapsforgeCoreModelPoint *) nil_chk([self getOrigin]))->y_, ((OrgMapsforgeCoreModelPoint *) nil_chk([self getOrigin]))->x_ + tileSize_, ((OrgMapsforgeCoreModelPoint *) nil_chk([self getOrigin]))->y_ + tileSize_);
}

- (OrgMapsforgeCoreModelRectangle *)getBoundaryRelative {
  return create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(0, 0, tileSize_, tileSize_);
}

- (OrgMapsforgeCoreModelPoint *)getOrigin {
  if (self->origin_ == nil) {
    jdouble x = OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(self->tileX_, self->tileSize_);
    jdouble y = OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(self->tileY_, self->tileSize_);
    JreStrongAssignAndConsume(&self->origin_, new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(x, y));
  }
  return self->origin_;
}

- (OrgMapsforgeCoreModelTile *)getLeft {
  jint x = tileX_ - 1;
  if (x < 0) {
    x = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, self->tileY_, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getRight {
  jint x = tileX_ + 1;
  if (x > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    x = 0;
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, self->tileY_, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getAbove {
  jint y = tileY_ - 1;
  if (y < 0) {
    y = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(self->tileX_, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getBelow {
  jint y = tileY_ + 1;
  if (y > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    y = 0;
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(self->tileX_, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getAboveLeft {
  jint y = tileY_ - 1;
  jint x = tileX_ - 1;
  if (y < 0) {
    y = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  if (x < 0) {
    x = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getAboveRight {
  jint y = tileY_ - 1;
  jint x = tileX_ + 1;
  if (y < 0) {
    y = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  if (x > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    x = 0;
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getBelowLeft {
  jint y = tileY_ + 1;
  jint x = tileX_ - 1;
  if (y > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    y = 0;
  }
  if (x < 0) {
    x = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_);
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getBelowRight {
  jint y = tileY_ + 1;
  jint x = tileX_ + 1;
  if (y > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    y = 0;
  }
  if (x > OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(self->zoomLevel_)) {
    x = 0;
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(x, y, self->zoomLevel_, self->tileSize_);
}

- (OrgMapsforgeCoreModelTile *)getParent {
  if (self->zoomLevel_ == 0) {
    return nil;
  }
  return create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(self->tileX_ / 2, self->tileY_ / 2, (jbyte) (self->zoomLevel_ - 1), self->tileSize_);
}

- (jint)getShiftXWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)otherTile {
  if ([self isEqual:otherTile]) {
    return 0;
  }
  return self->tileX_ % 2 + 2 * [((OrgMapsforgeCoreModelTile *) nil_chk([self getParent])) getShiftXWithOrgMapsforgeCoreModelTile:otherTile];
}

- (jint)getShiftYWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)otherTile {
  if ([self isEqual:otherTile]) {
    return 0;
  }
  return self->tileY_ % 2 + 2 * [((OrgMapsforgeCoreModelTile *) nil_chk([self getParent])) getShiftYWithOrgMapsforgeCoreModelTile:otherTile];
}

- (NSUInteger)hash {
  jint result = 7;
  result = 31 * result + (jint) (self->tileX_ ^ (JreURShift32(self->tileX_, 16)));
  result = 31 * result + (jint) (self->tileY_ ^ (JreURShift32(self->tileY_, 16)));
  result = 31 * result + self->zoomLevel_;
  result = 31 * result + self->tileSize_;
  return result;
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"x="];
  [stringBuilder appendWithInt:self->tileX_];
  [stringBuilder appendWithNSString:@", y="];
  [stringBuilder appendWithInt:self->tileY_];
  [stringBuilder appendWithNSString:@", z="];
  [stringBuilder appendWithInt:self->zoomLevel_];
  return [stringBuilder description];
}

- (void)dealloc {
  RELEASE_(boundingBox_);
  RELEASE_(origin_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelBoundingBox;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelRectangle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelRectangle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getMaxTileNumberWithByte:);
  methods[1].selector = @selector(initWithInt:withInt:withByte:withInt:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(getBoundingBox);
  methods[4].selector = @selector(getNeighbours);
  methods[5].selector = @selector(getBoundaryAbsolute);
  methods[6].selector = @selector(getBoundaryRelative);
  methods[7].selector = @selector(getOrigin);
  methods[8].selector = @selector(getLeft);
  methods[9].selector = @selector(getRight);
  methods[10].selector = @selector(getAbove);
  methods[11].selector = @selector(getBelow);
  methods[12].selector = @selector(getAboveLeft);
  methods[13].selector = @selector(getAboveRight);
  methods[14].selector = @selector(getBelowLeft);
  methods[15].selector = @selector(getBelowRight);
  methods[16].selector = @selector(getParent);
  methods[17].selector = @selector(getShiftXWithOrgMapsforgeCoreModelTile:);
  methods[18].selector = @selector(getShiftYWithOrgMapsforgeCoreModelTile:);
  methods[19].selector = @selector(hash);
  methods[20].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeCoreModelTile_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "mapSize_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tileSize_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tileX_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tileY_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "zoomLevel_", "B", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "boundingBox_", "LOrgMapsforgeCoreModelBoundingBox;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "origin_", "LOrgMapsforgeCoreModelPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getMaxTileNumber", "B", "IIBI", "equals", "LNSObject;", "()Ljava/util/Set<Lorg/mapsforge/core/model/Tile;>;", "getShiftX", "LOrgMapsforgeCoreModelTile;", "getShiftY", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreModelTile = { "Tile", "org.mapsforge.core.model", ptrTable, methods, fields, 7, 0x1, 21, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreModelTile;
}

@end

jint OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(jbyte zoomLevel) {
  OrgMapsforgeCoreModelTile_initialize();
  if (zoomLevel < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"zoomLevel must not be negative: ", zoomLevel));
  }
  else if (zoomLevel == 0) {
    return 0;
  }
  return (JreLShift32(2, zoomLevel - 1)) - 1;
}

void OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(OrgMapsforgeCoreModelTile *self, jint tileX, jint tileY, jbyte zoomLevel, jint tileSize) {
  NSObject_init(self);
  if (tileX < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"tileX must not be negative: ", tileX));
  }
  else if (tileY < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"tileY must not be negative: ", tileY));
  }
  else if (zoomLevel < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"zoomLevel must not be negative: ", zoomLevel));
  }
  jlong maxTileNumber = OrgMapsforgeCoreModelTile_getMaxTileNumberWithByte_(zoomLevel);
  if (tileX > maxTileNumber) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B$I", @"invalid tileX number on zoom level ", zoomLevel, @": ", tileX));
  }
  else if (tileY > maxTileNumber) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B$I", @"invalid tileY number on zoom level ", zoomLevel, @": ", tileY));
  }
  self->tileSize_ = tileSize;
  self->tileX_ = tileX;
  self->tileY_ = tileY;
  self->zoomLevel_ = zoomLevel;
  self->mapSize_ = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, tileSize);
}

OrgMapsforgeCoreModelTile *new_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(jint tileX, jint tileY, jbyte zoomLevel, jint tileSize) {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreModelTile, initWithInt_withInt_withByte_withInt_, tileX, tileY, zoomLevel, tileSize)
}

OrgMapsforgeCoreModelTile *create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(jint tileX, jint tileY, jbyte zoomLevel, jint tileSize) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreModelTile, initWithInt_withInt_withByte_withInt_, tileX, tileY, zoomLevel, tileSize)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreModelTile)
