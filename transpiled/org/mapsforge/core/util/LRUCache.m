//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/util/LRUCache.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "org/mapsforge/core/util/LRUCache.h"

@interface OrgMapsforgeCoreUtilLRUCache ()

+ (jint)calculateInitialCapacityWithInt:(jint)capacity;

@end

inline jfloat OrgMapsforgeCoreUtilLRUCache_get_LOAD_FACTOR();
#define OrgMapsforgeCoreUtilLRUCache_LOAD_FACTOR 0.6f
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreUtilLRUCache, LOAD_FACTOR, jfloat)

inline jlong OrgMapsforgeCoreUtilLRUCache_get_serialVersionUID();
#define OrgMapsforgeCoreUtilLRUCache_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreUtilLRUCache, serialVersionUID, jlong)

__attribute__((unused)) static jint OrgMapsforgeCoreUtilLRUCache_calculateInitialCapacityWithInt_(jint capacity);

@implementation OrgMapsforgeCoreUtilLRUCache

+ (jint)calculateInitialCapacityWithInt:(jint)capacity {
  return OrgMapsforgeCoreUtilLRUCache_calculateInitialCapacityWithInt_(capacity);
}

- (instancetype)initWithInt:(jint)capacity {
  OrgMapsforgeCoreUtilLRUCache_initWithInt_(self, capacity);
  return self;
}

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest {
  return [self size] > self->capacity_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(calculateInitialCapacityWithInt:);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(removeEldestEntryWithJavaUtilMap_Entry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOAD_FACTOR", "F", .constantValue.asFloat = OrgMapsforgeCoreUtilLRUCache_LOAD_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeCoreUtilLRUCache_serialVersionUID, 0x1a, -1, -1, -1, -1 },
    { "capacity_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateInitialCapacity", "I", "removeEldestEntry", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/LinkedHashMap<TK;TV;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreUtilLRUCache = { "LRUCache", "org.mapsforge.core.util", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, 5, -1 };
  return &_OrgMapsforgeCoreUtilLRUCache;
}

@end

jint OrgMapsforgeCoreUtilLRUCache_calculateInitialCapacityWithInt_(jint capacity) {
  OrgMapsforgeCoreUtilLRUCache_initialize();
  if (capacity < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"capacity must not be negative: ", capacity));
  }
  return JreFpToInt((capacity / OrgMapsforgeCoreUtilLRUCache_LOAD_FACTOR)) + 2;
}

void OrgMapsforgeCoreUtilLRUCache_initWithInt_(OrgMapsforgeCoreUtilLRUCache *self, jint capacity) {
  JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(self, OrgMapsforgeCoreUtilLRUCache_calculateInitialCapacityWithInt_(capacity), OrgMapsforgeCoreUtilLRUCache_LOAD_FACTOR, true);
  self->capacity_ = capacity;
}

OrgMapsforgeCoreUtilLRUCache *new_OrgMapsforgeCoreUtilLRUCache_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreUtilLRUCache, initWithInt_, capacity)
}

OrgMapsforgeCoreUtilLRUCache *create_OrgMapsforgeCoreUtilLRUCache_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreUtilLRUCache, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreUtilLRUCache)
