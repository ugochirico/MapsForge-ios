//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/util/IOUtils.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/util/IOUtils.h"

@interface OrgMapsforgeCoreUtilIOUtils ()

- (instancetype)init;

@end

inline JavaUtilLoggingLogger *OrgMapsforgeCoreUtilIOUtils_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeCoreUtilIOUtils_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeCoreUtilIOUtils, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgMapsforgeCoreUtilIOUtils_init(OrgMapsforgeCoreUtilIOUtils *self);

__attribute__((unused)) static OrgMapsforgeCoreUtilIOUtils *new_OrgMapsforgeCoreUtilIOUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeCoreUtilIOUtils *create_OrgMapsforgeCoreUtilIOUtils_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeCoreUtilIOUtils)

@implementation OrgMapsforgeCoreUtilIOUtils

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable {
  OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(closeable);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeCoreUtilIOUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "closeQuietly", "LJavaIoCloseable;", &OrgMapsforgeCoreUtilIOUtils_LOGGER };
  static const J2ObjcClassInfo _OrgMapsforgeCoreUtilIOUtils = { "IOUtils", "org.mapsforge.core.util", ptrTable, methods, fields, 7, 0x11, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreUtilIOUtils;
}

+ (void)initialize {
  if (self == [OrgMapsforgeCoreUtilIOUtils class]) {
    JreStrongAssign(&OrgMapsforgeCoreUtilIOUtils_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeCoreUtilIOUtils_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeCoreUtilIOUtils)
  }
}

@end

void OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable) {
  OrgMapsforgeCoreUtilIOUtils_initialize();
  @try {
    if (closeable != nil) {
      [closeable close];
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeCoreUtilIOUtils_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, FINE) withNSString:[e getMessage] withNSException:e];
  }
}

void OrgMapsforgeCoreUtilIOUtils_init(OrgMapsforgeCoreUtilIOUtils *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeCoreUtilIOUtils *new_OrgMapsforgeCoreUtilIOUtils_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreUtilIOUtils, init)
}

OrgMapsforgeCoreUtilIOUtils *create_OrgMapsforgeCoreUtilIOUtils_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreUtilIOUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreUtilIOUtils)
