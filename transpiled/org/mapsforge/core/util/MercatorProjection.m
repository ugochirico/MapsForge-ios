//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/util/MercatorProjection.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"

@interface OrgMapsforgeCoreUtilMercatorProjection ()

- (instancetype)init;

@end

inline jint OrgMapsforgeCoreUtilMercatorProjection_get_DUMMY_TILE_SIZE();
#define OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeCoreUtilMercatorProjection, DUMMY_TILE_SIZE, jint)

__attribute__((unused)) static void OrgMapsforgeCoreUtilMercatorProjection_init(OrgMapsforgeCoreUtilMercatorProjection *self);

__attribute__((unused)) static OrgMapsforgeCoreUtilMercatorProjection *new_OrgMapsforgeCoreUtilMercatorProjection_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeCoreUtilMercatorProjection *create_OrgMapsforgeCoreUtilMercatorProjection_init();

@implementation OrgMapsforgeCoreUtilMercatorProjection

+ (jdouble)calculateGroundResolutionWithScaleFactorWithDouble:(jdouble)latitude
                                                   withDouble:(jdouble)scaleFactor
                                                      withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithScaleFactorWithDouble_withDouble_withInt_(latitude, scaleFactor, tileSize);
}

+ (jdouble)calculateGroundResolutionWithDouble:(jdouble)latitude
                                      withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithDouble_withLong_(latitude, mapSize);
}

+ (OrgMapsforgeCoreModelLatLong *)fromPixelsWithScaleFactorWithDouble:(jdouble)pixelX
                                                           withDouble:(jdouble)pixelY
                                                           withDouble:(jdouble)scaleFactor
                                                              withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_fromPixelsWithScaleFactorWithDouble_withDouble_withDouble_withInt_(pixelX, pixelY, scaleFactor, tileSize);
}

+ (OrgMapsforgeCoreModelLatLong *)fromPixelsWithDouble:(jdouble)pixelX
                                            withDouble:(jdouble)pixelY
                                              withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_fromPixelsWithDouble_withDouble_withLong_(pixelX, pixelY, mapSize);
}

+ (jlong)getMapSizeWithScaleFactorWithDouble:(jdouble)scaleFactor
                                     withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
}

+ (jlong)getMapSizeWithByte:(jbyte)zoomLevel
                    withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, tileSize);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelWithScaleFactorWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                                             withDouble:(jdouble)scaleFactor
                                                                                withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelWithScaleFactorWithOrgMapsforgeCoreModelLatLong_withDouble_withInt_(latLong, scaleFactor, tileSize);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                                withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelWithOrgMapsforgeCoreModelLatLong_withLong_(latLong, mapSize);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                                        withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong_withLong_(latLong, mapSize);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelRelativeWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                                        withLong:(jlong)mapSize
                                                                      withDouble:(jdouble)x
                                                                      withDouble:(jdouble)y {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withDouble_withDouble_(latLong, mapSize, x, y);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelRelativeWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                                        withLong:(jlong)mapSize
                                                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)origin {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withOrgMapsforgeCoreModelPoint_(latLong, mapSize, origin);
}

+ (OrgMapsforgeCoreModelPoint *)getPixelRelativeToTileWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                                         withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeToTileWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreModelTile_(latLong, tile);
}

+ (jdouble)latitudeToPixelYWithScaleFactorWithDouble:(jdouble)latitude
                                          withDouble:(jdouble)scaleFactor
                                             withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithScaleFactorWithDouble_withDouble_withInt_(latitude, scaleFactor, tileSize);
}

+ (jdouble)latitudeToPixelYWithDouble:(jdouble)latitude
                             withByte:(jbyte)zoomLevel
                              withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withByte_withInt_(latitude, zoomLevel, tileSize);
}

+ (jdouble)latitudeToPixelYWithDouble:(jdouble)latitude
                             withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latitude, mapSize);
}

+ (jint)latitudeToTileYWithDouble:(jdouble)latitude
                       withDouble:(jdouble)scaleFactor {
  return OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withDouble_(latitude, scaleFactor);
}

+ (jint)latitudeToTileYWithDouble:(jdouble)latitude
                         withByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(latitude, zoomLevel);
}

+ (jdouble)longitudeToPixelXWithScaleFactorWithDouble:(jdouble)longitude
                                           withDouble:(jdouble)scaleFactor
                                              withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithScaleFactorWithDouble_withDouble_withInt_(longitude, scaleFactor, tileSize);
}

+ (jdouble)longitudeToPixelXWithDouble:(jdouble)longitude
                              withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(longitude, mapSize);
}

+ (jint)longitudeToTileXWithDouble:(jdouble)longitude
                        withDouble:(jdouble)scaleFactor {
  return OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withDouble_(longitude, scaleFactor);
}

+ (jint)longitudeToTileXWithDouble:(jdouble)longitude
                          withByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(longitude, zoomLevel);
}

+ (jdouble)metersToPixelsWithScaleFactorWithFloat:(jfloat)meters
                                       withDouble:(jdouble)latitude
                                       withDouble:(jdouble)scaleFactor
                                          withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_metersToPixelsWithScaleFactorWithFloat_withDouble_withDouble_withInt_(meters, latitude, scaleFactor, tileSize);
}

+ (jdouble)metersToPixelsWithFloat:(jfloat)meters
                        withDouble:(jdouble)latitude
                          withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_metersToPixelsWithFloat_withDouble_withLong_(meters, latitude, mapSize);
}

+ (jdouble)pixelXToLongitudeWithScaleFactorWithDouble:(jdouble)pixelX
                                           withDouble:(jdouble)scaleFactor
                                              withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithScaleFactorWithDouble_withDouble_withInt_(pixelX, scaleFactor, tileSize);
}

+ (jdouble)pixelXToLongitudeWithDouble:(jdouble)pixelX
                              withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithDouble_withLong_(pixelX, mapSize);
}

+ (jint)pixelXToTileXWithDouble:(jdouble)pixelX
                     withDouble:(jdouble)scaleFactor
                        withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withDouble_withInt_(pixelX, scaleFactor, tileSize);
}

+ (jint)pixelXToTileXWithDouble:(jdouble)pixelX
                       withByte:(jbyte)zoomLevel
                        withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withByte_withInt_(pixelX, zoomLevel, tileSize);
}

+ (jdouble)pixelYToLatitudeWithScaleFactorWithDouble:(jdouble)pixelY
                                          withDouble:(jdouble)scaleFactor
                                             withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithScaleFactorWithDouble_withDouble_withInt_(pixelY, scaleFactor, tileSize);
}

+ (jdouble)pixelYToLatitudeWithDouble:(jdouble)pixelY
                             withLong:(jlong)mapSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithDouble_withLong_(pixelY, mapSize);
}

+ (jint)pixelYToTileYWithDouble:(jdouble)pixelY
                     withDouble:(jdouble)scaleFactor
                        withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withDouble_withInt_(pixelY, scaleFactor, tileSize);
}

+ (jint)pixelYToTileYWithDouble:(jdouble)pixelY
                       withByte:(jbyte)zoomLevel
                        withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withByte_withInt_(pixelY, zoomLevel, tileSize);
}

+ (jdouble)scaleFactorToZoomLevelWithDouble:(jdouble)scaleFactor {
  return OrgMapsforgeCoreUtilMercatorProjection_scaleFactorToZoomLevelWithDouble_(scaleFactor);
}

+ (jlong)tileToPixelWithLong:(jlong)tileNumber
                     withInt:(jint)tileSize {
  return OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(tileNumber, tileSize);
}

+ (jdouble)tileXToLongitudeWithLong:(jlong)tileX
                         withDouble:(jdouble)scaleFactor {
  return OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withDouble_(tileX, scaleFactor);
}

+ (jdouble)tileXToLongitudeWithLong:(jlong)tileX
                           withByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(tileX, zoomLevel);
}

+ (jdouble)tileYToLatitudeWithLong:(jlong)tileY
                        withDouble:(jdouble)scaleFactor {
  return OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withDouble_(tileY, scaleFactor);
}

+ (jdouble)tileYToLatitudeWithLong:(jlong)tileY
                          withByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(tileY, zoomLevel);
}

+ (jdouble)zoomLevelToScaleFactorWithByte:(jbyte)zoomLevel {
  return OrgMapsforgeCoreUtilMercatorProjection_zoomLevelToScaleFactorWithByte_(zoomLevel);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeCoreUtilMercatorProjection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "D", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 16, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 17, 19, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x9, 20, 21, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 22, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 23, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 25, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 28, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 29, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 27, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 31, 32, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 35, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 36, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 37, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 37, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 38, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 39, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 40, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 40, 24, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 45, 47, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 48, 46, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 48, 47, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 49, 50, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(calculateGroundResolutionWithScaleFactorWithDouble:withDouble:withInt:);
  methods[1].selector = @selector(calculateGroundResolutionWithDouble:withLong:);
  methods[2].selector = @selector(fromPixelsWithScaleFactorWithDouble:withDouble:withDouble:withInt:);
  methods[3].selector = @selector(fromPixelsWithDouble:withDouble:withLong:);
  methods[4].selector = @selector(getMapSizeWithScaleFactorWithDouble:withInt:);
  methods[5].selector = @selector(getMapSizeWithByte:withInt:);
  methods[6].selector = @selector(getPixelWithScaleFactorWithOrgMapsforgeCoreModelLatLong:withDouble:withInt:);
  methods[7].selector = @selector(getPixelWithOrgMapsforgeCoreModelLatLong:withLong:);
  methods[8].selector = @selector(getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong:withLong:);
  methods[9].selector = @selector(getPixelRelativeWithOrgMapsforgeCoreModelLatLong:withLong:withDouble:withDouble:);
  methods[10].selector = @selector(getPixelRelativeWithOrgMapsforgeCoreModelLatLong:withLong:withOrgMapsforgeCoreModelPoint:);
  methods[11].selector = @selector(getPixelRelativeToTileWithOrgMapsforgeCoreModelLatLong:withOrgMapsforgeCoreModelTile:);
  methods[12].selector = @selector(latitudeToPixelYWithScaleFactorWithDouble:withDouble:withInt:);
  methods[13].selector = @selector(latitudeToPixelYWithDouble:withByte:withInt:);
  methods[14].selector = @selector(latitudeToPixelYWithDouble:withLong:);
  methods[15].selector = @selector(latitudeToTileYWithDouble:withDouble:);
  methods[16].selector = @selector(latitudeToTileYWithDouble:withByte:);
  methods[17].selector = @selector(longitudeToPixelXWithScaleFactorWithDouble:withDouble:withInt:);
  methods[18].selector = @selector(longitudeToPixelXWithDouble:withLong:);
  methods[19].selector = @selector(longitudeToTileXWithDouble:withDouble:);
  methods[20].selector = @selector(longitudeToTileXWithDouble:withByte:);
  methods[21].selector = @selector(metersToPixelsWithScaleFactorWithFloat:withDouble:withDouble:withInt:);
  methods[22].selector = @selector(metersToPixelsWithFloat:withDouble:withLong:);
  methods[23].selector = @selector(pixelXToLongitudeWithScaleFactorWithDouble:withDouble:withInt:);
  methods[24].selector = @selector(pixelXToLongitudeWithDouble:withLong:);
  methods[25].selector = @selector(pixelXToTileXWithDouble:withDouble:withInt:);
  methods[26].selector = @selector(pixelXToTileXWithDouble:withByte:withInt:);
  methods[27].selector = @selector(pixelYToLatitudeWithScaleFactorWithDouble:withDouble:withInt:);
  methods[28].selector = @selector(pixelYToLatitudeWithDouble:withLong:);
  methods[29].selector = @selector(pixelYToTileYWithDouble:withDouble:withInt:);
  methods[30].selector = @selector(pixelYToTileYWithDouble:withByte:withInt:);
  methods[31].selector = @selector(scaleFactorToZoomLevelWithDouble:);
  methods[32].selector = @selector(tileToPixelWithLong:withInt:);
  methods[33].selector = @selector(tileXToLongitudeWithLong:withDouble:);
  methods[34].selector = @selector(tileXToLongitudeWithLong:withByte:);
  methods[35].selector = @selector(tileYToLatitudeWithLong:withDouble:);
  methods[36].selector = @selector(tileYToLatitudeWithLong:withByte:);
  methods[37].selector = @selector(zoomLevelToScaleFactorWithByte:);
  methods[38].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EARTH_CIRCUMFERENCE", "D", .constantValue.asDouble = OrgMapsforgeCoreUtilMercatorProjection_EARTH_CIRCUMFERENCE, 0x19, -1, -1, -1, -1 },
    { "LATITUDE_MAX", "D", .constantValue.asDouble = OrgMapsforgeCoreUtilMercatorProjection_LATITUDE_MAX, 0x19, -1, -1, -1, -1 },
    { "LATITUDE_MIN", "D", .constantValue.asDouble = OrgMapsforgeCoreUtilMercatorProjection_LATITUDE_MIN, 0x19, -1, -1, -1, -1 },
    { "DUMMY_TILE_SIZE", "I", .constantValue.asInt = OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calculateGroundResolutionWithScaleFactor", "DDI", "calculateGroundResolution", "DJ", "fromPixelsWithScaleFactor", "DDDI", "fromPixels", "DDJ", "getMapSizeWithScaleFactor", "DI", "getMapSize", "BI", "getPixelWithScaleFactor", "LOrgMapsforgeCoreModelLatLong;DI", "getPixel", "LOrgMapsforgeCoreModelLatLong;J", "getPixelAbsolute", "getPixelRelative", "LOrgMapsforgeCoreModelLatLong;JDD", "LOrgMapsforgeCoreModelLatLong;JLOrgMapsforgeCoreModelPoint;", "getPixelRelativeToTile", "LOrgMapsforgeCoreModelLatLong;LOrgMapsforgeCoreModelTile;", "latitudeToPixelYWithScaleFactor", "latitudeToPixelY", "DBI", "latitudeToTileY", "DD", "DB", "longitudeToPixelXWithScaleFactor", "longitudeToPixelX", "longitudeToTileX", "metersToPixelsWithScaleFactor", "FDDI", "metersToPixels", "FDJ", "pixelXToLongitudeWithScaleFactor", "pixelXToLongitude", "pixelXToTileX", "pixelYToLatitudeWithScaleFactor", "pixelYToLatitude", "pixelYToTileY", "scaleFactorToZoomLevel", "D", "tileToPixel", "JI", "tileXToLongitude", "JD", "JB", "tileYToLatitude", "zoomLevelToScaleFactor", "B" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreUtilMercatorProjection = { "MercatorProjection", "org.mapsforge.core.util", ptrTable, methods, fields, 7, 0x11, 39, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreUtilMercatorProjection;
}

@end

jdouble OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithScaleFactorWithDouble_withDouble_withInt_(jdouble latitude, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
  return JavaLangMath_cosWithDouble_(latitude * (JavaLangMath_PI / 180)) * OrgMapsforgeCoreUtilMercatorProjection_EARTH_CIRCUMFERENCE / mapSize;
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithDouble_withLong_(jdouble latitude, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JavaLangMath_cosWithDouble_(latitude * (JavaLangMath_PI / 180)) * OrgMapsforgeCoreUtilMercatorProjection_EARTH_CIRCUMFERENCE / mapSize;
}

OrgMapsforgeCoreModelLatLong *OrgMapsforgeCoreUtilMercatorProjection_fromPixelsWithScaleFactorWithDouble_withDouble_withDouble_withInt_(jdouble pixelX, jdouble pixelY, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return create_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithScaleFactorWithDouble_withDouble_withInt_(pixelY, scaleFactor, tileSize), OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithScaleFactorWithDouble_withDouble_withInt_(pixelX, scaleFactor, tileSize));
}

OrgMapsforgeCoreModelLatLong *OrgMapsforgeCoreUtilMercatorProjection_fromPixelsWithDouble_withDouble_withLong_(jdouble pixelX, jdouble pixelY, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return create_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithDouble_withLong_(pixelY, mapSize), OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithDouble_withLong_(pixelX, mapSize));
}

jlong OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  if (scaleFactor < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"scale factor must not < 1 ", scaleFactor));
  }
  return JreFpToLong((tileSize * (JavaLangMath_powWithDouble_withDouble_(2, OrgMapsforgeCoreUtilMercatorProjection_scaleFactorToZoomLevelWithDouble_(scaleFactor)))));
}

jlong OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(jbyte zoomLevel, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  if (zoomLevel < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$B", @"zoom level must not be negative: ", zoomLevel));
  }
  return JreLShift64((jlong) tileSize, zoomLevel);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelWithScaleFactorWithOrgMapsforgeCoreModelLatLong_withDouble_withInt_(OrgMapsforgeCoreModelLatLong *latLong, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble pixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithScaleFactorWithDouble_withDouble_withInt_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, scaleFactor, tileSize);
  jdouble pixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithScaleFactorWithDouble_withDouble_withInt_(latLong->latitude_, scaleFactor, tileSize);
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(pixelX, pixelY);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelWithOrgMapsforgeCoreModelLatLong_withLong_(OrgMapsforgeCoreModelLatLong *latLong, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble pixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, mapSize);
  jdouble pixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latLong->latitude_, mapSize);
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(pixelX, pixelY);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong_withLong_(OrgMapsforgeCoreModelLatLong *latLong, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withDouble_withDouble_(latLong, mapSize, 0, 0);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withDouble_withDouble_(OrgMapsforgeCoreModelLatLong *latLong, jlong mapSize, jdouble x, jdouble y) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble pixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, mapSize) - x;
  jdouble pixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latLong->latitude_, mapSize) - y;
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(pixelX, pixelY);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withOrgMapsforgeCoreModelPoint_(OrgMapsforgeCoreModelLatLong *latLong, jlong mapSize, OrgMapsforgeCoreModelPoint *origin) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withDouble_withDouble_(latLong, mapSize, ((OrgMapsforgeCoreModelPoint *) nil_chk(origin))->x_, origin->y_);
}

OrgMapsforgeCoreModelPoint *OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeToTileWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreModelTile_(OrgMapsforgeCoreModelLatLong *latLong, OrgMapsforgeCoreModelTile *tile) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeWithOrgMapsforgeCoreModelLatLong_withLong_withOrgMapsforgeCoreModelPoint_(latLong, ((OrgMapsforgeCoreModelTile *) nil_chk(tile))->mapSize_, [tile getOrigin]);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithScaleFactorWithDouble_withDouble_withInt_(jdouble latitude, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble sinLatitude = JavaLangMath_sinWithDouble_(latitude * (JavaLangMath_PI / 180));
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
  jdouble pixelY = (0.5 - JavaLangMath_logWithDouble_((1 + sinLatitude) / (1 - sinLatitude)) / (4 * JavaLangMath_PI)) * mapSize;
  return JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(0, pixelY), mapSize);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withByte_withInt_(jdouble latitude, jbyte zoomLevel, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble sinLatitude = JavaLangMath_sinWithDouble_(latitude * (JavaLangMath_PI / 180));
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, tileSize);
  jdouble pixelY = (0.5 - JavaLangMath_logWithDouble_((1 + sinLatitude) / (1 - sinLatitude)) / (4 * JavaLangMath_PI)) * mapSize;
  return JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(0, pixelY), mapSize);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(jdouble latitude, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jdouble sinLatitude = JavaLangMath_sinWithDouble_(latitude * (JavaLangMath_PI / 180));
  jdouble pixelY = (0.5 - JavaLangMath_logWithDouble_((1 + sinLatitude) / (1 - sinLatitude)) / (4 * JavaLangMath_PI)) * mapSize;
  return JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(0, pixelY), mapSize);
}

jint OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withDouble_(jdouble latitude, jdouble scaleFactor) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withDouble_withInt_(OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithScaleFactorWithDouble_withDouble_withInt_(latitude, scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE), scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jint OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(jdouble latitude, jbyte zoomLevel) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withByte_withInt_(OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withByte_withInt_(latitude, zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE), zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithScaleFactorWithDouble_withDouble_withInt_(jdouble longitude, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
  return (longitude + 180) / 360 * mapSize;
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(jdouble longitude, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return (longitude + 180) / 360 * mapSize;
}

jint OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withDouble_(jdouble longitude, jdouble scaleFactor) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withDouble_withInt_(OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithScaleFactorWithDouble_withDouble_withInt_(longitude, scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE), scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jint OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(jdouble longitude, jbyte zoomLevel) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withByte_withInt_(OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(longitude, OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE)), zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_metersToPixelsWithScaleFactorWithFloat_withDouble_withDouble_withInt_(jfloat meters, jdouble latitude, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return meters / OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithScaleFactorWithDouble_withDouble_withInt_(latitude, scaleFactor, tileSize);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_metersToPixelsWithFloat_withDouble_withLong_(jfloat meters, jdouble latitude, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return meters / OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithDouble_withLong_(latitude, mapSize);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithScaleFactorWithDouble_withDouble_withInt_(jdouble pixelX, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
  if (pixelX < 0 || pixelX > mapSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D", @"invalid pixelX coordinate at zoom level ", scaleFactor, @": ", pixelX));
  }
  return 360 * ((pixelX / mapSize) - 0.5);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithDouble_withLong_(jdouble pixelX, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  if (pixelX < 0 || pixelX > mapSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$D", @"invalid pixelX coordinate ", mapSize, @": ", pixelX));
  }
  return 360 * ((pixelX / mapSize) - 0.5);
}

jint OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withDouble_withInt_(jdouble pixelX, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JreFpToInt(JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(pixelX / tileSize, 0), scaleFactor - 1));
}

jint OrgMapsforgeCoreUtilMercatorProjection_pixelXToTileXWithDouble_withByte_withInt_(jdouble pixelX, jbyte zoomLevel, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JreFpToInt(JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(pixelX / tileSize, 0), JavaLangMath_powWithDouble_withDouble_(2, zoomLevel) - 1));
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithScaleFactorWithDouble_withDouble_withInt_(jdouble pixelY, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithScaleFactorWithDouble_withInt_(scaleFactor, tileSize);
  if (pixelY < 0 || pixelY > mapSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D$D", @"invalid pixelY coordinate at zoom level ", scaleFactor, @": ", pixelY));
  }
  jdouble y = 0.5 - (pixelY / mapSize);
  return 90 - 360 * JavaLangMath_atanWithDouble_(JavaLangMath_expWithDouble_(-y * (2 * JavaLangMath_PI))) / JavaLangMath_PI;
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithDouble_withLong_(jdouble pixelY, jlong mapSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  if (pixelY < 0 || pixelY > mapSize) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$J$D", @"invalid pixelY coordinate ", mapSize, @": ", pixelY));
  }
  jdouble y = 0.5 - (pixelY / mapSize);
  return 90 - 360 * JavaLangMath_atanWithDouble_(JavaLangMath_expWithDouble_(-y * (2 * JavaLangMath_PI))) / JavaLangMath_PI;
}

jint OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withDouble_withInt_(jdouble pixelY, jdouble scaleFactor, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JreFpToInt(JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(pixelY / tileSize, 0), scaleFactor - 1));
}

jint OrgMapsforgeCoreUtilMercatorProjection_pixelYToTileYWithDouble_withByte_withInt_(jdouble pixelY, jbyte zoomLevel, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JreFpToInt(JavaLangMath_minWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(pixelY / tileSize, 0), JavaLangMath_powWithDouble_withDouble_(2, zoomLevel) - 1));
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_scaleFactorToZoomLevelWithDouble_(jdouble scaleFactor) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JavaLangMath_logWithDouble_(scaleFactor) / JavaLangMath_logWithDouble_(2);
}

jlong OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(jlong tileNumber, jint tileSize) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return tileNumber * tileSize;
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withDouble_(jlong tileX, jdouble scaleFactor) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithScaleFactorWithDouble_withDouble_withInt_(tileX * OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE, scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(jlong tileX, jbyte zoomLevel) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelXToLongitudeWithDouble_withLong_(tileX * OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE, OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE));
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withDouble_(jlong tileY, jdouble scaleFactor) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithScaleFactorWithDouble_withDouble_withInt_(tileY * OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE, scaleFactor, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE);
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(jlong tileY, jbyte zoomLevel) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return OrgMapsforgeCoreUtilMercatorProjection_pixelYToLatitudeWithDouble_withLong_(tileY * OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE, OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, OrgMapsforgeCoreUtilMercatorProjection_DUMMY_TILE_SIZE));
}

jdouble OrgMapsforgeCoreUtilMercatorProjection_zoomLevelToScaleFactorWithByte_(jbyte zoomLevel) {
  OrgMapsforgeCoreUtilMercatorProjection_initialize();
  return JavaLangMath_powWithDouble_withDouble_(2, zoomLevel);
}

void OrgMapsforgeCoreUtilMercatorProjection_init(OrgMapsforgeCoreUtilMercatorProjection *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeCoreUtilMercatorProjection *new_OrgMapsforgeCoreUtilMercatorProjection_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreUtilMercatorProjection, init)
}

OrgMapsforgeCoreUtilMercatorProjection *create_OrgMapsforgeCoreUtilMercatorProjection_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreUtilMercatorProjection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreUtilMercatorProjection)
