//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/graphics/FontFamily.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/core/graphics/FontFamily.h"

__attribute__((unused)) static void OrgMapsforgeCoreGraphicsFontFamily_initWithNSString_withInt_(OrgMapsforgeCoreGraphicsFontFamily *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeCoreGraphicsFontFamily)

OrgMapsforgeCoreGraphicsFontFamily *OrgMapsforgeCoreGraphicsFontFamily_values_[4];

@implementation OrgMapsforgeCoreGraphicsFontFamily

+ (OrgMapsforgeCoreGraphicsFontFamily *)fromStringWithNSString:(NSString *)value {
  return OrgMapsforgeCoreGraphicsFontFamily_fromStringWithNSString_(value);
}

+ (IOSObjectArray *)values {
  return OrgMapsforgeCoreGraphicsFontFamily_values();
}

+ (OrgMapsforgeCoreGraphicsFontFamily *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeCoreGraphicsFontFamily_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeCoreGraphicsFontFamily;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgMapsforgeCoreGraphicsFontFamily;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsFontFamily;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromStringWithNSString:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LOrgMapsforgeCoreGraphicsFontFamily;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MONOSPACE", "LOrgMapsforgeCoreGraphicsFontFamily;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "SANS_SERIF", "LOrgMapsforgeCoreGraphicsFontFamily;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "SERIF", "LOrgMapsforgeCoreGraphicsFontFamily;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "fromString", "LNSString;", "valueOf", &JreEnum(OrgMapsforgeCoreGraphicsFontFamily, DEFAULT), &JreEnum(OrgMapsforgeCoreGraphicsFontFamily, MONOSPACE), &JreEnum(OrgMapsforgeCoreGraphicsFontFamily, SANS_SERIF), &JreEnum(OrgMapsforgeCoreGraphicsFontFamily, SERIF), "Ljava/lang/Enum<Lorg/mapsforge/core/graphics/FontFamily;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreGraphicsFontFamily = { "FontFamily", "org.mapsforge.core.graphics", ptrTable, methods, fields, 7, 0x4011, 3, 4, -1, -1, -1, 7, -1 };
  return &_OrgMapsforgeCoreGraphicsFontFamily;
}

+ (void)initialize {
  if (self == [OrgMapsforgeCoreGraphicsFontFamily class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"DEFAULT", @"MONOSPACE", @"SANS_SERIF", @"SERIF",
    };
    for (jint i = 0; i < 4; i++) {
      (OrgMapsforgeCoreGraphicsFontFamily_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgMapsforgeCoreGraphicsFontFamily_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgMapsforgeCoreGraphicsFontFamily)
  }
}

@end

void OrgMapsforgeCoreGraphicsFontFamily_initWithNSString_withInt_(OrgMapsforgeCoreGraphicsFontFamily *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgMapsforgeCoreGraphicsFontFamily *OrgMapsforgeCoreGraphicsFontFamily_fromStringWithNSString_(NSString *value) {
  OrgMapsforgeCoreGraphicsFontFamily_initialize();
  if ([@"default" isEqual:value]) {
    return JreEnum(OrgMapsforgeCoreGraphicsFontFamily, DEFAULT);
  }
  else if ([(@"monospace") isEqual:value]) {
    return JreEnum(OrgMapsforgeCoreGraphicsFontFamily, MONOSPACE);
  }
  else if ([@"sans_serif" isEqual:value]) {
    return JreEnum(OrgMapsforgeCoreGraphicsFontFamily, SANS_SERIF);
  }
  else if ([@"serif" isEqual:value]) {
    return JreEnum(OrgMapsforgeCoreGraphicsFontFamily, SERIF);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid value for Align: ", value));
}

IOSObjectArray *OrgMapsforgeCoreGraphicsFontFamily_values() {
  OrgMapsforgeCoreGraphicsFontFamily_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeCoreGraphicsFontFamily_values_ count:4 type:OrgMapsforgeCoreGraphicsFontFamily_class_()];
}

OrgMapsforgeCoreGraphicsFontFamily *OrgMapsforgeCoreGraphicsFontFamily_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeCoreGraphicsFontFamily_initialize();
  for (int i = 0; i < 4; i++) {
    OrgMapsforgeCoreGraphicsFontFamily *e = OrgMapsforgeCoreGraphicsFontFamily_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeCoreGraphicsFontFamily *OrgMapsforgeCoreGraphicsFontFamily_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeCoreGraphicsFontFamily_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return OrgMapsforgeCoreGraphicsFontFamily_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreGraphicsFontFamily)
