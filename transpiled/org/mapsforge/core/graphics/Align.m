//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/graphics/Align.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/core/graphics/Align.h"

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeCoreGraphicsAlign)

OrgMapsforgeCoreGraphicsAlign *OrgMapsforgeCoreGraphicsAlign_CENTER;
OrgMapsforgeCoreGraphicsAlign *OrgMapsforgeCoreGraphicsAlign_LEFT;
OrgMapsforgeCoreGraphicsAlign *OrgMapsforgeCoreGraphicsAlign_RIGHT;

@implementation OrgMapsforgeCoreGraphicsAlign

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeCoreGraphicsAlign_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMapsforgeCoreGraphicsAlign *)fromStringWithNSString:(NSString *)value {
  if ([@"center" isEqual:value]) {
    return OrgMapsforgeCoreGraphicsAlign_CENTER;
  }
  if ([@"left" isEqual:value]) {
    return OrgMapsforgeCoreGraphicsAlign_LEFT;
  }
  if ([@"right" isEqual:value]) {
    return OrgMapsforgeCoreGraphicsAlign_RIGHT;
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid value for Align: ", value));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsAlign;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromStringWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CENTER", "LOrgMapsforgeCoreGraphicsAlign;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "LEFT", "LOrgMapsforgeCoreGraphicsAlign;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "RIGHT", "LOrgMapsforgeCoreGraphicsAlign;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "fromString", "LNSString;", &OrgMapsforgeCoreGraphicsAlign_CENTER, &OrgMapsforgeCoreGraphicsAlign_LEFT, &OrgMapsforgeCoreGraphicsAlign_RIGHT };
  static const J2ObjcClassInfo _OrgMapsforgeCoreGraphicsAlign = { "Align", "org.mapsforge.core.graphics", ptrTable, methods, fields, 7, 0x1, 2, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreGraphicsAlign;
}

+ (void)initialize {
  if (self == [OrgMapsforgeCoreGraphicsAlign class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeCoreGraphicsAlign_CENTER, new_OrgMapsforgeCoreGraphicsAlign_init());
    JreStrongAssignAndConsume(&OrgMapsforgeCoreGraphicsAlign_LEFT, new_OrgMapsforgeCoreGraphicsAlign_init());
    JreStrongAssignAndConsume(&OrgMapsforgeCoreGraphicsAlign_RIGHT, new_OrgMapsforgeCoreGraphicsAlign_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeCoreGraphicsAlign)
  }
}

@end

void OrgMapsforgeCoreGraphicsAlign_init(OrgMapsforgeCoreGraphicsAlign *self) {
  NSObject_init(self);
}

OrgMapsforgeCoreGraphicsAlign *new_OrgMapsforgeCoreGraphicsAlign_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeCoreGraphicsAlign, init)
}

OrgMapsforgeCoreGraphicsAlign *create_OrgMapsforgeCoreGraphicsAlign_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeCoreGraphicsAlign, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreGraphicsAlign)
