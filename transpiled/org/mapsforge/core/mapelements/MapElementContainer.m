//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/mapelements/MapElementContainer.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/Display.h"
#include "org/mapsforge/core/graphics/Matrix.h"
#include "org/mapsforge/core/mapelements/MapElementContainer.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"

@implementation OrgMapsforgeCoreMapelementsMapElementContainer

- (instancetype)initWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)xy
               withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                           withInt:(jint)priority {
  OrgMapsforgeCoreMapelementsMapElementContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_(self, xy, display, priority);
  return self;
}

- (jint)compareToWithId:(OrgMapsforgeCoreMapelementsMapElementContainer *)other {
  cast_chk(other, [OrgMapsforgeCoreMapelementsMapElementContainer class]);
  if (self->priority_ < ((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(other))->priority_) {
    return -1;
  }
  if (self->priority_ > other->priority_) {
    return 1;
  }
  return 0;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeCoreMapelementsMapElementContainer class]])) {
    return false;
  }
  OrgMapsforgeCoreMapelementsMapElementContainer *other = (OrgMapsforgeCoreMapelementsMapElementContainer *) cast_chk(obj, [OrgMapsforgeCoreMapelementsMapElementContainer class]);
  if (self->priority_ != ((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(other))->priority_) {
    return false;
  }
  else if (![((OrgMapsforgeCoreModelPoint *) nil_chk(self->xy_)) isEqual:other->xy_]) {
    return false;
  }
  return true;
}

- (void)drawWithOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)origin
            withOrgMapsforgeCoreGraphicsMatrix:(id<OrgMapsforgeCoreGraphicsMatrix>)matrix {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgMapsforgeCoreModelRectangle *)getBoundaryAbsolute {
  if (boundaryAbsolute_ == nil) {
    JreStrongAssign(&boundaryAbsolute_, [((OrgMapsforgeCoreModelRectangle *) nil_chk(self->boundary_)) shiftWithOrgMapsforgeCoreModelPoint:xy_]);
  }
  return boundaryAbsolute_;
}

- (jboolean)intersectsWithOrgMapsforgeCoreModelRectangle:(OrgMapsforgeCoreModelRectangle *)rectangle {
  return [((OrgMapsforgeCoreModelRectangle *) nil_chk([self getBoundaryAbsolute])) intersectsWithOrgMapsforgeCoreModelRectangle:rectangle];
}

- (jboolean)clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:(OrgMapsforgeCoreMapelementsMapElementContainer *)other {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, ALWAYS) == self->display_ || JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, ALWAYS) == ((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(other))->display_) {
    return false;
  }
  return [((OrgMapsforgeCoreModelRectangle *) nil_chk([self getBoundaryAbsolute])) intersectsWithOrgMapsforgeCoreModelRectangle:[((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(other)) getBoundaryAbsolute]];
}

- (NSUInteger)hash {
  jint result = 7;
  result = 31 * result + ((jint) [((OrgMapsforgeCoreModelPoint *) nil_chk(xy_)) hash]);
  result = 31 * result + priority_;
  return result;
}

- (OrgMapsforgeCoreModelPoint *)getPoint {
  return self->xy_;
}

- (jint)getPriority {
  return priority_;
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"xy="];
  [stringBuilder appendWithId:self->xy_];
  [stringBuilder appendWithNSString:@", priority="];
  [stringBuilder appendWithInt:self->priority_];
  return [stringBuilder description];
}

- (void)dealloc {
  RELEASE_(boundary_);
  RELEASE_(boundaryAbsolute_);
  RELEASE_(display_);
  RELEASE_(xy_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelRectangle;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 11, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreGraphicsDisplay:withInt:);
  methods[1].selector = @selector(compareToWithId:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(drawWithOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreGraphicsMatrix:);
  methods[4].selector = @selector(getBoundaryAbsolute);
  methods[5].selector = @selector(intersectsWithOrgMapsforgeCoreModelRectangle:);
  methods[6].selector = @selector(clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:);
  methods[7].selector = @selector(hash);
  methods[8].selector = @selector(getPoint);
  methods[9].selector = @selector(getPriority);
  methods[10].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundary_", "LOrgMapsforgeCoreModelRectangle;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "boundaryAbsolute_", "LOrgMapsforgeCoreModelRectangle;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "display_", "LOrgMapsforgeCoreGraphicsDisplay;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "xy_", "LOrgMapsforgeCoreModelPoint;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreGraphicsDisplay;I", "compareTo", "LOrgMapsforgeCoreMapelementsMapElementContainer;", "equals", "LNSObject;", "draw", "LOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreGraphicsMatrix;", "intersects", "LOrgMapsforgeCoreModelRectangle;", "clashesWith", "hashCode", "toString", "Ljava/lang/Object;Ljava/lang/Comparable<Lorg/mapsforge/core/mapelements/MapElementContainer;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreMapelementsMapElementContainer = { "MapElementContainer", "org.mapsforge.core.mapelements", ptrTable, methods, fields, 7, 0x401, 11, 5, -1, -1, -1, 12, -1 };
  return &_OrgMapsforgeCoreMapelementsMapElementContainer;
}

@end

void OrgMapsforgeCoreMapelementsMapElementContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_(OrgMapsforgeCoreMapelementsMapElementContainer *self, OrgMapsforgeCoreModelPoint *xy, OrgMapsforgeCoreGraphicsDisplay *display, jint priority) {
  NSObject_init(self);
  JreStrongAssign(&self->xy_, xy);
  JreStrongAssign(&self->display_, display);
  self->priority_ = priority;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreMapelementsMapElementContainer)
