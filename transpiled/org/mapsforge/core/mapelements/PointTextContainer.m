//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/core/mapelements/PointTextContainer.java
//

#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/graphics/Display.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Position.h"
#include "org/mapsforge/core/mapelements/MapElementContainer.h"
#include "org/mapsforge/core/mapelements/PointTextContainer.h"
#include "org/mapsforge/core/mapelements/SymbolContainer.h"
#include "org/mapsforge/core/model/Point.h"

@implementation OrgMapsforgeCoreMapelementsPointTextContainer

- (instancetype)initWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point
               withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                           withInt:(jint)priority
                                      withNSString:(NSString *)text
                 withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintFront
                 withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintBack
    withOrgMapsforgeCoreMapelementsSymbolContainer:(OrgMapsforgeCoreMapelementsSymbolContainer *)symbolContainer
              withOrgMapsforgeCoreGraphicsPosition:(OrgMapsforgeCoreGraphicsPosition *)position
                                           withInt:(jint)maxTextWidth {
  OrgMapsforgeCoreMapelementsPointTextContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_withNSString_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreMapelementsSymbolContainer_withOrgMapsforgeCoreGraphicsPosition_withInt_(self, point, display, priority, text, paintFront, paintBack, symbolContainer, position, maxTextWidth);
  return self;
}

- (jboolean)clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:(OrgMapsforgeCoreMapelementsMapElementContainer *)other {
  if ([super clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:other]) {
    return true;
  }
  if (!([other isKindOfClass:[OrgMapsforgeCoreMapelementsPointTextContainer class]])) {
    return false;
  }
  OrgMapsforgeCoreMapelementsPointTextContainer *ptc = (OrgMapsforgeCoreMapelementsPointTextContainer *) cast_chk(other, [OrgMapsforgeCoreMapelementsPointTextContainer class]);
  if ([((NSString *) nil_chk(self->text_)) isEqual:((OrgMapsforgeCoreMapelementsPointTextContainer *) nil_chk(ptc))->text_] && [((OrgMapsforgeCoreModelPoint *) nil_chk(self->xy_)) distanceWithOrgMapsforgeCoreModelPoint:ptc->xy_] < 200) {
    return true;
  }
  return false;
}

- (jboolean)isEqual:(id)obj {
  if (![super isEqual:obj]) {
    return false;
  }
  if (!([obj isKindOfClass:[OrgMapsforgeCoreMapelementsPointTextContainer class]])) {
    return false;
  }
  OrgMapsforgeCoreMapelementsPointTextContainer *other = (OrgMapsforgeCoreMapelementsPointTextContainer *) cast_chk(obj, [OrgMapsforgeCoreMapelementsPointTextContainer class]);
  if (![((NSString *) nil_chk(self->text_)) isEqual:((OrgMapsforgeCoreMapelementsPointTextContainer *) nil_chk(other))->text_]) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [super hash]);
  result = 31 * result + ((jint) [((NSString *) nil_chk(text_)) hash]);
  return result;
}

- (NSString *)description {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:[super description]];
  [stringBuilder appendWithNSString:@", text="];
  [stringBuilder appendWithNSString:self->text_];
  return [stringBuilder description];
}

- (void)dealloc {
  RELEASE_(paintBack_);
  RELEASE_(paintFront_);
  RELEASE_(position_);
  RELEASE_(symbolContainer_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreGraphicsDisplay:withInt:withNSString:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreMapelementsSymbolContainer:withOrgMapsforgeCoreGraphicsPosition:withInt:);
  methods[1].selector = @selector(clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(hash);
  methods[4].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isVisible_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "maxTextWidth_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "paintBack_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "paintFront_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "position_", "LOrgMapsforgeCoreGraphicsPosition;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "symbolContainer_", "LOrgMapsforgeCoreMapelementsSymbolContainer;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "textHeight_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "textWidth_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreGraphicsDisplay;ILNSString;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreMapelementsSymbolContainer;LOrgMapsforgeCoreGraphicsPosition;I", "clashesWith", "LOrgMapsforgeCoreMapelementsMapElementContainer;", "equals", "LNSObject;", "hashCode", "toString" };
  static const J2ObjcClassInfo _OrgMapsforgeCoreMapelementsPointTextContainer = { "PointTextContainer", "org.mapsforge.core.mapelements", ptrTable, methods, fields, 7, 0x401, 5, 9, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeCoreMapelementsPointTextContainer;
}

@end

void OrgMapsforgeCoreMapelementsPointTextContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_withNSString_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreMapelementsSymbolContainer_withOrgMapsforgeCoreGraphicsPosition_withInt_(OrgMapsforgeCoreMapelementsPointTextContainer *self, OrgMapsforgeCoreModelPoint *point, OrgMapsforgeCoreGraphicsDisplay *display, jint priority, NSString *text, id<OrgMapsforgeCoreGraphicsPaint> paintFront, id<OrgMapsforgeCoreGraphicsPaint> paintBack, OrgMapsforgeCoreMapelementsSymbolContainer *symbolContainer, OrgMapsforgeCoreGraphicsPosition *position, jint maxTextWidth) {
  OrgMapsforgeCoreMapelementsMapElementContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_(self, point, display, priority);
  self->maxTextWidth_ = maxTextWidth;
  JreStrongAssign(&self->text_, text);
  JreStrongAssign(&self->symbolContainer_, symbolContainer);
  JreStrongAssign(&self->paintFront_, paintFront);
  JreStrongAssign(&self->paintBack_, paintBack);
  JreStrongAssign(&self->position_, position);
  if (paintBack != nil) {
    self->textWidth_ = [paintBack getTextWidthWithNSString:text];
    self->textHeight_ = [paintBack getTextHeightWithNSString:text];
  }
  else {
    self->textWidth_ = [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(paintFront)) getTextWidthWithNSString:text];
    self->textHeight_ = [paintFront getTextHeightWithNSString:text];
  }
  self->isVisible_ = (![((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->paintFront_)) isTransparent] || (self->paintBack_ != nil && ![self->paintBack_ isTransparent]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeCoreMapelementsPointTextContainer)
