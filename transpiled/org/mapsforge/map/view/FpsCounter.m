//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/view/FpsCounter.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/concurrent/TimeUnit.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/FontFamily.h"
#include "org/mapsforge/core/graphics/FontStyle.h"
#include "org/mapsforge/core/graphics/GraphicContext.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/view/FpsCounter.h"

@interface OrgMapsforgeMapViewFpsCounter () {
 @public
  OrgMapsforgeMapModelDisplayModel *displayModel_;
  NSString *fps_;
  jint frameCounter_;
  jlong lastTime_;
  id<OrgMapsforgeCoreGraphicsPaint> paintFront_;
  id<OrgMapsforgeCoreGraphicsPaint> paintBack_;
  jboolean visible_;
}

+ (id<OrgMapsforgeCoreGraphicsPaint>)createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel;

+ (id<OrgMapsforgeCoreGraphicsPaint>)createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapViewFpsCounter, displayModel_, OrgMapsforgeMapModelDisplayModel *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapViewFpsCounter, fps_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapViewFpsCounter, paintFront_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapViewFpsCounter, paintBack_, id<OrgMapsforgeCoreGraphicsPaint>)

inline jlong OrgMapsforgeMapViewFpsCounter_get_ONE_SECOND();
static jlong OrgMapsforgeMapViewFpsCounter_ONE_SECOND;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(OrgMapsforgeMapViewFpsCounter, ONE_SECOND, jlong)

__attribute__((unused)) static id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapViewFpsCounter_createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

__attribute__((unused)) static id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapViewFpsCounter_createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapViewFpsCounter)

@implementation OrgMapsforgeMapViewFpsCounter

+ (id<OrgMapsforgeCoreGraphicsPaint>)createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  return OrgMapsforgeMapViewFpsCounter_createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel);
}

+ (id<OrgMapsforgeCoreGraphicsPaint>)createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  return OrgMapsforgeMapViewFpsCounter_createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel);
}

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  return self;
}

- (instancetype)initWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                       withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintBack
                       withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintFront {
  OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(self, displayModel, paintBack, paintFront);
  return self;
}

- (void)drawWithOrgMapsforgeCoreGraphicsGraphicContext:(id<OrgMapsforgeCoreGraphicsGraphicContext>)graphicContext {
  if (!self->visible_) {
    return;
  }
  jlong currentTime = JavaLangSystem_nanoTime();
  jlong elapsedTime = currentTime - self->lastTime_;
  if (elapsedTime > OrgMapsforgeMapViewFpsCounter_ONE_SECOND) {
    JreStrongAssign(&self->fps_, NSString_java_valueOfInt_(JavaLangMath_roundWithFloat_((jfloat) (self->frameCounter_ * OrgMapsforgeMapViewFpsCounter_ONE_SECOND) / elapsedTime)));
    self->lastTime_ = currentTime;
    self->frameCounter_ = 0;
  }
  jint x = JreFpToInt((20 * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel_)) getScaleFactor]));
  jint y = JreFpToInt((40 * [displayModel_ getScaleFactor]));
  [((id<OrgMapsforgeCoreGraphicsGraphicContext>) nil_chk(graphicContext)) drawTextWithNSString:self->fps_ withInt:x withInt:y withOrgMapsforgeCoreGraphicsPaint:self->paintBack_];
  [graphicContext drawTextWithNSString:self->fps_ withInt:x withInt:y withOrgMapsforgeCoreGraphicsPaint:self->paintFront_];
  ++self->frameCounter_;
}

- (jboolean)isVisible {
  return self->visible_;
}

- (void)setVisibleWithBoolean:(jboolean)visible {
  self->visible_ = visible;
}

- (void)dealloc {
  RELEASE_(displayModel_);
  RELEASE_(fps_);
  RELEASE_(paintFront_);
  RELEASE_(paintBack_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[1].selector = @selector(createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[2].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[3].selector = @selector(initWithOrgMapsforgeMapModelDisplayModel:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:);
  methods[4].selector = @selector(drawWithOrgMapsforgeCoreGraphicsGraphicContext:);
  methods[5].selector = @selector(isVisible);
  methods[6].selector = @selector(setVisibleWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ONE_SECOND", "J", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fps_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frameCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paintFront_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "paintBack_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "visible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "createPaintFront", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;", "createPaintBack", "LOrgMapsforgeMapModelDisplayModel;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;", "draw", "LOrgMapsforgeCoreGraphicsGraphicContext;", "setVisible", "Z", &OrgMapsforgeMapViewFpsCounter_ONE_SECOND };
  static const J2ObjcClassInfo _OrgMapsforgeMapViewFpsCounter = { "FpsCounter", "org.mapsforge.map.view", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapViewFpsCounter;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapViewFpsCounter class]) {
    OrgMapsforgeMapViewFpsCounter_ONE_SECOND = [((JavaUtilConcurrentTimeUnit *) nil_chk(JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS))) toNanosWithLong:1];
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapViewFpsCounter)
  }
}

@end

id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapViewFpsCounter_createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  OrgMapsforgeMapViewFpsCounter_initialize();
  id<OrgMapsforgeCoreGraphicsPaint> paint = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(paint)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, BLACK)];
  [paint setTypefaceWithOrgMapsforgeCoreGraphicsFontFamily:JreLoadEnum(OrgMapsforgeCoreGraphicsFontFamily, DEFAULT) withOrgMapsforgeCoreGraphicsFontStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsFontStyle, BOLD)];
  [paint setTextSizeWithFloat:25 * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor]];
  return paint;
}

id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapViewFpsCounter_createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  OrgMapsforgeMapViewFpsCounter_initialize();
  id<OrgMapsforgeCoreGraphicsPaint> paint = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(paint)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, WHITE)];
  [paint setTypefaceWithOrgMapsforgeCoreGraphicsFontFamily:JreLoadEnum(OrgMapsforgeCoreGraphicsFontFamily, DEFAULT) withOrgMapsforgeCoreGraphicsFontStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsFontStyle, BOLD)];
  [paint setTextSizeWithFloat:25 * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor]];
  [paint setStrokeWidthWithFloat:2 * [displayModel getScaleFactor]];
  [paint setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  return paint;
}

void OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapViewFpsCounter *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  NSObject_init(self);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->paintFront_, OrgMapsforgeMapViewFpsCounter_createPaintFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel));
  JreStrongAssign(&self->paintBack_, OrgMapsforgeMapViewFpsCounter_createPaintBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel));
}

OrgMapsforgeMapViewFpsCounter *new_OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapViewFpsCounter, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_, graphicFactory, displayModel)
}

OrgMapsforgeMapViewFpsCounter *create_OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapViewFpsCounter, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_, graphicFactory, displayModel)
}

void OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapViewFpsCounter *self, OrgMapsforgeMapModelDisplayModel *displayModel, id<OrgMapsforgeCoreGraphicsPaint> paintBack, id<OrgMapsforgeCoreGraphicsPaint> paintFront) {
  NSObject_init(self);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->paintFront_, paintFront);
  JreStrongAssign(&self->paintBack_, paintBack);
}

OrgMapsforgeMapViewFpsCounter *new_OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapModelDisplayModel *displayModel, id<OrgMapsforgeCoreGraphicsPaint> paintBack, id<OrgMapsforgeCoreGraphicsPaint> paintFront) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapViewFpsCounter, initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, displayModel, paintBack, paintFront)
}

OrgMapsforgeMapViewFpsCounter *create_OrgMapsforgeMapViewFpsCounter_initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapModelDisplayModel *displayModel, id<OrgMapsforgeCoreGraphicsPaint> paintBack, id<OrgMapsforgeCoreGraphicsPaint> paintFront) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapViewFpsCounter, initWithOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, displayModel, paintBack, paintFront)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapViewFpsCounter)
