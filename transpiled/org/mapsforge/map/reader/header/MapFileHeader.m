//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/header/MapFileHeader.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/map/reader/ReadBuffer.h"
#include "org/mapsforge/map/reader/header/MapFileException.h"
#include "org/mapsforge/map/reader/header/MapFileHeader.h"
#include "org/mapsforge/map/reader/header/MapFileInfo.h"
#include "org/mapsforge/map/reader/header/MapFileInfoBuilder.h"
#include "org/mapsforge/map/reader/header/OptionalFields.h"
#include "org/mapsforge/map/reader/header/RequiredFields.h"
#include "org/mapsforge/map/reader/header/SubFileParameter.h"
#include "org/mapsforge/map/reader/header/SubFileParameterBuilder.h"

@interface OrgMapsforgeMapReaderHeaderMapFileHeader () {
 @public
  OrgMapsforgeMapReaderHeaderMapFileInfo *mapFileInfo_;
  IOSObjectArray *subFileParameters_;
  jbyte zoomLevelMaximum_;
  jbyte zoomLevelMinimum_;
}

- (void)readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
                                                        withLong:(jlong)fileSize
               withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderHeaderMapFileHeader, mapFileInfo_, OrgMapsforgeMapReaderHeaderMapFileInfo *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderHeaderMapFileHeader, subFileParameters_, IOSObjectArray *)

inline jint OrgMapsforgeMapReaderHeaderMapFileHeader_get_BASE_ZOOM_LEVEL_MAX();
#define OrgMapsforgeMapReaderHeaderMapFileHeader_BASE_ZOOM_LEVEL_MAX 20
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderMapFileHeader, BASE_ZOOM_LEVEL_MAX, jint)

inline jint OrgMapsforgeMapReaderHeaderMapFileHeader_get_HEADER_SIZE_MIN();
#define OrgMapsforgeMapReaderHeaderMapFileHeader_HEADER_SIZE_MIN 70
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderMapFileHeader, HEADER_SIZE_MIN, jint)

inline jbyte OrgMapsforgeMapReaderHeaderMapFileHeader_get_SIGNATURE_LENGTH_INDEX();
#define OrgMapsforgeMapReaderHeaderMapFileHeader_SIGNATURE_LENGTH_INDEX 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderMapFileHeader, SIGNATURE_LENGTH_INDEX, jbyte)

inline jchar OrgMapsforgeMapReaderHeaderMapFileHeader_get_SPACE();
#define OrgMapsforgeMapReaderHeaderMapFileHeader_SPACE ' '
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderMapFileHeader, SPACE, jchar)

__attribute__((unused)) static void OrgMapsforgeMapReaderHeaderMapFileHeader_readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderHeaderMapFileHeader *self, OrgMapsforgeMapReaderReadBuffer *readBuffer, jlong fileSize, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder);

@implementation OrgMapsforgeMapReaderHeaderMapFileHeader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapReaderHeaderMapFileHeader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMapsforgeMapReaderHeaderMapFileInfo *)getMapFileInfo {
  return self->mapFileInfo_;
}

- (jbyte)getQueryZoomLevelWithByte:(jbyte)zoomLevel {
  if (zoomLevel > self->zoomLevelMaximum_) {
    return self->zoomLevelMaximum_;
  }
  else if (zoomLevel < self->zoomLevelMinimum_) {
    return self->zoomLevelMinimum_;
  }
  return zoomLevel;
}

- (OrgMapsforgeMapReaderHeaderSubFileParameter *)getSubFileParameterWithInt:(jint)queryZoomLevel {
  return IOSObjectArray_Get(nil_chk(self->subFileParameters_), queryZoomLevel);
}

- (void)readHeaderWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
                                             withLong:(jlong)fileSize {
  OrgMapsforgeMapReaderHeaderRequiredFields_readMagicByteWithOrgMapsforgeMapReaderReadBuffer_(readBuffer);
  OrgMapsforgeMapReaderHeaderRequiredFields_readRemainingHeaderWithOrgMapsforgeMapReaderReadBuffer_(readBuffer);
  OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder = create_OrgMapsforgeMapReaderHeaderMapFileInfoBuilder_init();
  OrgMapsforgeMapReaderHeaderRequiredFields_readFileVersionWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readFileSizeWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, fileSize, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readMapDateWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readBoundingBoxWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readTilePixelSizeWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readProjectionNameWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderOptionalFields_readOptionalFieldsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readPoiTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderRequiredFields_readWayTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
  OrgMapsforgeMapReaderHeaderMapFileHeader_readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(self, readBuffer, fileSize, mapFileInfoBuilder);
  JreStrongAssign(&self->mapFileInfo_, [mapFileInfoBuilder build]);
}

- (void)readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
                                                        withLong:(jlong)fileSize
               withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderMapFileHeader_readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(self, readBuffer, fileSize, mapFileInfoBuilder);
}

- (void)dealloc {
  RELEASE_(mapFileInfo_);
  RELEASE_(subFileParameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderHeaderMapFileInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderHeaderSubFileParameter;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, 6, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapFileInfo);
  methods[2].selector = @selector(getQueryZoomLevelWithByte:);
  methods[3].selector = @selector(getSubFileParameterWithInt:);
  methods[4].selector = @selector(readHeaderWithOrgMapsforgeMapReaderReadBuffer:withLong:);
  methods[5].selector = @selector(readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer:withLong:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_ZOOM_LEVEL_MAX", "I", .constantValue.asInt = OrgMapsforgeMapReaderHeaderMapFileHeader_BASE_ZOOM_LEVEL_MAX, 0x1a, -1, -1, -1, -1 },
    { "HEADER_SIZE_MIN", "I", .constantValue.asInt = OrgMapsforgeMapReaderHeaderMapFileHeader_HEADER_SIZE_MIN, 0x1a, -1, -1, -1, -1 },
    { "SIGNATURE_LENGTH_INDEX", "B", .constantValue.asChar = OrgMapsforgeMapReaderHeaderMapFileHeader_SIGNATURE_LENGTH_INDEX, 0x1a, -1, -1, -1, -1 },
    { "SPACE", "C", .constantValue.asUnichar = OrgMapsforgeMapReaderHeaderMapFileHeader_SPACE, 0x1a, -1, -1, -1, -1 },
    { "mapFileInfo_", "LOrgMapsforgeMapReaderHeaderMapFileInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subFileParameters_", "[LOrgMapsforgeMapReaderHeaderSubFileParameter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zoomLevelMaximum_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zoomLevelMinimum_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getQueryZoomLevel", "B", "getSubFileParameter", "I", "readHeader", "LOrgMapsforgeMapReaderReadBuffer;J", "LJavaIoIOException;", "readSubFileParameters", "LOrgMapsforgeMapReaderReadBuffer;JLOrgMapsforgeMapReaderHeaderMapFileInfoBuilder;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderHeaderMapFileHeader = { "MapFileHeader", "org.mapsforge.map.reader.header", ptrTable, methods, fields, 7, 0x1, 6, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderHeaderMapFileHeader;
}

@end

void OrgMapsforgeMapReaderHeaderMapFileHeader_init(OrgMapsforgeMapReaderHeaderMapFileHeader *self) {
  NSObject_init(self);
}

OrgMapsforgeMapReaderHeaderMapFileHeader *new_OrgMapsforgeMapReaderHeaderMapFileHeader_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderHeaderMapFileHeader, init)
}

OrgMapsforgeMapReaderHeaderMapFileHeader *create_OrgMapsforgeMapReaderHeaderMapFileHeader_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderHeaderMapFileHeader, init)
}

void OrgMapsforgeMapReaderHeaderMapFileHeader_readSubFileParametersWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderHeaderMapFileHeader *self, OrgMapsforgeMapReaderReadBuffer *readBuffer, jlong fileSize, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  jbyte numberOfSubFiles = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readByte];
  if (numberOfSubFiles < 1) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$B", @"invalid number of sub-files: ", numberOfSubFiles));
  }
  ((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->numberOfSubFiles_ = numberOfSubFiles;
  IOSObjectArray *tempSubFileParameters = [IOSObjectArray arrayWithLength:numberOfSubFiles type:OrgMapsforgeMapReaderHeaderSubFileParameter_class_()];
  self->zoomLevelMinimum_ = JavaLangByte_MAX_VALUE;
  self->zoomLevelMaximum_ = JavaLangByte_MIN_VALUE;
  for (jbyte currentSubFile = 0; currentSubFile < numberOfSubFiles; ++currentSubFile) {
    OrgMapsforgeMapReaderHeaderSubFileParameterBuilder *subFileParameterBuilder = create_OrgMapsforgeMapReaderHeaderSubFileParameterBuilder_init();
    jbyte baseZoomLevel = [readBuffer readByte];
    if (baseZoomLevel < 0 || baseZoomLevel > OrgMapsforgeMapReaderHeaderMapFileHeader_BASE_ZOOM_LEVEL_MAX) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$B", @"invalid base zoom level: ", baseZoomLevel));
    }
    subFileParameterBuilder->baseZoomLevel_ = baseZoomLevel;
    jbyte zoomLevelMin = [readBuffer readByte];
    if (zoomLevelMin < 0 || zoomLevelMin > 22) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$B", @"invalid minimum zoom level: ", zoomLevelMin));
    }
    subFileParameterBuilder->zoomLevelMin_ = zoomLevelMin;
    jbyte zoomLevelMax = [readBuffer readByte];
    if (zoomLevelMax < 0 || zoomLevelMax > 22) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$B", @"invalid maximum zoom level: ", zoomLevelMax));
    }
    subFileParameterBuilder->zoomLevelMax_ = zoomLevelMax;
    if (zoomLevelMin > zoomLevelMax) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$BCB", @"invalid zoom level range: ", zoomLevelMin, OrgMapsforgeMapReaderHeaderMapFileHeader_SPACE, zoomLevelMax));
    }
    jlong startAddress = [readBuffer readLong];
    if (startAddress < OrgMapsforgeMapReaderHeaderMapFileHeader_HEADER_SIZE_MIN || startAddress >= fileSize) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$J", @"invalid start address: ", startAddress));
    }
    subFileParameterBuilder->startAddress_ = startAddress;
    jlong indexStartAddress = startAddress;
    if (((OrgMapsforgeMapReaderHeaderOptionalFields *) nil_chk(mapFileInfoBuilder->optionalFields_))->isDebugFile_) {
      indexStartAddress += OrgMapsforgeMapReaderHeaderMapFileHeader_SIGNATURE_LENGTH_INDEX;
    }
    subFileParameterBuilder->indexStartAddress_ = indexStartAddress;
    jlong subFileSize = [readBuffer readLong];
    if (subFileSize < 1) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$J", @"invalid sub-file size: ", subFileSize));
    }
    subFileParameterBuilder->subFileSize_ = subFileSize;
    JreStrongAssign(&subFileParameterBuilder->boundingBox_, mapFileInfoBuilder->boundingBox_);
    IOSObjectArray_Set(tempSubFileParameters, currentSubFile, [subFileParameterBuilder build]);
    if (self->zoomLevelMinimum_ > ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(IOSObjectArray_Get(tempSubFileParameters, currentSubFile)))->zoomLevelMin_) {
      self->zoomLevelMinimum_ = ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(IOSObjectArray_Get(tempSubFileParameters, currentSubFile)))->zoomLevelMin_;
      mapFileInfoBuilder->zoomLevelMin_ = self->zoomLevelMinimum_;
    }
    if (self->zoomLevelMaximum_ < ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(IOSObjectArray_Get(tempSubFileParameters, currentSubFile)))->zoomLevelMax_) {
      self->zoomLevelMaximum_ = ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(IOSObjectArray_Get(tempSubFileParameters, currentSubFile)))->zoomLevelMax_;
      mapFileInfoBuilder->zoomLevelMax_ = self->zoomLevelMaximum_;
    }
  }
  JreStrongAssignAndConsume(&self->subFileParameters_, [IOSObjectArray newArrayWithLength:self->zoomLevelMaximum_ + 1 type:OrgMapsforgeMapReaderHeaderSubFileParameter_class_()]);
  for (jint currentMapFile = 0; currentMapFile < numberOfSubFiles; ++currentMapFile) {
    OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter = IOSObjectArray_Get(tempSubFileParameters, currentMapFile);
    for (jbyte zoomLevel = ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(subFileParameter))->zoomLevelMin_; zoomLevel <= subFileParameter->zoomLevelMax_; ++zoomLevel) {
      IOSObjectArray_Set(self->subFileParameters_, zoomLevel, subFileParameter);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderHeaderMapFileHeader)
