//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/header/RequiredFields.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Tag.h"
#include "org/mapsforge/core/util/LatLongUtils.h"
#include "org/mapsforge/map/reader/ReadBuffer.h"
#include "org/mapsforge/map/reader/header/MapFileException.h"
#include "org/mapsforge/map/reader/header/MapFileInfoBuilder.h"
#include "org/mapsforge/map/reader/header/RequiredFields.h"

@interface OrgMapsforgeMapReaderHeaderRequiredFields ()

- (instancetype)init;

@end

inline NSString *OrgMapsforgeMapReaderHeaderRequiredFields_get_BINARY_OSM_MAGIC_BYTE();
static NSString *OrgMapsforgeMapReaderHeaderRequiredFields_BINARY_OSM_MAGIC_BYTE = @"mapsforge binary OSM";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderHeaderRequiredFields, BINARY_OSM_MAGIC_BYTE, NSString *)

inline jint OrgMapsforgeMapReaderHeaderRequiredFields_get_HEADER_SIZE_MAX();
#define OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MAX 1000000
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderRequiredFields, HEADER_SIZE_MAX, jint)

inline jint OrgMapsforgeMapReaderHeaderRequiredFields_get_HEADER_SIZE_MIN();
#define OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MIN 70
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderRequiredFields, HEADER_SIZE_MIN, jint)

inline NSString *OrgMapsforgeMapReaderHeaderRequiredFields_get_MERCATOR();
static NSString *OrgMapsforgeMapReaderHeaderRequiredFields_MERCATOR = @"Mercator";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderHeaderRequiredFields, MERCATOR, NSString *)

inline jint OrgMapsforgeMapReaderHeaderRequiredFields_get_SUPPORTED_FILE_VERSION();
#define OrgMapsforgeMapReaderHeaderRequiredFields_SUPPORTED_FILE_VERSION 3
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderHeaderRequiredFields, SUPPORTED_FILE_VERSION, jint)

__attribute__((unused)) static void OrgMapsforgeMapReaderHeaderRequiredFields_init(OrgMapsforgeMapReaderHeaderRequiredFields *self);

__attribute__((unused)) static OrgMapsforgeMapReaderHeaderRequiredFields *new_OrgMapsforgeMapReaderHeaderRequiredFields_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapReaderHeaderRequiredFields *create_OrgMapsforgeMapReaderHeaderRequiredFields_init();

@implementation OrgMapsforgeMapReaderHeaderRequiredFields

+ (void)readBoundingBoxWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
         withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readBoundingBoxWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readFileSizeWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
                                               withLong:(jlong)fileSize
      withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readFileSizeWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, fileSize, mapFileInfoBuilder);
}

+ (void)readFileVersionWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
         withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readFileVersionWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readMagicByteWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer {
  OrgMapsforgeMapReaderHeaderRequiredFields_readMagicByteWithOrgMapsforgeMapReaderReadBuffer_(readBuffer);
}

+ (void)readMapDateWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
     withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readMapDateWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readPoiTagsWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
     withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readPoiTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readProjectionNameWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
            withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readProjectionNameWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readRemainingHeaderWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer {
  OrgMapsforgeMapReaderHeaderRequiredFields_readRemainingHeaderWithOrgMapsforgeMapReaderReadBuffer_(readBuffer);
}

+ (void)readTilePixelSizeWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
           withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readTilePixelSizeWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

+ (void)readWayTagsWithOrgMapsforgeMapReaderReadBuffer:(OrgMapsforgeMapReaderReadBuffer *)readBuffer
     withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderRequiredFields_readWayTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(readBuffer, mapFileInfoBuilder);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapReaderHeaderRequiredFields_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x8, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 11, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x8, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 13, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(readBoundingBoxWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[1].selector = @selector(readFileSizeWithOrgMapsforgeMapReaderReadBuffer:withLong:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[2].selector = @selector(readFileVersionWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[3].selector = @selector(readMagicByteWithOrgMapsforgeMapReaderReadBuffer:);
  methods[4].selector = @selector(readMapDateWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[5].selector = @selector(readPoiTagsWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[6].selector = @selector(readProjectionNameWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[7].selector = @selector(readRemainingHeaderWithOrgMapsforgeMapReaderReadBuffer:);
  methods[8].selector = @selector(readTilePixelSizeWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[9].selector = @selector(readWayTagsWithOrgMapsforgeMapReaderReadBuffer:withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[10].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BINARY_OSM_MAGIC_BYTE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "HEADER_SIZE_MAX", "I", .constantValue.asInt = OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MAX, 0x1a, -1, -1, -1, -1 },
    { "HEADER_SIZE_MIN", "I", .constantValue.asInt = OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MIN, 0x1a, -1, -1, -1, -1 },
    { "MERCATOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "SUPPORTED_FILE_VERSION", "I", .constantValue.asInt = OrgMapsforgeMapReaderHeaderRequiredFields_SUPPORTED_FILE_VERSION, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "readBoundingBox", "LOrgMapsforgeMapReaderReadBuffer;LOrgMapsforgeMapReaderHeaderMapFileInfoBuilder;", "readFileSize", "LOrgMapsforgeMapReaderReadBuffer;JLOrgMapsforgeMapReaderHeaderMapFileInfoBuilder;", "readFileVersion", "readMagicByte", "LOrgMapsforgeMapReaderReadBuffer;", "LJavaIoIOException;", "readMapDate", "readPoiTags", "readProjectionName", "readRemainingHeader", "readTilePixelSize", "readWayTags", &OrgMapsforgeMapReaderHeaderRequiredFields_BINARY_OSM_MAGIC_BYTE, &OrgMapsforgeMapReaderHeaderRequiredFields_MERCATOR };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderHeaderRequiredFields = { "RequiredFields", "org.mapsforge.map.reader.header", ptrTable, methods, fields, 7, 0x10, 11, 5, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderHeaderRequiredFields;
}

@end

void OrgMapsforgeMapReaderHeaderRequiredFields_readBoundingBoxWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jdouble minLatitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readInt]);
  jdouble minLongitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([readBuffer readInt]);
  jdouble maxLatitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([readBuffer readInt]);
  jdouble maxLongitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([readBuffer readInt]);
  @try {
    JreStrongAssignAndConsume(&((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->boundingBox_, new_OrgMapsforgeCoreModelBoundingBox_initWithDouble_withDouble_withDouble_withDouble_(minLatitude, minLongitude, maxLatitude, maxLongitude));
  }
  @catch (JavaLangIllegalArgumentException *e) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_([e getMessage]);
  }
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readFileSizeWithOrgMapsforgeMapReaderReadBuffer_withLong_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, jlong fileSize, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jlong headerFileSize = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readLong];
  if (headerFileSize != fileSize) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$J", @"invalid file size: ", headerFileSize));
  }
  ((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->fileSize_ = fileSize;
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readFileVersionWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint fileVersion = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readInt];
  if (fileVersion != OrgMapsforgeMapReaderHeaderRequiredFields_SUPPORTED_FILE_VERSION) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"unsupported file version: ", fileVersion));
  }
  ((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->fileVersion_ = fileVersion;
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readMagicByteWithOrgMapsforgeMapReaderReadBuffer_(OrgMapsforgeMapReaderReadBuffer *readBuffer) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint magicByteLength = [((NSString *) nil_chk(OrgMapsforgeMapReaderHeaderRequiredFields_BINARY_OSM_MAGIC_BYTE)) java_length];
  if (![((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readFromFileWithInt:magicByteLength + 4]) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(@"reading magic byte has failed");
  }
  NSString *magicByte = [readBuffer readUTF8EncodedStringWithInt:magicByteLength];
  if (![OrgMapsforgeMapReaderHeaderRequiredFields_BINARY_OSM_MAGIC_BYTE isEqual:magicByte]) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$$", @"invalid magic byte: ", magicByte));
  }
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readMapDateWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jlong mapDate = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readLong];
  if (mapDate < 1200000000000LL) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$J", @"invalid map date: ", mapDate));
  }
  ((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->mapDate_ = mapDate;
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readPoiTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint numberOfPoiTags = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readShort];
  if (numberOfPoiTags < 0) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"invalid number of POI tags: ", numberOfPoiTags));
  }
  IOSObjectArray *poiTags = [IOSObjectArray arrayWithLength:numberOfPoiTags type:OrgMapsforgeCoreModelTag_class_()];
  for (jint currentTagId = 0; currentTagId < numberOfPoiTags; ++currentTagId) {
    NSString *tag = [readBuffer readUTF8EncodedString];
    if (tag == nil) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"POI tag must not be null: ", currentTagId));
    }
    IOSObjectArray_SetAndConsume(poiTags, currentTagId, new_OrgMapsforgeCoreModelTag_initWithNSString_(tag));
  }
  JreStrongAssign(&((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->poiTags_, poiTags);
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readProjectionNameWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  NSString *projectionName = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readUTF8EncodedString];
  if (![((NSString *) nil_chk(OrgMapsforgeMapReaderHeaderRequiredFields_MERCATOR)) isEqual:projectionName]) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$$", @"unsupported projection: ", projectionName));
  }
  JreStrongAssign(&((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->projectionName_, projectionName);
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readRemainingHeaderWithOrgMapsforgeMapReaderReadBuffer_(OrgMapsforgeMapReaderReadBuffer *readBuffer) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint remainingHeaderSize = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readInt];
  if (remainingHeaderSize < OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MIN || remainingHeaderSize > OrgMapsforgeMapReaderHeaderRequiredFields_HEADER_SIZE_MAX) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"invalid remaining header size: ", remainingHeaderSize));
  }
  if (![readBuffer readFromFileWithInt:remainingHeaderSize]) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"reading header data has failed: ", remainingHeaderSize));
  }
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readTilePixelSizeWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint tilePixelSize = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readShort];
  ((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->tilePixelSize_ = tilePixelSize;
}

void OrgMapsforgeMapReaderHeaderRequiredFields_readWayTagsWithOrgMapsforgeMapReaderReadBuffer_withOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderReadBuffer *readBuffer, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  OrgMapsforgeMapReaderHeaderRequiredFields_initialize();
  jint numberOfWayTags = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(readBuffer)) readShort];
  if (numberOfWayTags < 0) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"invalid number of way tags: ", numberOfWayTags));
  }
  IOSObjectArray *wayTags = [IOSObjectArray arrayWithLength:numberOfWayTags type:OrgMapsforgeCoreModelTag_class_()];
  for (jint currentTagId = 0; currentTagId < numberOfWayTags; ++currentTagId) {
    NSString *tag = [readBuffer readUTF8EncodedString];
    if (tag == nil) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$I", @"way tag must not be null: ", currentTagId));
    }
    IOSObjectArray_SetAndConsume(wayTags, currentTagId, new_OrgMapsforgeCoreModelTag_initWithNSString_(tag));
  }
  JreStrongAssign(&((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->wayTags_, wayTags);
}

void OrgMapsforgeMapReaderHeaderRequiredFields_init(OrgMapsforgeMapReaderHeaderRequiredFields *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapReaderHeaderRequiredFields *new_OrgMapsforgeMapReaderHeaderRequiredFields_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderHeaderRequiredFields, init)
}

OrgMapsforgeMapReaderHeaderRequiredFields *create_OrgMapsforgeMapReaderHeaderRequiredFields_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderHeaderRequiredFields, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderHeaderRequiredFields)
