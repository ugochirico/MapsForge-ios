//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/header/MapFileInfo.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/map/reader/header/MapFileInfo.h"
#include "org/mapsforge/map/reader/header/MapFileInfoBuilder.h"
#include "org/mapsforge/map/reader/header/OptionalFields.h"

@implementation OrgMapsforgeMapReaderHeaderMapFileInfo

- (instancetype)initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *)mapFileInfoBuilder {
  OrgMapsforgeMapReaderHeaderMapFileInfo_initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(self, mapFileInfoBuilder);
  return self;
}

- (jboolean)supportsZoomLevelWithByte:(jbyte)zoomLevel {
  return zoomLevel >= self->zoomLevelMin_ && zoomLevel <= self->zoomLevelMax_;
}

- (void)dealloc {
  RELEASE_(boundingBox_);
  RELEASE_(comment_);
  RELEASE_(createdBy_);
  RELEASE_(languagePreference_);
  RELEASE_(poiTags_);
  RELEASE_(projectionName_);
  RELEASE_(startPosition_);
  RELEASE_(startZoomLevel_);
  RELEASE_(wayTags_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder:);
  methods[1].selector = @selector(supportsZoomLevelWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundingBox_", "LOrgMapsforgeCoreModelBoundingBox;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "comment_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "createdBy_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "debugFile_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fileSize_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "fileVersion_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "languagePreference_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "mapDate_", "J", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "numberOfSubFiles_", "B", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "poiTags_", "[LOrgMapsforgeCoreModelTag;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "projectionName_", "LNSString;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "startPosition_", "LOrgMapsforgeCoreModelLatLong;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "startZoomLevel_", "LJavaLangByte;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "tilePixelSize_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "wayTags_", "[LOrgMapsforgeCoreModelTag;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "zoomLevelMin_", "B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "zoomLevelMax_", "B", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapReaderHeaderMapFileInfoBuilder;", "supportsZoomLevel", "B" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderHeaderMapFileInfo = { "MapFileInfo", "org.mapsforge.map.reader.header", ptrTable, methods, fields, 7, 0x1, 2, 17, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderHeaderMapFileInfo;
}

@end

void OrgMapsforgeMapReaderHeaderMapFileInfo_initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderHeaderMapFileInfo *self, OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  NSObject_init(self);
  JreStrongAssign(&self->comment_, ((OrgMapsforgeMapReaderHeaderOptionalFields *) nil_chk(((OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *) nil_chk(mapFileInfoBuilder))->optionalFields_))->comment_);
  JreStrongAssign(&self->createdBy_, mapFileInfoBuilder->optionalFields_->createdBy_);
  self->debugFile_ = mapFileInfoBuilder->optionalFields_->isDebugFile_;
  self->fileSize_ = mapFileInfoBuilder->fileSize_;
  self->fileVersion_ = mapFileInfoBuilder->fileVersion_;
  JreStrongAssign(&self->languagePreference_, mapFileInfoBuilder->optionalFields_->languagePreference_);
  JreStrongAssign(&self->boundingBox_, mapFileInfoBuilder->boundingBox_);
  self->mapDate_ = mapFileInfoBuilder->mapDate_;
  self->numberOfSubFiles_ = mapFileInfoBuilder->numberOfSubFiles_;
  JreStrongAssign(&self->poiTags_, mapFileInfoBuilder->poiTags_);
  JreStrongAssign(&self->projectionName_, mapFileInfoBuilder->projectionName_);
  JreStrongAssign(&self->startPosition_, mapFileInfoBuilder->optionalFields_->startPosition_);
  JreStrongAssign(&self->startZoomLevel_, mapFileInfoBuilder->optionalFields_->startZoomLevel_);
  self->tilePixelSize_ = mapFileInfoBuilder->tilePixelSize_;
  JreStrongAssign(&self->wayTags_, mapFileInfoBuilder->wayTags_);
  self->zoomLevelMax_ = mapFileInfoBuilder->zoomLevelMax_;
  self->zoomLevelMin_ = mapFileInfoBuilder->zoomLevelMin_;
}

OrgMapsforgeMapReaderHeaderMapFileInfo *new_OrgMapsforgeMapReaderHeaderMapFileInfo_initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderHeaderMapFileInfo, initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_, mapFileInfoBuilder)
}

OrgMapsforgeMapReaderHeaderMapFileInfo *create_OrgMapsforgeMapReaderHeaderMapFileInfo_initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *mapFileInfoBuilder) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderHeaderMapFileInfo, initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_, mapFileInfoBuilder)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderHeaderMapFileInfo)
