//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/header/MapFileInfoBuilder.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/map/reader/header/MapFileInfo.h"
#include "org/mapsforge/map/reader/header/MapFileInfoBuilder.h"
#include "org/mapsforge/map/reader/header/OptionalFields.h"

@implementation OrgMapsforgeMapReaderHeaderMapFileInfoBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapReaderHeaderMapFileInfoBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (OrgMapsforgeMapReaderHeaderMapFileInfo *)build {
  return create_OrgMapsforgeMapReaderHeaderMapFileInfo_initWithOrgMapsforgeMapReaderHeaderMapFileInfoBuilder_(self);
}

- (void)dealloc {
  RELEASE_(boundingBox_);
  RELEASE_(optionalFields_);
  RELEASE_(poiTags_);
  RELEASE_(projectionName_);
  RELEASE_(wayTags_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderHeaderMapFileInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundingBox_", "LOrgMapsforgeCoreModelBoundingBox;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fileSize_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "fileVersion_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mapDate_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "numberOfSubFiles_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "optionalFields_", "LOrgMapsforgeMapReaderHeaderOptionalFields;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "poiTags_", "[LOrgMapsforgeCoreModelTag;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "projectionName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tilePixelSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "wayTags_", "[LOrgMapsforgeCoreModelTag;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "zoomLevelMin_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "zoomLevelMax_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderHeaderMapFileInfoBuilder = { "MapFileInfoBuilder", "org.mapsforge.map.reader.header", NULL, methods, fields, 7, 0x0, 2, 12, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderHeaderMapFileInfoBuilder;
}

@end

void OrgMapsforgeMapReaderHeaderMapFileInfoBuilder_init(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *self) {
  NSObject_init(self);
}

OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *new_OrgMapsforgeMapReaderHeaderMapFileInfoBuilder_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder, init)
}

OrgMapsforgeMapReaderHeaderMapFileInfoBuilder *create_OrgMapsforgeMapReaderHeaderMapFileInfoBuilder_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderHeaderMapFileInfoBuilder)
