//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/MapFile.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Short.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Tag.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/LatLongUtils.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/reader/IndexCache.h"
#include "org/mapsforge/map/reader/MapFile.h"
#include "org/mapsforge/map/reader/MapReadResult.h"
#include "org/mapsforge/map/reader/MapReadResultBuilder.h"
#include "org/mapsforge/map/reader/PoiWayBundle.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/reader/QueryParameters.h"
#include "org/mapsforge/map/reader/ReadBuffer.h"
#include "org/mapsforge/map/reader/Way.h"
#include "org/mapsforge/map/reader/header/MapFileException.h"
#include "org/mapsforge/map/reader/header/MapFileHeader.h"
#include "org/mapsforge/map/reader/header/MapFileInfo.h"
#include "org/mapsforge/map/reader/header/SubFileParameter.h"

@interface OrgMapsforgeMapReaderMapFile () {
 @public
  OrgMapsforgeMapReaderIndexCache *databaseIndexCache_;
  jlong fileSize_;
  JavaIoRandomAccessFile *inputFile_;
  OrgMapsforgeMapReaderHeaderMapFileHeader *mapFileHeader_;
  OrgMapsforgeMapReaderReadBuffer *readBuffer_;
  jlong timestamp_;
}

- (void)closeFile;

- (void)decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)waySegment
                                                            withDouble:(jdouble)tileLatitude
                                                            withDouble:(jdouble)tileLongitude;

- (void)decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)waySegment
                                                            withDouble:(jdouble)tileLatitude
                                                            withDouble:(jdouble)tileLongitude;

- (void)logDebugSignaturesWithNSString:(NSString *)signatureBlock
                          withNSString:(NSString *)signatureWay;

- (OrgMapsforgeMapReaderPoiWayBundle *)processBlockWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                            withOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                       withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                                                 withDouble:(jdouble)tileLatitude
                                                                                 withDouble:(jdouble)tileLongitude;

- (OrgMapsforgeMapReaderMapReadResult *)processBlocksWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                              withOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                         withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox;

- (jboolean)processBlockSignature;

- (id<JavaUtilList>)processPOIsWithDouble:(jdouble)tileLatitude
                               withDouble:(jdouble)tileLongitude
                                  withInt:(jint)numberOfPois
     withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                              withBoolean:(jboolean)filterRequired;

- (IOSObjectArray *)processWayDataBlockWithDouble:(jdouble)tileLatitude
                                       withDouble:(jdouble)tileLongitude
                                      withBoolean:(jboolean)doubleDeltaEncoding;

- (id<JavaUtilList>)processWaysWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                                                withInt:(jint)numberOfWays
                                   withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                            withBoolean:(jboolean)filterRequired
                                                             withDouble:(jdouble)tileLatitude
                                                             withDouble:(jdouble)tileLongitude;

- (OrgMapsforgeCoreModelLatLong *)readOptionalLabelPositionWithDouble:(jdouble)tileLatitude
                                                           withDouble:(jdouble)tileLongitude
                                                          withBoolean:(jboolean)featureLabelPosition;

- (jint)readOptionalWayDataBlocksByteWithBoolean:(jboolean)featureWayDataBlocksByte;

- (IOSObjectArray *)readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter;

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMapFile, databaseIndexCache_, OrgMapsforgeMapReaderIndexCache *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMapFile, inputFile_, JavaIoRandomAccessFile *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMapFile, mapFileHeader_, OrgMapsforgeMapReaderHeaderMapFileHeader *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMapFile, readBuffer_, OrgMapsforgeMapReaderReadBuffer *)

inline jlong OrgMapsforgeMapReaderMapFile_get_BITMASK_INDEX_OFFSET();
#define OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_OFFSET 549755813887LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, BITMASK_INDEX_OFFSET, jlong)

inline jlong OrgMapsforgeMapReaderMapFile_get_BITMASK_INDEX_WATER();
#define OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_WATER 549755813888LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, BITMASK_INDEX_WATER, jlong)

inline NSString *OrgMapsforgeMapReaderMapFile_get_DEBUG_SIGNATURE_BLOCK();
static NSString *OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_BLOCK = @"block signature: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, DEBUG_SIGNATURE_BLOCK, NSString *)

inline NSString *OrgMapsforgeMapReaderMapFile_get_DEBUG_SIGNATURE_POI();
static NSString *OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_POI = @"POI signature: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, DEBUG_SIGNATURE_POI, NSString *)

inline NSString *OrgMapsforgeMapReaderMapFile_get_DEBUG_SIGNATURE_WAY();
static NSString *OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_WAY = @"way signature: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, DEBUG_SIGNATURE_WAY, NSString *)

inline JavaLangByte *OrgMapsforgeMapReaderMapFile_get_DEFAULT_START_ZOOM_LEVEL();
static JavaLangByte *OrgMapsforgeMapReaderMapFile_DEFAULT_START_ZOOM_LEVEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, DEFAULT_START_ZOOM_LEVEL, JavaLangByte *)

inline jint OrgMapsforgeMapReaderMapFile_get_INDEX_CACHE_SIZE();
#define OrgMapsforgeMapReaderMapFile_INDEX_CACHE_SIZE 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, INDEX_CACHE_SIZE, jint)

inline NSString *OrgMapsforgeMapReaderMapFile_get_INVALID_FIRST_WAY_OFFSET();
static NSString *OrgMapsforgeMapReaderMapFile_INVALID_FIRST_WAY_OFFSET = @"invalid first way offset: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, INVALID_FIRST_WAY_OFFSET, NSString *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapReaderMapFile_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapReaderMapFile_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, LOGGER, JavaUtilLoggingLogger *)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_FEATURE_ELEVATION();
#define OrgMapsforgeMapReaderMapFile_POI_FEATURE_ELEVATION 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_FEATURE_ELEVATION, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_FEATURE_HOUSE_NUMBER();
#define OrgMapsforgeMapReaderMapFile_POI_FEATURE_HOUSE_NUMBER 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_FEATURE_HOUSE_NUMBER, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_FEATURE_NAME();
#define OrgMapsforgeMapReaderMapFile_POI_FEATURE_NAME 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_FEATURE_NAME, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_LAYER_BITMASK();
#define OrgMapsforgeMapReaderMapFile_POI_LAYER_BITMASK 240
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_LAYER_BITMASK, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_LAYER_SHIFT();
#define OrgMapsforgeMapReaderMapFile_POI_LAYER_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_LAYER_SHIFT, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_POI_NUMBER_OF_TAGS_BITMASK();
#define OrgMapsforgeMapReaderMapFile_POI_NUMBER_OF_TAGS_BITMASK 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, POI_NUMBER_OF_TAGS_BITMASK, jint)

inline NSString *OrgMapsforgeMapReaderMapFile_get_READ_ONLY_MODE();
static NSString *OrgMapsforgeMapReaderMapFile_READ_ONLY_MODE = @"r";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, READ_ONLY_MODE, NSString *)

inline jbyte OrgMapsforgeMapReaderMapFile_get_SIGNATURE_LENGTH_BLOCK();
#define OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_BLOCK 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, SIGNATURE_LENGTH_BLOCK, jbyte)

inline jbyte OrgMapsforgeMapReaderMapFile_get_SIGNATURE_LENGTH_POI();
#define OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_POI 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, SIGNATURE_LENGTH_POI, jbyte)

inline jbyte OrgMapsforgeMapReaderMapFile_get_SIGNATURE_LENGTH_WAY();
#define OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_WAY 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, SIGNATURE_LENGTH_WAY, jbyte)

inline NSString *OrgMapsforgeMapReaderMapFile_get_TAG_KEY_ELE();
static NSString *OrgMapsforgeMapReaderMapFile_TAG_KEY_ELE = @"ele";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, TAG_KEY_ELE, NSString *)

inline NSString *OrgMapsforgeMapReaderMapFile_get_TAG_KEY_HOUSE_NUMBER();
static NSString *OrgMapsforgeMapReaderMapFile_TAG_KEY_HOUSE_NUMBER = @"addr:housenumber";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, TAG_KEY_HOUSE_NUMBER, NSString *)

inline NSString *OrgMapsforgeMapReaderMapFile_get_TAG_KEY_NAME();
static NSString *OrgMapsforgeMapReaderMapFile_TAG_KEY_NAME = @"name";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, TAG_KEY_NAME, NSString *)

inline NSString *OrgMapsforgeMapReaderMapFile_get_TAG_KEY_REF();
static NSString *OrgMapsforgeMapReaderMapFile_TAG_KEY_REF = @"ref";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderMapFile, TAG_KEY_REF, NSString *)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_DATA_BLOCKS_BYTE();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DATA_BLOCKS_BYTE 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_DATA_BLOCKS_BYTE, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_DOUBLE_DELTA_ENCODING();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DOUBLE_DELTA_ENCODING 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_DOUBLE_DELTA_ENCODING, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_HOUSE_NUMBER();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_HOUSE_NUMBER 64
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_HOUSE_NUMBER, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_LABEL_POSITION();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_LABEL_POSITION 16
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_LABEL_POSITION, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_NAME();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_NAME 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_NAME, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_FEATURE_REF();
#define OrgMapsforgeMapReaderMapFile_WAY_FEATURE_REF 32
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_FEATURE_REF, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_LAYER_BITMASK();
#define OrgMapsforgeMapReaderMapFile_WAY_LAYER_BITMASK 240
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_LAYER_BITMASK, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_LAYER_SHIFT();
#define OrgMapsforgeMapReaderMapFile_WAY_LAYER_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_LAYER_SHIFT, jint)

inline jint OrgMapsforgeMapReaderMapFile_get_WAY_NUMBER_OF_TAGS_BITMASK();
#define OrgMapsforgeMapReaderMapFile_WAY_NUMBER_OF_TAGS_BITMASK 15
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderMapFile, WAY_NUMBER_OF_TAGS_BITMASK, jint)

__attribute__((unused)) static void OrgMapsforgeMapReaderMapFile_closeFile(OrgMapsforgeMapReaderMapFile *self);

__attribute__((unused)) static void OrgMapsforgeMapReaderMapFile_decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, IOSObjectArray *waySegment, jdouble tileLatitude, jdouble tileLongitude);

__attribute__((unused)) static void OrgMapsforgeMapReaderMapFile_decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, IOSObjectArray *waySegment, jdouble tileLatitude, jdouble tileLongitude);

__attribute__((unused)) static OrgMapsforgeMapReaderPoiWayBundle *OrgMapsforgeMapReaderMapFile_processBlockWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, OrgMapsforgeCoreModelBoundingBox *boundingBox, jdouble tileLatitude, jdouble tileLongitude);

__attribute__((unused)) static OrgMapsforgeMapReaderMapReadResult *OrgMapsforgeMapReaderMapFile_processBlocksWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, OrgMapsforgeCoreModelBoundingBox *boundingBox);

__attribute__((unused)) static jboolean OrgMapsforgeMapReaderMapFile_processBlockSignature(OrgMapsforgeMapReaderMapFile *self);

__attribute__((unused)) static id<JavaUtilList> OrgMapsforgeMapReaderMapFile_processPOIsWithDouble_withDouble_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jint numberOfPois, OrgMapsforgeCoreModelBoundingBox *boundingBox, jboolean filterRequired);

__attribute__((unused)) static IOSObjectArray *OrgMapsforgeMapReaderMapFile_processWayDataBlockWithDouble_withDouble_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jboolean doubleDeltaEncoding);

__attribute__((unused)) static id<JavaUtilList> OrgMapsforgeMapReaderMapFile_processWaysWithOrgMapsforgeMapReaderQueryParameters_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, jint numberOfWays, OrgMapsforgeCoreModelBoundingBox *boundingBox, jboolean filterRequired, jdouble tileLatitude, jdouble tileLongitude);

__attribute__((unused)) static OrgMapsforgeCoreModelLatLong *OrgMapsforgeMapReaderMapFile_readOptionalLabelPositionWithDouble_withDouble_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jboolean featureLabelPosition);

__attribute__((unused)) static jint OrgMapsforgeMapReaderMapFile_readOptionalWayDataBlocksByteWithBoolean_(OrgMapsforgeMapReaderMapFile *self, jboolean featureWayDataBlocksByte);

__attribute__((unused)) static IOSObjectArray *OrgMapsforgeMapReaderMapFile_readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter);

__attribute__((unused)) static void OrgMapsforgeMapReaderMapFile_init(OrgMapsforgeMapReaderMapFile *self);

__attribute__((unused)) static OrgMapsforgeMapReaderMapFile *new_OrgMapsforgeMapReaderMapFile_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapReaderMapFile *create_OrgMapsforgeMapReaderMapFile_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapReaderMapFile)

OrgMapsforgeMapReaderMapFile *OrgMapsforgeMapReaderMapFile_TEST_MAP_FILE;
jboolean OrgMapsforgeMapReaderMapFile_wayFilterEnabled = true;
jint OrgMapsforgeMapReaderMapFile_wayFilterDistance = 20;

@implementation OrgMapsforgeMapReaderMapFile

- (instancetype)initWithJavaIoFile:(JavaIoFile *)mapFile {
  OrgMapsforgeMapReaderMapFile_initWithJavaIoFile_(self, mapFile);
  return self;
}

- (instancetype)initWithNSString:(NSString *)mapFileName {
  OrgMapsforgeMapReaderMapFile_initWithNSString_(self, mapFileName);
  return self;
}

- (OrgMapsforgeCoreModelBoundingBox *)boundingBox {
  return ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->boundingBox_;
}

- (void)close {
  OrgMapsforgeMapReaderMapFile_closeFile(self);
}

- (void)closeFile {
  OrgMapsforgeMapReaderMapFile_closeFile(self);
}

- (OrgMapsforgeMapReaderHeaderMapFileInfo *)getMapFileInfo {
  return [((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getMapFileInfo];
}

- (jlong)getDataTimestampWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  return self->timestamp_;
}

- (OrgMapsforgeMapReaderMapReadResult *)readMapDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  @try {
    OrgMapsforgeMapReaderQueryParameters *queryParameters = create_OrgMapsforgeMapReaderQueryParameters_init();
    queryParameters->queryZoomLevel_ = [((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getQueryZoomLevelWithByte:((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_];
    OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter = [self->mapFileHeader_ getSubFileParameterWithInt:queryParameters->queryZoomLevel_];
    if (subFileParameter == nil) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"no sub-file for zoom level: ", queryParameters->queryZoomLevel_)];
      return nil;
    }
    [queryParameters calculateBaseTilesWithOrgMapsforgeCoreModelTile:tile withOrgMapsforgeMapReaderHeaderSubFileParameter:subFileParameter];
    [queryParameters calculateBlocksWithOrgMapsforgeMapReaderHeaderSubFileParameter:subFileParameter];
    return OrgMapsforgeMapReaderMapFile_processBlocksWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_(self, queryParameters, subFileParameter, [tile getBoundingBox]);
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
    return nil;
  }
}

- (void)restrictToZoomRangeWithByte:(jbyte)minZoom
                           withByte:(jbyte)maxZoom {
  ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->zoomLevelMax_ = maxZoom;
  ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->zoomLevelMin_ = minZoom;
}

- (OrgMapsforgeCoreModelLatLong *)startPosition {
  if (nil != ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->startPosition_) {
    return ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->startPosition_;
  }
  return [((OrgMapsforgeCoreModelBoundingBox *) nil_chk(((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->boundingBox_)) getCenterPoint];
}

- (JavaLangByte *)startZoomLevel {
  if (nil != ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->startZoomLevel_) {
    return ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->startZoomLevel_;
  }
  return OrgMapsforgeMapReaderMapFile_DEFAULT_START_ZOOM_LEVEL;
}

- (jboolean)supportsTileWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  return [((OrgMapsforgeCoreModelBoundingBox *) nil_chk([((OrgMapsforgeCoreModelTile *) nil_chk(tile)) getBoundingBox])) intersectsWithOrgMapsforgeCoreModelBoundingBox:((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self getMapFileInfo]))->boundingBox_];
}

- (void)decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)waySegment
                                                            withDouble:(jdouble)tileLatitude
                                                            withDouble:(jdouble)tileLongitude {
  OrgMapsforgeMapReaderMapFile_decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(self, waySegment, tileLatitude, tileLongitude);
}

- (void)decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)waySegment
                                                            withDouble:(jdouble)tileLatitude
                                                            withDouble:(jdouble)tileLongitude {
  OrgMapsforgeMapReaderMapFile_decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(self, waySegment, tileLatitude, tileLongitude);
}

- (void)logDebugSignaturesWithNSString:(NSString *)signatureBlock
                          withNSString:(NSString *)signatureWay {
  if (((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getMapFileInfo]))->debugFile_) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$$", OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_WAY, signatureWay)];
    [OrgMapsforgeMapReaderMapFile_LOGGER warningWithNSString:JreStrcat("$$", OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_BLOCK, signatureBlock)];
  }
}

- (OrgMapsforgeMapReaderPoiWayBundle *)processBlockWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                            withOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                       withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                                                 withDouble:(jdouble)tileLatitude
                                                                                 withDouble:(jdouble)tileLongitude {
  return OrgMapsforgeMapReaderMapFile_processBlockWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_withDouble_withDouble_(self, queryParameters, subFileParameter, boundingBox, tileLatitude, tileLongitude);
}

- (OrgMapsforgeMapReaderMapReadResult *)processBlocksWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                              withOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                         withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox {
  return OrgMapsforgeMapReaderMapFile_processBlocksWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_(self, queryParameters, subFileParameter, boundingBox);
}

- (jboolean)processBlockSignature {
  return OrgMapsforgeMapReaderMapFile_processBlockSignature(self);
}

- (id<JavaUtilList>)processPOIsWithDouble:(jdouble)tileLatitude
                               withDouble:(jdouble)tileLongitude
                                  withInt:(jint)numberOfPois
     withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                              withBoolean:(jboolean)filterRequired {
  return OrgMapsforgeMapReaderMapFile_processPOIsWithDouble_withDouble_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_(self, tileLatitude, tileLongitude, numberOfPois, boundingBox, filterRequired);
}

- (IOSObjectArray *)processWayDataBlockWithDouble:(jdouble)tileLatitude
                                       withDouble:(jdouble)tileLongitude
                                      withBoolean:(jboolean)doubleDeltaEncoding {
  return OrgMapsforgeMapReaderMapFile_processWayDataBlockWithDouble_withDouble_withBoolean_(self, tileLatitude, tileLongitude, doubleDeltaEncoding);
}

- (id<JavaUtilList>)processWaysWithOrgMapsforgeMapReaderQueryParameters:(OrgMapsforgeMapReaderQueryParameters *)queryParameters
                                                                withInt:(jint)numberOfWays
                                   withOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                            withBoolean:(jboolean)filterRequired
                                                             withDouble:(jdouble)tileLatitude
                                                             withDouble:(jdouble)tileLongitude {
  return OrgMapsforgeMapReaderMapFile_processWaysWithOrgMapsforgeMapReaderQueryParameters_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_withDouble_withDouble_(self, queryParameters, numberOfWays, boundingBox, filterRequired, tileLatitude, tileLongitude);
}

- (OrgMapsforgeCoreModelLatLong *)readOptionalLabelPositionWithDouble:(jdouble)tileLatitude
                                                           withDouble:(jdouble)tileLongitude
                                                          withBoolean:(jboolean)featureLabelPosition {
  return OrgMapsforgeMapReaderMapFile_readOptionalLabelPositionWithDouble_withDouble_withBoolean_(self, tileLatitude, tileLongitude, featureLabelPosition);
}

- (jint)readOptionalWayDataBlocksByteWithBoolean:(jboolean)featureWayDataBlocksByte {
  return OrgMapsforgeMapReaderMapFile_readOptionalWayDataBlocksByteWithBoolean_(self, featureWayDataBlocksByte);
}

- (IOSObjectArray *)readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter {
  return OrgMapsforgeMapReaderMapFile_readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter_(self, subFileParameter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapReaderMapFile_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(databaseIndexCache_);
  RELEASE_(inputFile_);
  RELEASE_(mapFileHeader_);
  RELEASE_(readBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelBoundingBox;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderHeaderMapFileInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapReadResult;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderPoiWayBundle;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapReadResult;", 0x2, 15, 16, 17, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 18, 19, -1, 20, -1, -1 },
    { NULL, "[[LOrgMapsforgeCoreModelLatLong;", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, 23, 24, -1, 25, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x2, 26, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "[[I", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:);
  methods[1].selector = @selector(initWithNSString:);
  methods[2].selector = @selector(boundingBox);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(closeFile);
  methods[5].selector = @selector(getMapFileInfo);
  methods[6].selector = @selector(getDataTimestampWithOrgMapsforgeCoreModelTile:);
  methods[7].selector = @selector(readMapDataWithOrgMapsforgeCoreModelTile:);
  methods[8].selector = @selector(restrictToZoomRangeWithByte:withByte:);
  methods[9].selector = @selector(startPosition);
  methods[10].selector = @selector(startZoomLevel);
  methods[11].selector = @selector(supportsTileWithOrgMapsforgeCoreModelTile:);
  methods[12].selector = @selector(decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray:withDouble:withDouble:);
  methods[13].selector = @selector(decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray:withDouble:withDouble:);
  methods[14].selector = @selector(logDebugSignaturesWithNSString:withNSString:);
  methods[15].selector = @selector(processBlockWithOrgMapsforgeMapReaderQueryParameters:withOrgMapsforgeMapReaderHeaderSubFileParameter:withOrgMapsforgeCoreModelBoundingBox:withDouble:withDouble:);
  methods[16].selector = @selector(processBlocksWithOrgMapsforgeMapReaderQueryParameters:withOrgMapsforgeMapReaderHeaderSubFileParameter:withOrgMapsforgeCoreModelBoundingBox:);
  methods[17].selector = @selector(processBlockSignature);
  methods[18].selector = @selector(processPOIsWithDouble:withDouble:withInt:withOrgMapsforgeCoreModelBoundingBox:withBoolean:);
  methods[19].selector = @selector(processWayDataBlockWithDouble:withDouble:withBoolean:);
  methods[20].selector = @selector(processWaysWithOrgMapsforgeMapReaderQueryParameters:withInt:withOrgMapsforgeCoreModelBoundingBox:withBoolean:withDouble:withDouble:);
  methods[21].selector = @selector(readOptionalLabelPositionWithDouble:withDouble:withBoolean:);
  methods[22].selector = @selector(readOptionalWayDataBlocksByteWithBoolean:);
  methods[23].selector = @selector(readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter:);
  methods[24].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITMASK_INDEX_OFFSET", "J", .constantValue.asLong = OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "BITMASK_INDEX_WATER", "J", .constantValue.asLong = OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_WATER, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_SIGNATURE_BLOCK", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "DEBUG_SIGNATURE_POI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "DEBUG_SIGNATURE_WAY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "DEFAULT_START_ZOOM_LEVEL", "LJavaLangByte;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "INDEX_CACHE_SIZE", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_INDEX_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "INVALID_FIRST_WAY_OFFSET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "POI_FEATURE_ELEVATION", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_FEATURE_ELEVATION, 0x1a, -1, -1, -1, -1 },
    { "POI_FEATURE_HOUSE_NUMBER", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_FEATURE_HOUSE_NUMBER, 0x1a, -1, -1, -1, -1 },
    { "POI_FEATURE_NAME", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_FEATURE_NAME, 0x1a, -1, -1, -1, -1 },
    { "POI_LAYER_BITMASK", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_LAYER_BITMASK, 0x1a, -1, -1, -1, -1 },
    { "POI_LAYER_SHIFT", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_LAYER_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "POI_NUMBER_OF_TAGS_BITMASK", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_POI_NUMBER_OF_TAGS_BITMASK, 0x1a, -1, -1, -1, -1 },
    { "READ_ONLY_MODE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "SIGNATURE_LENGTH_BLOCK", "B", .constantValue.asChar = OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "SIGNATURE_LENGTH_POI", "B", .constantValue.asChar = OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_POI, 0x1a, -1, -1, -1, -1 },
    { "SIGNATURE_LENGTH_WAY", "B", .constantValue.asChar = OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_WAY, 0x1a, -1, -1, -1, -1 },
    { "TAG_KEY_ELE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "TAG_KEY_HOUSE_NUMBER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "TAG_KEY_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "TAG_KEY_REF", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "WAY_FEATURE_DATA_BLOCKS_BYTE", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DATA_BLOCKS_BYTE, 0x1a, -1, -1, -1, -1 },
    { "WAY_FEATURE_DOUBLE_DELTA_ENCODING", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DOUBLE_DELTA_ENCODING, 0x1a, -1, -1, -1, -1 },
    { "WAY_FEATURE_HOUSE_NUMBER", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_HOUSE_NUMBER, 0x1a, -1, -1, -1, -1 },
    { "WAY_FEATURE_LABEL_POSITION", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_LABEL_POSITION, 0x1a, -1, -1, -1, -1 },
    { "WAY_FEATURE_NAME", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_NAME, 0x1a, -1, -1, -1, -1 },
    { "WAY_FEATURE_REF", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_FEATURE_REF, 0x1a, -1, -1, -1, -1 },
    { "WAY_LAYER_BITMASK", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_LAYER_BITMASK, 0x1a, -1, -1, -1, -1 },
    { "WAY_LAYER_SHIFT", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_LAYER_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "WAY_NUMBER_OF_TAGS_BITMASK", "I", .constantValue.asInt = OrgMapsforgeMapReaderMapFile_WAY_NUMBER_OF_TAGS_BITMASK, 0x1a, -1, -1, -1, -1 },
    { "databaseIndexCache_", "LOrgMapsforgeMapReaderIndexCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fileSize_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "inputFile_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapFileHeader_", "LOrgMapsforgeMapReaderHeaderMapFileHeader;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readBuffer_", "LOrgMapsforgeMapReaderReadBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "timestamp_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "TEST_MAP_FILE", "LOrgMapsforgeMapReaderMapFile;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "wayFilterEnabled", "Z", .constantValue.asLong = 0, 0x9, -1, 43, -1, -1 },
    { "wayFilterDistance", "I", .constantValue.asLong = 0, 0x9, -1, 44, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;", "LNSString;", "getDataTimestamp", "LOrgMapsforgeCoreModelTile;", "readMapData", "restrictToZoomRange", "BB", "supportsTile", "decodeWayNodesDoubleDelta", "[LOrgMapsforgeCoreModelLatLong;DD", "decodeWayNodesSingleDelta", "logDebugSignatures", "LNSString;LNSString;", "processBlock", "LOrgMapsforgeMapReaderQueryParameters;LOrgMapsforgeMapReaderHeaderSubFileParameter;LOrgMapsforgeCoreModelBoundingBox;DD", "processBlocks", "LOrgMapsforgeMapReaderQueryParameters;LOrgMapsforgeMapReaderHeaderSubFileParameter;LOrgMapsforgeCoreModelBoundingBox;", "LJavaIoIOException;", "processPOIs", "DDILOrgMapsforgeCoreModelBoundingBox;Z", "(DDILorg/mapsforge/core/model/BoundingBox;Z)Ljava/util/List<Lorg/mapsforge/map/reader/PointOfInterest;>;", "processWayDataBlock", "DDZ", "processWays", "LOrgMapsforgeMapReaderQueryParameters;ILOrgMapsforgeCoreModelBoundingBox;ZDD", "(Lorg/mapsforge/map/reader/QueryParameters;ILorg/mapsforge/core/model/BoundingBox;ZDD)Ljava/util/List<Lorg/mapsforge/map/reader/Way;>;", "readOptionalLabelPosition", "readOptionalWayDataBlocksByte", "Z", "readZoomTable", "LOrgMapsforgeMapReaderHeaderSubFileParameter;", &OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_BLOCK, &OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_POI, &OrgMapsforgeMapReaderMapFile_DEBUG_SIGNATURE_WAY, &OrgMapsforgeMapReaderMapFile_DEFAULT_START_ZOOM_LEVEL, &OrgMapsforgeMapReaderMapFile_INVALID_FIRST_WAY_OFFSET, &OrgMapsforgeMapReaderMapFile_LOGGER, &OrgMapsforgeMapReaderMapFile_READ_ONLY_MODE, &OrgMapsforgeMapReaderMapFile_TAG_KEY_ELE, &OrgMapsforgeMapReaderMapFile_TAG_KEY_HOUSE_NUMBER, &OrgMapsforgeMapReaderMapFile_TAG_KEY_NAME, &OrgMapsforgeMapReaderMapFile_TAG_KEY_REF, &OrgMapsforgeMapReaderMapFile_TEST_MAP_FILE, &OrgMapsforgeMapReaderMapFile_wayFilterEnabled, &OrgMapsforgeMapReaderMapFile_wayFilterDistance };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderMapFile = { "MapFile", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x1, 25, 41, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderMapFile;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapReaderMapFile class]) {
    JreStrongAssign(&OrgMapsforgeMapReaderMapFile_DEFAULT_START_ZOOM_LEVEL, JavaLangByte_valueOfWithByte_((jbyte) 12));
    JreStrongAssign(&OrgMapsforgeMapReaderMapFile_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapReaderMapFile_class_() getName]));
    JreStrongAssignAndConsume(&OrgMapsforgeMapReaderMapFile_TEST_MAP_FILE, new_OrgMapsforgeMapReaderMapFile_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapReaderMapFile)
  }
}

@end

void OrgMapsforgeMapReaderMapFile_initWithJavaIoFile_(OrgMapsforgeMapReaderMapFile *self, JavaIoFile *mapFile) {
  NSObject_init(self);
  if (mapFile == nil) {
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(@"mapFile must not be null");
  }
  @try {
    if (![mapFile exists]) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$@", @"file does not exist: ", mapFile));
    }
    else if (![mapFile isFile]) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$@", @"not a file: ", mapFile));
    }
    else if (![mapFile canRead]) {
      @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_(JreStrcat("$@", @"cannot read file: ", mapFile));
    }
    JreStrongAssignAndConsume(&self->inputFile_, new_JavaIoRandomAccessFile_initWithJavaIoFile_withNSString_(mapFile, OrgMapsforgeMapReaderMapFile_READ_ONLY_MODE));
    self->fileSize_ = [self->inputFile_ length];
    JreStrongAssignAndConsume(&self->readBuffer_, new_OrgMapsforgeMapReaderReadBuffer_initWithJavaIoRandomAccessFile_(self->inputFile_));
    JreStrongAssignAndConsume(&self->mapFileHeader_, new_OrgMapsforgeMapReaderHeaderMapFileHeader_init());
    [self->mapFileHeader_ readHeaderWithOrgMapsforgeMapReaderReadBuffer:self->readBuffer_ withLong:self->fileSize_];
    JreStrongAssignAndConsume(&self->databaseIndexCache_, new_OrgMapsforgeMapReaderIndexCache_initWithJavaIoRandomAccessFile_withInt_(self->inputFile_, OrgMapsforgeMapReaderMapFile_INDEX_CACHE_SIZE));
    self->timestamp_ = [mapFile lastModified];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
    OrgMapsforgeMapReaderMapFile_closeFile(self);
    @throw create_OrgMapsforgeMapReaderHeaderMapFileException_initWithNSString_([e getMessage]);
  }
}

OrgMapsforgeMapReaderMapFile *new_OrgMapsforgeMapReaderMapFile_initWithJavaIoFile_(JavaIoFile *mapFile) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderMapFile, initWithJavaIoFile_, mapFile)
}

OrgMapsforgeMapReaderMapFile *create_OrgMapsforgeMapReaderMapFile_initWithJavaIoFile_(JavaIoFile *mapFile) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderMapFile, initWithJavaIoFile_, mapFile)
}

void OrgMapsforgeMapReaderMapFile_initWithNSString_(OrgMapsforgeMapReaderMapFile *self, NSString *mapFileName) {
  OrgMapsforgeMapReaderMapFile_initWithJavaIoFile_(self, create_JavaIoFile_initWithNSString_(mapFileName));
}

OrgMapsforgeMapReaderMapFile *new_OrgMapsforgeMapReaderMapFile_initWithNSString_(NSString *mapFileName) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderMapFile, initWithNSString_, mapFileName)
}

OrgMapsforgeMapReaderMapFile *create_OrgMapsforgeMapReaderMapFile_initWithNSString_(NSString *mapFileName) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderMapFile, initWithNSString_, mapFileName)
}

void OrgMapsforgeMapReaderMapFile_closeFile(OrgMapsforgeMapReaderMapFile *self) {
  @try {
    [((OrgMapsforgeMapReaderIndexCache *) nil_chk(self->databaseIndexCache_)) destroy];
    [((JavaIoRandomAccessFile *) nil_chk(self->inputFile_)) close];
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
  }
}

void OrgMapsforgeMapReaderMapFile_decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, IOSObjectArray *waySegment, jdouble tileLatitude, jdouble tileLongitude) {
  jdouble wayNodeLatitude = tileLatitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readSignedInt]);
  jdouble wayNodeLongitude = tileLongitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
  IOSObjectArray_SetAndConsume(nil_chk(waySegment), 0, new_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(wayNodeLatitude, wayNodeLongitude));
  jdouble previousSingleDeltaLatitude = 0;
  jdouble previousSingleDeltaLongitude = 0;
  for (jint wayNodesIndex = 1; wayNodesIndex < waySegment->size_; ++wayNodesIndex) {
    jdouble doubleDeltaLatitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    jdouble doubleDeltaLongitude = OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    jdouble singleDeltaLatitude = doubleDeltaLatitude + previousSingleDeltaLatitude;
    jdouble singleDeltaLongitude = doubleDeltaLongitude + previousSingleDeltaLongitude;
    wayNodeLatitude = wayNodeLatitude + singleDeltaLatitude;
    wayNodeLongitude = wayNodeLongitude + singleDeltaLongitude;
    IOSObjectArray_SetAndConsume(waySegment, wayNodesIndex, new_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(wayNodeLatitude, wayNodeLongitude));
    previousSingleDeltaLatitude = singleDeltaLatitude;
    previousSingleDeltaLongitude = singleDeltaLongitude;
  }
}

void OrgMapsforgeMapReaderMapFile_decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, IOSObjectArray *waySegment, jdouble tileLatitude, jdouble tileLongitude) {
  jdouble wayNodeLatitude = tileLatitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readSignedInt]);
  jdouble wayNodeLongitude = tileLongitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
  IOSObjectArray_SetAndConsume(nil_chk(waySegment), 0, new_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(wayNodeLatitude, wayNodeLongitude));
  for (jint wayNodesIndex = 1; wayNodesIndex < waySegment->size_; ++wayNodesIndex) {
    wayNodeLatitude = wayNodeLatitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    wayNodeLongitude = wayNodeLongitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    IOSObjectArray_SetAndConsume(waySegment, wayNodesIndex, new_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(wayNodeLatitude, wayNodeLongitude));
  }
}

OrgMapsforgeMapReaderPoiWayBundle *OrgMapsforgeMapReaderMapFile_processBlockWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, OrgMapsforgeCoreModelBoundingBox *boundingBox, jdouble tileLatitude, jdouble tileLongitude) {
  if (!OrgMapsforgeMapReaderMapFile_processBlockSignature(self)) {
    return nil;
  }
  IOSObjectArray *zoomTable = OrgMapsforgeMapReaderMapFile_readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter_(self, subFileParameter);
  jint zoomTableRow = ((OrgMapsforgeMapReaderQueryParameters *) nil_chk(queryParameters))->queryZoomLevel_ - ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(subFileParameter))->zoomLevelMin_;
  jint poisOnQueryZoomLevel = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(zoomTable), zoomTableRow)), 0);
  jint waysOnQueryZoomLevel = IOSIntArray_Get(nil_chk(IOSObjectArray_Get(zoomTable, zoomTableRow)), 1);
  jint firstWayOffset = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUnsignedInt];
  if (firstWayOffset < 0) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", OrgMapsforgeMapReaderMapFile_INVALID_FIRST_WAY_OFFSET, firstWayOffset)];
    return nil;
  }
  firstWayOffset += [self->readBuffer_ getBufferPosition];
  if (firstWayOffset > [self->readBuffer_ getBufferSize]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", OrgMapsforgeMapReaderMapFile_INVALID_FIRST_WAY_OFFSET, firstWayOffset)];
    return nil;
  }
  jboolean filterRequired = queryParameters->queryZoomLevel_ > subFileParameter->baseZoomLevel_;
  id<JavaUtilList> pois = OrgMapsforgeMapReaderMapFile_processPOIsWithDouble_withDouble_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_(self, tileLatitude, tileLongitude, poisOnQueryZoomLevel, boundingBox, filterRequired);
  if (pois == nil) {
    return nil;
  }
  if ([self->readBuffer_ getBufferPosition] > firstWayOffset) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid buffer position: ", [self->readBuffer_ getBufferPosition])];
    return nil;
  }
  [self->readBuffer_ setBufferPositionWithInt:firstWayOffset];
  id<JavaUtilList> ways = OrgMapsforgeMapReaderMapFile_processWaysWithOrgMapsforgeMapReaderQueryParameters_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_withDouble_withDouble_(self, queryParameters, waysOnQueryZoomLevel, boundingBox, filterRequired, tileLatitude, tileLongitude);
  if (ways == nil) {
    return nil;
  }
  return create_OrgMapsforgeMapReaderPoiWayBundle_initWithJavaUtilList_withJavaUtilList_(pois, ways);
}

OrgMapsforgeMapReaderMapReadResult *OrgMapsforgeMapReaderMapFile_processBlocksWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, OrgMapsforgeCoreModelBoundingBox *boundingBox) {
  jboolean queryIsWater = true;
  jboolean queryReadWaterInfo = false;
  OrgMapsforgeMapReaderMapReadResultBuilder *mapReadResultBuilder = create_OrgMapsforgeMapReaderMapReadResultBuilder_init();
  for (jlong row = ((OrgMapsforgeMapReaderQueryParameters *) nil_chk(queryParameters))->fromBlockY_; row <= queryParameters->toBlockY_; ++row) {
    for (jlong column = queryParameters->fromBlockX_; column <= queryParameters->toBlockX_; ++column) {
      jlong blockNumber = row * ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(subFileParameter))->blocksWidth_ + column;
      jlong currentBlockIndexEntry = [((OrgMapsforgeMapReaderIndexCache *) nil_chk(self->databaseIndexCache_)) getIndexEntryWithOrgMapsforgeMapReaderHeaderSubFileParameter:subFileParameter withLong:blockNumber];
      if (queryIsWater) {
        queryIsWater &= ((currentBlockIndexEntry & OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_WATER) != 0);
        queryReadWaterInfo = true;
      }
      jlong currentBlockPointer = currentBlockIndexEntry & OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_OFFSET;
      if (currentBlockPointer < 1 || currentBlockPointer > subFileParameter->subFileSize_) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$J", @"invalid current block pointer: ", currentBlockPointer)];
        [OrgMapsforgeMapReaderMapFile_LOGGER warningWithNSString:JreStrcat("$J", @"subFileSize: ", subFileParameter->subFileSize_)];
        return nil;
      }
      jlong nextBlockPointer;
      if (blockNumber + 1 == subFileParameter->numberOfBlocks_) {
        nextBlockPointer = subFileParameter->subFileSize_;
      }
      else {
        nextBlockPointer = [self->databaseIndexCache_ getIndexEntryWithOrgMapsforgeMapReaderHeaderSubFileParameter:subFileParameter withLong:blockNumber + 1] & OrgMapsforgeMapReaderMapFile_BITMASK_INDEX_OFFSET;
        if (nextBlockPointer > subFileParameter->subFileSize_) {
          [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$J", @"invalid next block pointer: ", nextBlockPointer)];
          [OrgMapsforgeMapReaderMapFile_LOGGER warningWithNSString:JreStrcat("$J", @"sub-file size: ", subFileParameter->subFileSize_)];
          return nil;
        }
      }
      jint currentBlockSize = (jint) (nextBlockPointer - currentBlockPointer);
      if (currentBlockSize < 0) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"current block size must not be negative: ", currentBlockSize)];
        return nil;
      }
      else if (currentBlockSize == 0) {
        continue;
      }
      else if (currentBlockSize > OrgMapsforgeMapReaderReadBuffer_MAXIMUM_BUFFER_SIZE) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"current block size too large: ", currentBlockSize)];
        continue;
      }
      else if (currentBlockPointer + currentBlockSize > self->fileSize_) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"current block largher than file size: ", currentBlockSize)];
        return nil;
      }
      [((JavaIoRandomAccessFile *) nil_chk(self->inputFile_)) seekWithLong:subFileParameter->startAddress_ + currentBlockPointer];
      if (![((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readFromFileWithInt:currentBlockSize]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"reading current block has failed: ", currentBlockSize)];
        return nil;
      }
      jdouble tileLatitude = OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(subFileParameter->boundaryTileTop_ + row, subFileParameter->baseZoomLevel_);
      jdouble tileLongitude = OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(subFileParameter->boundaryTileLeft_ + column, subFileParameter->baseZoomLevel_);
      @try {
        OrgMapsforgeMapReaderPoiWayBundle *poiWayBundle = OrgMapsforgeMapReaderMapFile_processBlockWithOrgMapsforgeMapReaderQueryParameters_withOrgMapsforgeMapReaderHeaderSubFileParameter_withOrgMapsforgeCoreModelBoundingBox_withDouble_withDouble_(self, queryParameters, subFileParameter, boundingBox, tileLatitude, tileLongitude);
        if (poiWayBundle != nil) {
          [mapReadResultBuilder addWithOrgMapsforgeMapReaderPoiWayBundle:poiWayBundle];
        }
      }
      @catch (JavaLangArrayIndexOutOfBoundsException *e) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
      }
    }
  }
  if (queryIsWater && queryReadWaterInfo) {
    mapReadResultBuilder->isWater_ = true;
  }
  return [mapReadResultBuilder build];
}

jboolean OrgMapsforgeMapReaderMapFile_processBlockSignature(OrgMapsforgeMapReaderMapFile *self) {
  if (((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getMapFileInfo]))->debugFile_) {
    NSString *signatureBlock = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUTF8EncodedStringWithInt:OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_BLOCK];
    if (![((NSString *) nil_chk(signatureBlock)) java_hasPrefix:@"###TileStart"]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$$", @"invalid block signature: ", signatureBlock)];
      return false;
    }
  }
  return true;
}

id<JavaUtilList> OrgMapsforgeMapReaderMapFile_processPOIsWithDouble_withDouble_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jint numberOfPois, OrgMapsforgeCoreModelBoundingBox *boundingBox, jboolean filterRequired) {
  id<JavaUtilList> pois = create_JavaUtilArrayList_init();
  IOSObjectArray *poiTags = ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getMapFileInfo]))->poiTags_;
  for (jint elementCounter = numberOfPois; elementCounter != 0; --elementCounter) {
    if (((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self->mapFileHeader_ getMapFileInfo]))->debugFile_) {
      NSString *signaturePoi = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUTF8EncodedStringWithInt:OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_POI];
      if (![((NSString *) nil_chk(signaturePoi)) java_hasPrefix:@"***POIStart"]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$$", @"invalid POI signature: ", signaturePoi)];
        return nil;
      }
    }
    jdouble latitude = tileLatitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readSignedInt]);
    jdouble longitude = tileLongitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    jbyte specialByte = [self->readBuffer_ readByte];
    jbyte layer = (jbyte) (JreURShift32((specialByte & OrgMapsforgeMapReaderMapFile_POI_LAYER_BITMASK), OrgMapsforgeMapReaderMapFile_POI_LAYER_SHIFT));
    jbyte numberOfTags = (jbyte) (specialByte & OrgMapsforgeMapReaderMapFile_POI_NUMBER_OF_TAGS_BITMASK);
    id<JavaUtilList> tags = create_JavaUtilArrayList_init();
    for (jbyte tagIndex = numberOfTags; tagIndex != 0; --tagIndex) {
      jint tagId = [self->readBuffer_ readUnsignedInt];
      if (tagId < 0 || tagId >= ((IOSObjectArray *) nil_chk(poiTags))->size_) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid POI tag ID: ", tagId)];
        return nil;
      }
      [tags addWithId:IOSObjectArray_Get(nil_chk(poiTags), tagId)];
    }
    jbyte featureByte = [self->readBuffer_ readByte];
    jboolean featureName = (featureByte & OrgMapsforgeMapReaderMapFile_POI_FEATURE_NAME) != 0;
    jboolean featureHouseNumber = (featureByte & OrgMapsforgeMapReaderMapFile_POI_FEATURE_HOUSE_NUMBER) != 0;
    jboolean featureElevation = (featureByte & OrgMapsforgeMapReaderMapFile_POI_FEATURE_ELEVATION) != 0;
    if (featureName) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_NAME, [self->readBuffer_ readUTF8EncodedString])];
    }
    if (featureHouseNumber) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_HOUSE_NUMBER, [self->readBuffer_ readUTF8EncodedString])];
    }
    if (featureElevation) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_ELE, JavaLangInteger_toStringWithInt_([self->readBuffer_ readSignedInt]))];
    }
    OrgMapsforgeCoreModelLatLong *position = create_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(latitude, longitude);
    if (!filterRequired || [((OrgMapsforgeCoreModelBoundingBox *) nil_chk(boundingBox)) containsWithOrgMapsforgeCoreModelLatLong:position]) {
      [pois addWithId:create_OrgMapsforgeMapReaderPointOfInterest_initWithByte_withJavaUtilList_withOrgMapsforgeCoreModelLatLong_(layer, tags, position)];
    }
  }
  return pois;
}

IOSObjectArray *OrgMapsforgeMapReaderMapFile_processWayDataBlockWithDouble_withDouble_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jboolean doubleDeltaEncoding) {
  jint numberOfWayCoordinateBlocks = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUnsignedInt];
  if (numberOfWayCoordinateBlocks < 1 || numberOfWayCoordinateBlocks > JavaLangShort_MAX_VALUE) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid number of way coordinate blocks: ", numberOfWayCoordinateBlocks)];
    return nil;
  }
  IOSObjectArray *wayCoordinates = [IOSObjectArray arrayWithLength:numberOfWayCoordinateBlocks type:IOSClass_arrayType(OrgMapsforgeCoreModelLatLong_class_(), 1)];
  for (jint coordinateBlock = 0; coordinateBlock < numberOfWayCoordinateBlocks; ++coordinateBlock) {
    jint numberOfWayNodes = [self->readBuffer_ readUnsignedInt];
    if (numberOfWayNodes < 2 || numberOfWayNodes > JavaLangShort_MAX_VALUE) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid number of way nodes: ", numberOfWayNodes)];
      return nil;
    }
    IOSObjectArray *waySegment = [IOSObjectArray arrayWithLength:numberOfWayNodes type:OrgMapsforgeCoreModelLatLong_class_()];
    if (doubleDeltaEncoding) {
      OrgMapsforgeMapReaderMapFile_decodeWayNodesDoubleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(self, waySegment, tileLatitude, tileLongitude);
    }
    else {
      OrgMapsforgeMapReaderMapFile_decodeWayNodesSingleDeltaWithOrgMapsforgeCoreModelLatLongArray_withDouble_withDouble_(self, waySegment, tileLatitude, tileLongitude);
    }
    IOSObjectArray_Set(wayCoordinates, coordinateBlock, waySegment);
  }
  return wayCoordinates;
}

id<JavaUtilList> OrgMapsforgeMapReaderMapFile_processWaysWithOrgMapsforgeMapReaderQueryParameters_withInt_withOrgMapsforgeCoreModelBoundingBox_withBoolean_withDouble_withDouble_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderQueryParameters *queryParameters, jint numberOfWays, OrgMapsforgeCoreModelBoundingBox *boundingBox, jboolean filterRequired, jdouble tileLatitude, jdouble tileLongitude) {
  id<JavaUtilList> ways = create_JavaUtilArrayList_init();
  IOSObjectArray *wayTags = ((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([((OrgMapsforgeMapReaderHeaderMapFileHeader *) nil_chk(self->mapFileHeader_)) getMapFileInfo]))->wayTags_;
  OrgMapsforgeCoreModelBoundingBox *wayFilterBbox = [((OrgMapsforgeCoreModelBoundingBox *) nil_chk(boundingBox)) extendWithInt:OrgMapsforgeMapReaderMapFile_wayFilterDistance];
  for (jint elementCounter = numberOfWays; elementCounter != 0; --elementCounter) {
    if (((OrgMapsforgeMapReaderHeaderMapFileInfo *) nil_chk([self->mapFileHeader_ getMapFileInfo]))->debugFile_) {
      NSString *signatureWay = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUTF8EncodedStringWithInt:OrgMapsforgeMapReaderMapFile_SIGNATURE_LENGTH_WAY];
      if (![((NSString *) nil_chk(signatureWay)) java_hasPrefix:@"---WayStart"]) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$$", @"invalid way signature: ", signatureWay)];
        return nil;
      }
    }
    jint wayDataSize = [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUnsignedInt];
    if (wayDataSize < 0) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid way data size: ", wayDataSize)];
      return nil;
    }
    if (((OrgMapsforgeMapReaderQueryParameters *) nil_chk(queryParameters))->useTileBitmask_) {
      jint tileBitmask = [self->readBuffer_ readShort];
      if ((queryParameters->queryTileBitmask_ & tileBitmask) == 0) {
        [self->readBuffer_ skipBytesWithInt:wayDataSize - 2];
        continue;
      }
    }
    else {
      [self->readBuffer_ skipBytesWithInt:2];
    }
    jbyte specialByte = [self->readBuffer_ readByte];
    jbyte layer = (jbyte) (JreURShift32((specialByte & OrgMapsforgeMapReaderMapFile_WAY_LAYER_BITMASK), OrgMapsforgeMapReaderMapFile_WAY_LAYER_SHIFT));
    jbyte numberOfTags = (jbyte) (specialByte & OrgMapsforgeMapReaderMapFile_WAY_NUMBER_OF_TAGS_BITMASK);
    id<JavaUtilList> tags = create_JavaUtilArrayList_init();
    for (jbyte tagIndex = numberOfTags; tagIndex != 0; --tagIndex) {
      jint tagId = [self->readBuffer_ readUnsignedInt];
      if (tagId < 0 || tagId >= ((IOSObjectArray *) nil_chk(wayTags))->size_) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid way tag ID: ", tagId)];
        return nil;
      }
      [tags addWithId:IOSObjectArray_Get(nil_chk(wayTags), tagId)];
    }
    jbyte featureByte = [self->readBuffer_ readByte];
    jboolean featureName = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_NAME) != 0;
    jboolean featureHouseNumber = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_HOUSE_NUMBER) != 0;
    jboolean featureRef = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_REF) != 0;
    jboolean featureLabelPosition = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_LABEL_POSITION) != 0;
    jboolean featureWayDataBlocksByte = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DATA_BLOCKS_BYTE) != 0;
    jboolean featureWayDoubleDeltaEncoding = (featureByte & OrgMapsforgeMapReaderMapFile_WAY_FEATURE_DOUBLE_DELTA_ENCODING) != 0;
    if (featureName) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_NAME, [self->readBuffer_ readUTF8EncodedString])];
    }
    if (featureHouseNumber) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_HOUSE_NUMBER, [self->readBuffer_ readUTF8EncodedString])];
    }
    if (featureRef) {
      [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(OrgMapsforgeMapReaderMapFile_TAG_KEY_REF, [self->readBuffer_ readUTF8EncodedString])];
    }
    OrgMapsforgeCoreModelLatLong *labelPosition = OrgMapsforgeMapReaderMapFile_readOptionalLabelPositionWithDouble_withDouble_withBoolean_(self, tileLatitude, tileLongitude, featureLabelPosition);
    jint wayDataBlocks = OrgMapsforgeMapReaderMapFile_readOptionalWayDataBlocksByteWithBoolean_(self, featureWayDataBlocksByte);
    if (wayDataBlocks < 1) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderMapFile_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid number of way data blocks: ", wayDataBlocks)];
      return nil;
    }
    for (jint wayDataBlock = 0; wayDataBlock < wayDataBlocks; ++wayDataBlock) {
      IOSObjectArray *wayNodes = OrgMapsforgeMapReaderMapFile_processWayDataBlockWithDouble_withDouble_withBoolean_(self, tileLatitude, tileLongitude, featureWayDoubleDeltaEncoding);
      if (wayNodes != nil) {
        if (filterRequired && OrgMapsforgeMapReaderMapFile_wayFilterEnabled && ![((OrgMapsforgeCoreModelBoundingBox *) nil_chk(wayFilterBbox)) intersectsAreaWithOrgMapsforgeCoreModelLatLongArray2:wayNodes]) {
          continue;
        }
        [ways addWithId:create_OrgMapsforgeMapReaderWay_initWithByte_withJavaUtilList_withOrgMapsforgeCoreModelLatLongArray2_withOrgMapsforgeCoreModelLatLong_(layer, tags, wayNodes, labelPosition)];
      }
    }
  }
  return ways;
}

OrgMapsforgeCoreModelLatLong *OrgMapsforgeMapReaderMapFile_readOptionalLabelPositionWithDouble_withDouble_withBoolean_(OrgMapsforgeMapReaderMapFile *self, jdouble tileLatitude, jdouble tileLongitude, jboolean featureLabelPosition) {
  if (featureLabelPosition) {
    jdouble latitude = tileLatitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readSignedInt]);
    jdouble longitude = tileLongitude + OrgMapsforgeCoreUtilLatLongUtils_microdegreesToDegreesWithInt_([self->readBuffer_ readSignedInt]);
    return create_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_(latitude, longitude);
  }
  return nil;
}

jint OrgMapsforgeMapReaderMapFile_readOptionalWayDataBlocksByteWithBoolean_(OrgMapsforgeMapReaderMapFile *self, jboolean featureWayDataBlocksByte) {
  if (featureWayDataBlocksByte) {
    return [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUnsignedInt];
  }
  return 1;
}

IOSObjectArray *OrgMapsforgeMapReaderMapFile_readZoomTableWithOrgMapsforgeMapReaderHeaderSubFileParameter_(OrgMapsforgeMapReaderMapFile *self, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter) {
  jint rows = ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(subFileParameter))->zoomLevelMax_ - subFileParameter->zoomLevelMin_ + 1;
  IOSObjectArray *zoomTable = [IOSIntArray arrayWithDimensions:2 lengths:(jint[]){ rows, 2 }];
  jint cumulatedNumberOfPois = 0;
  jint cumulatedNumberOfWays = 0;
  for (jint row = 0; row < rows; ++row) {
    cumulatedNumberOfPois += [((OrgMapsforgeMapReaderReadBuffer *) nil_chk(self->readBuffer_)) readUnsignedInt];
    cumulatedNumberOfWays += [self->readBuffer_ readUnsignedInt];
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(zoomTable, row)), 0) = cumulatedNumberOfPois;
    *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(zoomTable, row)), 1) = cumulatedNumberOfWays;
  }
  return zoomTable;
}

void OrgMapsforgeMapReaderMapFile_init(OrgMapsforgeMapReaderMapFile *self) {
  NSObject_init(self);
  JreStrongAssign(&self->databaseIndexCache_, nil);
  self->fileSize_ = 0;
  JreStrongAssign(&self->inputFile_, nil);
  JreStrongAssign(&self->mapFileHeader_, nil);
  JreStrongAssign(&self->readBuffer_, nil);
  self->timestamp_ = JavaLangSystem_currentTimeMillis();
}

OrgMapsforgeMapReaderMapFile *new_OrgMapsforgeMapReaderMapFile_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderMapFile, init)
}

OrgMapsforgeMapReaderMapFile *create_OrgMapsforgeMapReaderMapFile_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderMapFile, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderMapFile)
