//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/Deserializer.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/mapsforge/map/reader/Deserializer.h"

@interface OrgMapsforgeMapReaderDeserializer ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapReaderDeserializer_init(OrgMapsforgeMapReaderDeserializer *self);

__attribute__((unused)) static OrgMapsforgeMapReaderDeserializer *new_OrgMapsforgeMapReaderDeserializer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapReaderDeserializer *create_OrgMapsforgeMapReaderDeserializer_init();

@implementation OrgMapsforgeMapReaderDeserializer

+ (jlong)getFiveBytesLongWithByteArray:(IOSByteArray *)buffer
                               withInt:(jint)offset {
  return OrgMapsforgeMapReaderDeserializer_getFiveBytesLongWithByteArray_withInt_(buffer, offset);
}

+ (jint)getIntWithByteArray:(IOSByteArray *)buffer
                    withInt:(jint)offset {
  return OrgMapsforgeMapReaderDeserializer_getIntWithByteArray_withInt_(buffer, offset);
}

+ (jlong)getLongWithByteArray:(IOSByteArray *)buffer
                      withInt:(jint)offset {
  return OrgMapsforgeMapReaderDeserializer_getLongWithByteArray_withInt_(buffer, offset);
}

+ (jint)getShortWithByteArray:(IOSByteArray *)buffer
                      withInt:(jint)offset {
  return OrgMapsforgeMapReaderDeserializer_getShortWithByteArray_withInt_(buffer, offset);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapReaderDeserializer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x8, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 4, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getFiveBytesLongWithByteArray:withInt:);
  methods[1].selector = @selector(getIntWithByteArray:withInt:);
  methods[2].selector = @selector(getLongWithByteArray:withInt:);
  methods[3].selector = @selector(getShortWithByteArray:withInt:);
  methods[4].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getFiveBytesLong", "[BI", "getInt", "getLong", "getShort" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderDeserializer = { "Deserializer", "org.mapsforge.map.reader", ptrTable, methods, NULL, 7, 0x10, 5, 0, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderDeserializer;
}

@end

jlong OrgMapsforgeMapReaderDeserializer_getFiveBytesLongWithByteArray_withInt_(IOSByteArray *buffer, jint offset) {
  OrgMapsforgeMapReaderDeserializer_initialize();
  return (JreLShift64((IOSByteArray_Get(nil_chk(buffer), offset) & (jlong) 0xffLL), 32)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 1) & (jlong) 0xffLL), 24)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 2) & (jlong) 0xffLL), 16)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 3) & (jlong) 0xffLL), 8)) | (IOSByteArray_Get(buffer, offset + 4) & (jlong) 0xffLL);
}

jint OrgMapsforgeMapReaderDeserializer_getIntWithByteArray_withInt_(IOSByteArray *buffer, jint offset) {
  OrgMapsforgeMapReaderDeserializer_initialize();
  return (JreLShift32(IOSByteArray_Get(nil_chk(buffer), offset), 24)) | (JreLShift32((IOSByteArray_Get(buffer, offset + 1) & (jint) 0xff), 16)) | (JreLShift32((IOSByteArray_Get(buffer, offset + 2) & (jint) 0xff), 8)) | (IOSByteArray_Get(buffer, offset + 3) & (jint) 0xff);
}

jlong OrgMapsforgeMapReaderDeserializer_getLongWithByteArray_withInt_(IOSByteArray *buffer, jint offset) {
  OrgMapsforgeMapReaderDeserializer_initialize();
  return (JreLShift64((IOSByteArray_Get(nil_chk(buffer), offset) & (jlong) 0xffLL), 56)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 1) & (jlong) 0xffLL), 48)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 2) & (jlong) 0xffLL), 40)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 3) & (jlong) 0xffLL), 32)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 4) & (jlong) 0xffLL), 24)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 5) & (jlong) 0xffLL), 16)) | (JreLShift64((IOSByteArray_Get(buffer, offset + 6) & (jlong) 0xffLL), 8)) | (IOSByteArray_Get(buffer, offset + 7) & (jlong) 0xffLL);
}

jint OrgMapsforgeMapReaderDeserializer_getShortWithByteArray_withInt_(IOSByteArray *buffer, jint offset) {
  OrgMapsforgeMapReaderDeserializer_initialize();
  return (JreLShift32(IOSByteArray_Get(nil_chk(buffer), offset), 8)) | (IOSByteArray_Get(buffer, offset + 1) & (jint) 0xff);
}

void OrgMapsforgeMapReaderDeserializer_init(OrgMapsforgeMapReaderDeserializer *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapReaderDeserializer *new_OrgMapsforgeMapReaderDeserializer_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderDeserializer, init)
}

OrgMapsforgeMapReaderDeserializer *create_OrgMapsforgeMapReaderDeserializer_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderDeserializer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderDeserializer)
