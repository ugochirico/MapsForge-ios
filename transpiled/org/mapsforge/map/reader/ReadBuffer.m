//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/ReadBuffer.java
//

#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/RandomAccessFile.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/map/reader/Deserializer.h"
#include "org/mapsforge/map/reader/ReadBuffer.h"

@interface OrgMapsforgeMapReaderReadBuffer () {
 @public
  IOSByteArray *bufferData_;
  jint bufferPosition_;
  JavaIoRandomAccessFile *inputFile_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderReadBuffer, bufferData_, IOSByteArray *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderReadBuffer, inputFile_, JavaIoRandomAccessFile *)

inline NSString *OrgMapsforgeMapReaderReadBuffer_get_CHARSET_UTF8();
static NSString *OrgMapsforgeMapReaderReadBuffer_CHARSET_UTF8 = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderReadBuffer, CHARSET_UTF8, NSString *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapReaderReadBuffer_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapReaderReadBuffer_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapReaderReadBuffer, LOGGER, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapReaderReadBuffer)

@implementation OrgMapsforgeMapReaderReadBuffer

- (instancetype)initWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)inputFile {
  OrgMapsforgeMapReaderReadBuffer_initWithJavaIoRandomAccessFile_(self, inputFile);
  return self;
}

- (jbyte)readByte {
  return IOSByteArray_Get(nil_chk(self->bufferData_), self->bufferPosition_++);
}

- (jboolean)readFromFileWithInt:(jint)length {
  if (self->bufferData_ == nil || self->bufferData_->size_ < length) {
    if (length > OrgMapsforgeMapReaderReadBuffer_MAXIMUM_BUFFER_SIZE) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderReadBuffer_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid read length: ", length)];
      return false;
    }
    JreStrongAssignAndConsume(&self->bufferData_, [IOSByteArray newArrayWithLength:length]);
  }
  self->bufferPosition_ = 0;
  return [((JavaIoRandomAccessFile *) nil_chk(self->inputFile_)) readWithByteArray:self->bufferData_ withInt:0 withInt:length] == length;
}

- (jint)readInt {
  self->bufferPosition_ += 4;
  return OrgMapsforgeMapReaderDeserializer_getIntWithByteArray_withInt_(self->bufferData_, self->bufferPosition_ - 4);
}

- (jlong)readLong {
  self->bufferPosition_ += 8;
  return OrgMapsforgeMapReaderDeserializer_getLongWithByteArray_withInt_(self->bufferData_, self->bufferPosition_ - 8);
}

- (jint)readShort {
  self->bufferPosition_ += 2;
  return OrgMapsforgeMapReaderDeserializer_getShortWithByteArray_withInt_(self->bufferData_, self->bufferPosition_ - 2);
}

- (jint)readSignedInt {
  jint variableByteDecode = 0;
  jbyte variableByteShift = 0;
  while ((IOSByteArray_Get(nil_chk(self->bufferData_), self->bufferPosition_) & (jint) 0x80) != 0) {
    variableByteDecode |= JreLShift32((IOSByteArray_Get(self->bufferData_, self->bufferPosition_++) & (jint) 0x7f), variableByteShift);
    variableByteShift += 7;
  }
  if ((IOSByteArray_Get(self->bufferData_, self->bufferPosition_) & (jint) 0x40) != 0) {
    return -(variableByteDecode | (JreLShift32((IOSByteArray_Get(self->bufferData_, self->bufferPosition_++) & (jint) 0x3f), variableByteShift)));
  }
  return variableByteDecode | (JreLShift32((IOSByteArray_Get(self->bufferData_, self->bufferPosition_++) & (jint) 0x3f), variableByteShift));
}

- (jint)readUnsignedInt {
  jint variableByteDecode = 0;
  jbyte variableByteShift = 0;
  while ((IOSByteArray_Get(nil_chk(self->bufferData_), self->bufferPosition_) & (jint) 0x80) != 0) {
    variableByteDecode |= JreLShift32((IOSByteArray_Get(self->bufferData_, self->bufferPosition_++) & (jint) 0x7f), variableByteShift);
    variableByteShift += 7;
  }
  return variableByteDecode | (JreLShift32(IOSByteArray_Get(self->bufferData_, self->bufferPosition_++), variableByteShift));
}

- (NSString *)readUTF8EncodedString {
  return [self readUTF8EncodedStringWithInt:[self readUnsignedInt]];
}

- (NSString *)readUTF8EncodedStringWithInt:(jint)stringLength {
  if (stringLength > 0 && self->bufferPosition_ + stringLength <= ((IOSByteArray *) nil_chk(self->bufferData_))->size_) {
    self->bufferPosition_ += stringLength;
    @try {
      return [NSString java_stringWithBytes:self->bufferData_ offset:self->bufferPosition_ - stringLength length:stringLength charsetName:OrgMapsforgeMapReaderReadBuffer_CHARSET_UTF8];
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw create_JavaLangIllegalStateException_initWithNSException_(e);
    }
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapReaderReadBuffer_LOGGER)) warningWithNSString:JreStrcat("$I", @"invalid string length: ", stringLength)];
  return nil;
}

- (jint)getBufferPosition {
  return self->bufferPosition_;
}

- (jint)getBufferSize {
  return ((IOSByteArray *) nil_chk(self->bufferData_))->size_;
}

- (void)setBufferPositionWithInt:(jint)bufferPosition {
  self->bufferPosition_ = bufferPosition;
}

- (void)skipBytesWithInt:(jint)bytes {
  self->bufferPosition_ += bytes;
}

- (void)dealloc {
  RELEASE_(bufferData_);
  RELEASE_(inputFile_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoRandomAccessFile:);
  methods[1].selector = @selector(readByte);
  methods[2].selector = @selector(readFromFileWithInt:);
  methods[3].selector = @selector(readInt);
  methods[4].selector = @selector(readLong);
  methods[5].selector = @selector(readShort);
  methods[6].selector = @selector(readSignedInt);
  methods[7].selector = @selector(readUnsignedInt);
  methods[8].selector = @selector(readUTF8EncodedString);
  methods[9].selector = @selector(readUTF8EncodedStringWithInt:);
  methods[10].selector = @selector(getBufferPosition);
  methods[11].selector = @selector(getBufferSize);
  methods[12].selector = @selector(setBufferPositionWithInt:);
  methods[13].selector = @selector(skipBytesWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAXIMUM_BUFFER_SIZE", "I", .constantValue.asInt = OrgMapsforgeMapReaderReadBuffer_MAXIMUM_BUFFER_SIZE, 0x18, -1, -1, -1, -1 },
    { "CHARSET_UTF8", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "bufferData_", "[B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bufferPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inputFile_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoRandomAccessFile;", "readFromFile", "I", "LJavaIoIOException;", "readUTF8EncodedString", "setBufferPosition", "skipBytes", &OrgMapsforgeMapReaderReadBuffer_CHARSET_UTF8, &OrgMapsforgeMapReaderReadBuffer_LOGGER };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderReadBuffer = { "ReadBuffer", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x1, 14, 6, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderReadBuffer;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapReaderReadBuffer class]) {
    JreStrongAssign(&OrgMapsforgeMapReaderReadBuffer_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapReaderReadBuffer_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapReaderReadBuffer)
  }
}

@end

void OrgMapsforgeMapReaderReadBuffer_initWithJavaIoRandomAccessFile_(OrgMapsforgeMapReaderReadBuffer *self, JavaIoRandomAccessFile *inputFile) {
  NSObject_init(self);
  JreStrongAssign(&self->inputFile_, inputFile);
}

OrgMapsforgeMapReaderReadBuffer *new_OrgMapsforgeMapReaderReadBuffer_initWithJavaIoRandomAccessFile_(JavaIoRandomAccessFile *inputFile) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderReadBuffer, initWithJavaIoRandomAccessFile_, inputFile)
}

OrgMapsforgeMapReaderReadBuffer *create_OrgMapsforgeMapReaderReadBuffer_initWithJavaIoRandomAccessFile_(JavaIoRandomAccessFile *inputFile) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderReadBuffer, initWithJavaIoRandomAccessFile_, inputFile)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderReadBuffer)
