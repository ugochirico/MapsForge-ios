//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/MultiMapDataStore.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/reader/MapDataStore.h"
#include "org/mapsforge/map/reader/MapReadResult.h"
#include "org/mapsforge/map/reader/MapReadResultBuilder.h"
#include "org/mapsforge/map/reader/MultiMapDataStore.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/reader/Way.h"

@interface OrgMapsforgeMapReaderMultiMapDataStore () {
 @public
  OrgMapsforgeCoreModelBoundingBox *boundingBox_;
  OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *dataPolicy_;
  id<JavaUtilList> mapDatabases_;
  OrgMapsforgeCoreModelLatLong *startPosition_;
  jbyte startZoomLevel_;
}

- (OrgMapsforgeMapReaderMapReadResult *)readMapDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                                                     withBoolean:(jboolean)deduplicate;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMultiMapDataStore, boundingBox_, OrgMapsforgeCoreModelBoundingBox *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMultiMapDataStore, dataPolicy_, OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMultiMapDataStore, mapDatabases_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderMultiMapDataStore, startPosition_, OrgMapsforgeCoreModelLatLong *)

__attribute__((unused)) static OrgMapsforgeMapReaderMapReadResult *OrgMapsforgeMapReaderMultiMapDataStore_readMapDataWithOrgMapsforgeCoreModelTile_withBoolean_(OrgMapsforgeMapReaderMultiMapDataStore *self, OrgMapsforgeCoreModelTile *tile, jboolean deduplicate);

__attribute__((unused)) static void OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initWithNSString_withInt_(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *self, NSString *__name, jint __ordinal);

@implementation OrgMapsforgeMapReaderMultiMapDataStore

- (instancetype)initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy:(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *)dataPolicy {
  OrgMapsforgeMapReaderMultiMapDataStore_initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_(self, dataPolicy);
  return self;
}

- (void)addMapDataStoreWithOrgMapsforgeMapReaderMapDataStore:(id<OrgMapsforgeMapReaderMapDataStore>)mapDataStore
                                                 withBoolean:(jboolean)useStartZoomLevel
                                                 withBoolean:(jboolean)useStartPosition {
  if ([((id<JavaUtilList>) nil_chk(self->mapDatabases_)) containsWithId:mapDataStore]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Duplicate map database");
  }
  [self->mapDatabases_ addWithId:mapDataStore];
  if (useStartZoomLevel) {
    self->startZoomLevel_ = [((JavaLangByte *) nil_chk([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mapDataStore)) startZoomLevel])) charValue];
  }
  if (useStartPosition) {
    JreStrongAssign(&self->startPosition_, [((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mapDataStore)) startPosition]);
  }
  if (nil == self->boundingBox_) {
    JreStrongAssign(&self->boundingBox_, [((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mapDataStore)) boundingBox]);
  }
  else {
    JreStrongAssign(&self->boundingBox_, [self->boundingBox_ extendWithOrgMapsforgeCoreModelBoundingBox:[((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mapDataStore)) boundingBox]]);
  }
}

- (OrgMapsforgeCoreModelBoundingBox *)boundingBox {
  return self->boundingBox_;
}

- (void)close {
  for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(mapDatabases_)) {
    [((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) close];
  }
}

- (jlong)getDataTimestampWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  {
    jlong result;
    switch ([self->dataPolicy_ ordinal]) {
      case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_RETURN_FIRST:
      for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(mapDatabases_)) {
        if ([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) supportsTileWithOrgMapsforgeCoreModelTile:tile]) {
          return [mdb getDataTimestampWithOrgMapsforgeCoreModelTile:tile];
        }
      }
      return 0;
      case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_RETURN_ALL:
      case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_DEDUPLICATE:
      result = 0;
      for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(mapDatabases_)) {
        if ([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) supportsTileWithOrgMapsforgeCoreModelTile:tile]) {
          result = JavaLangMath_maxWithLong_withLong_(result, [mdb getDataTimestampWithOrgMapsforgeCoreModelTile:tile]);
        }
      }
      return result;
    }
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Invalid data policy for multi map database");
}

- (OrgMapsforgeMapReaderMapReadResult *)readMapDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  switch ([self->dataPolicy_ ordinal]) {
    case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_RETURN_FIRST:
    for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(mapDatabases_)) {
      if ([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) supportsTileWithOrgMapsforgeCoreModelTile:tile]) {
        return [mdb readMapDataWithOrgMapsforgeCoreModelTile:tile];
      }
    }
    return nil;
    case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_RETURN_ALL:
    return OrgMapsforgeMapReaderMultiMapDataStore_readMapDataWithOrgMapsforgeCoreModelTile_withBoolean_(self, tile, false);
    case OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_Enum_DEDUPLICATE:
    return OrgMapsforgeMapReaderMultiMapDataStore_readMapDataWithOrgMapsforgeCoreModelTile_withBoolean_(self, tile, true);
  }
  @throw create_JavaLangIllegalStateException_initWithNSString_(@"Invalid data policy for multi map database");
}

- (OrgMapsforgeCoreModelLatLong *)startPosition {
  if (nil != self->startPosition_) {
    return self->startPosition_;
  }
  if (nil != self->boundingBox_) {
    return [self->boundingBox_ getCenterPoint];
  }
  return nil;
}

- (void)setStartPositionWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)startPosition {
  JreStrongAssign(&self->startPosition_, startPosition);
}

- (JavaLangByte *)startZoomLevel {
  return JavaLangByte_valueOfWithByte_(startZoomLevel_);
}

- (void)setStartZoomLevelWithByte:(jbyte)startZoomLevel {
  self->startZoomLevel_ = startZoomLevel;
}

- (jboolean)supportsTileWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(mapDatabases_)) {
    if ([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) supportsTileWithOrgMapsforgeCoreModelTile:tile]) {
      return true;
    }
  }
  return false;
}

- (OrgMapsforgeMapReaderMapReadResult *)readMapDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                                                     withBoolean:(jboolean)deduplicate {
  return OrgMapsforgeMapReaderMultiMapDataStore_readMapDataWithOrgMapsforgeCoreModelTile_withBoolean_(self, tile, deduplicate);
}

- (void)dealloc {
  RELEASE_(boundingBox_);
  RELEASE_(dataPolicy_);
  RELEASE_(mapDatabases_);
  RELEASE_(startPosition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelBoundingBox;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapReadResult;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapReadResult;", 0x2, 5, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy:);
  methods[1].selector = @selector(addMapDataStoreWithOrgMapsforgeMapReaderMapDataStore:withBoolean:withBoolean:);
  methods[2].selector = @selector(boundingBox);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(getDataTimestampWithOrgMapsforgeCoreModelTile:);
  methods[5].selector = @selector(readMapDataWithOrgMapsforgeCoreModelTile:);
  methods[6].selector = @selector(startPosition);
  methods[7].selector = @selector(setStartPositionWithOrgMapsforgeCoreModelLatLong:);
  methods[8].selector = @selector(startZoomLevel);
  methods[9].selector = @selector(setStartZoomLevelWithByte:);
  methods[10].selector = @selector(supportsTileWithOrgMapsforgeCoreModelTile:);
  methods[11].selector = @selector(readMapDataWithOrgMapsforgeCoreModelTile:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "boundingBox_", "LOrgMapsforgeCoreModelBoundingBox;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dataPolicy_", "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapDatabases_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "startPosition_", "LOrgMapsforgeCoreModelLatLong;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "startZoomLevel_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", "addMapDataStore", "LOrgMapsforgeMapReaderMapDataStore;ZZ", "getDataTimestamp", "LOrgMapsforgeCoreModelTile;", "readMapData", "setStartPosition", "LOrgMapsforgeCoreModelLatLong;", "setStartZoomLevel", "B", "supportsTile", "LOrgMapsforgeCoreModelTile;Z", "Ljava/util/List<Lorg/mapsforge/map/reader/MapDataStore;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderMultiMapDataStore = { "MultiMapDataStore", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, 0, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderMultiMapDataStore;
}

@end

void OrgMapsforgeMapReaderMultiMapDataStore_initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_(OrgMapsforgeMapReaderMultiMapDataStore *self, OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *dataPolicy) {
  NSObject_init(self);
  JreStrongAssign(&self->dataPolicy_, dataPolicy);
  JreStrongAssignAndConsume(&self->mapDatabases_, new_JavaUtilArrayList_init());
}

OrgMapsforgeMapReaderMultiMapDataStore *new_OrgMapsforgeMapReaderMultiMapDataStore_initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *dataPolicy) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderMultiMapDataStore, initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_, dataPolicy)
}

OrgMapsforgeMapReaderMultiMapDataStore *create_OrgMapsforgeMapReaderMultiMapDataStore_initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *dataPolicy) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderMultiMapDataStore, initWithOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_, dataPolicy)
}

OrgMapsforgeMapReaderMapReadResult *OrgMapsforgeMapReaderMultiMapDataStore_readMapDataWithOrgMapsforgeCoreModelTile_withBoolean_(OrgMapsforgeMapReaderMultiMapDataStore *self, OrgMapsforgeCoreModelTile *tile, jboolean deduplicate) {
  OrgMapsforgeMapReaderMapReadResultBuilder *mapReadResultBuilder = create_OrgMapsforgeMapReaderMapReadResultBuilder_init();
  jboolean first = true;
  for (id<OrgMapsforgeMapReaderMapDataStore> __strong mdb in nil_chk(self->mapDatabases_)) {
    if ([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(mdb)) supportsTileWithOrgMapsforgeCoreModelTile:tile]) {
      OrgMapsforgeMapReaderMapReadResult *result = [mdb readMapDataWithOrgMapsforgeCoreModelTile:tile];
      mapReadResultBuilder->isWater_ &= ((OrgMapsforgeMapReaderMapReadResult *) nil_chk(result))->isWater_;
      if (first) {
        [((id<JavaUtilList>) nil_chk(mapReadResultBuilder->ways_)) addAllWithJavaUtilCollection:result->ways_];
      }
      else {
        if (deduplicate) {
          for (OrgMapsforgeMapReaderWay * __strong way in nil_chk(result->ways_)) {
            if (![((id<JavaUtilList>) nil_chk(mapReadResultBuilder->ways_)) containsWithId:way]) {
              [mapReadResultBuilder->ways_ addWithId:way];
            }
          }
        }
        else {
          [((id<JavaUtilList>) nil_chk(mapReadResultBuilder->ways_)) addAllWithJavaUtilCollection:result->ways_];
        }
      }
      if (first) {
        [((id<JavaUtilList>) nil_chk(mapReadResultBuilder->pointOfInterests_)) addAllWithJavaUtilCollection:result->pointOfInterests_];
      }
      else {
        if (deduplicate) {
          for (OrgMapsforgeMapReaderPointOfInterest * __strong poi in nil_chk(result->pointOfInterests_)) {
            if (![((id<JavaUtilList>) nil_chk(mapReadResultBuilder->pointOfInterests_)) containsWithId:poi]) {
              [mapReadResultBuilder->pointOfInterests_ addWithId:poi];
            }
          }
        }
        else {
          [((id<JavaUtilList>) nil_chk(mapReadResultBuilder->pointOfInterests_)) addAllWithJavaUtilCollection:result->pointOfInterests_];
        }
      }
      first = false;
    }
  }
  return create_OrgMapsforgeMapReaderMapReadResult_initWithOrgMapsforgeMapReaderMapReadResultBuilder_(mapReadResultBuilder);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderMultiMapDataStore)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy)

OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values_[3];

@implementation OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy

+ (IOSObjectArray *)values {
  return OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values();
}

+ (OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RETURN_FIRST", "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "RETURN_ALL", "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "DEDUPLICATE", "LOrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy, RETURN_FIRST), &JreEnum(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy, RETURN_ALL), &JreEnum(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy, DEDUPLICATE), "LOrgMapsforgeMapReaderMultiMapDataStore;", "Ljava/lang/Enum<Lorg/mapsforge/map/reader/MultiMapDataStore$DataPolicy;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy = { "DataPolicy", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"RETURN_FIRST", @"RETURN_ALL", @"DEDUPLICATE",
    };
    for (jint i = 0; i < 3; i++) {
      (OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy)
  }
}

@end

void OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initWithNSString_withInt_(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values() {
  OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values_ count:3 type:OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_class_()];
}

OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initialize();
  for (int i = 0; i < 3; i++) {
    OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *e = OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy *OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderMultiMapDataStore_DataPolicy)
