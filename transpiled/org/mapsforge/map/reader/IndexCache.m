//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/IndexCache.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/RandomAccessFile.h"
#include "java/lang/Math.h"
#include "java/util/Map.h"
#include "org/mapsforge/core/util/LRUCache.h"
#include "org/mapsforge/map/reader/Deserializer.h"
#include "org/mapsforge/map/reader/IndexCache.h"
#include "org/mapsforge/map/reader/IndexCacheEntryKey.h"
#include "org/mapsforge/map/reader/header/SubFileParameter.h"

@interface OrgMapsforgeMapReaderIndexCache () {
 @public
  id<JavaUtilMap> map_;
  JavaIoRandomAccessFile *randomAccessFile_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderIndexCache, map_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderIndexCache, randomAccessFile_, JavaIoRandomAccessFile *)

inline jint OrgMapsforgeMapReaderIndexCache_get_INDEX_ENTRIES_PER_BLOCK();
#define OrgMapsforgeMapReaderIndexCache_INDEX_ENTRIES_PER_BLOCK 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderIndexCache, INDEX_ENTRIES_PER_BLOCK, jint)

inline jint OrgMapsforgeMapReaderIndexCache_get_SIZE_OF_INDEX_BLOCK();
#define OrgMapsforgeMapReaderIndexCache_SIZE_OF_INDEX_BLOCK 640
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapReaderIndexCache, SIZE_OF_INDEX_BLOCK, jint)

@implementation OrgMapsforgeMapReaderIndexCache

- (instancetype)initWithJavaIoRandomAccessFile:(JavaIoRandomAccessFile *)randomAccessFile
                                       withInt:(jint)capacity {
  OrgMapsforgeMapReaderIndexCache_initWithJavaIoRandomAccessFile_withInt_(self, randomAccessFile, capacity);
  return self;
}

- (void)destroy {
  [((id<JavaUtilMap>) nil_chk(self->map_)) clear];
}

- (jlong)getIndexEntryWithOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                             withLong:(jlong)blockNumber {
  if (blockNumber >= ((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(subFileParameter))->numberOfBlocks_) {
    @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$J", @"invalid block number: ", blockNumber));
  }
  jlong indexBlockNumber = blockNumber / OrgMapsforgeMapReaderIndexCache_INDEX_ENTRIES_PER_BLOCK;
  OrgMapsforgeMapReaderIndexCacheEntryKey *indexCacheEntryKey = create_OrgMapsforgeMapReaderIndexCacheEntryKey_initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_(subFileParameter, indexBlockNumber);
  IOSByteArray *indexBlock = [((id<JavaUtilMap>) nil_chk(self->map_)) getWithId:indexCacheEntryKey];
  if (indexBlock == nil) {
    jlong indexBlockPosition = subFileParameter->indexStartAddress_ + indexBlockNumber * OrgMapsforgeMapReaderIndexCache_SIZE_OF_INDEX_BLOCK;
    jint remainingIndexSize = (jint) (subFileParameter->indexEndAddress_ - indexBlockPosition);
    jint indexBlockSize = JavaLangMath_minWithInt_withInt_(OrgMapsforgeMapReaderIndexCache_SIZE_OF_INDEX_BLOCK, remainingIndexSize);
    indexBlock = [IOSByteArray arrayWithLength:indexBlockSize];
    [((JavaIoRandomAccessFile *) nil_chk(self->randomAccessFile_)) seekWithLong:indexBlockPosition];
    if ([self->randomAccessFile_ readWithByteArray:indexBlock withInt:0 withInt:indexBlockSize] != indexBlockSize) {
      @throw create_JavaIoIOException_initWithNSString_(JreStrcat("$I", @"could not read index block with size: ", indexBlockSize));
    }
    [self->map_ putWithId:indexCacheEntryKey withId:indexBlock];
  }
  jlong indexEntryInBlock = blockNumber % OrgMapsforgeMapReaderIndexCache_INDEX_ENTRIES_PER_BLOCK;
  jint addressInIndexBlock = (jint) (indexEntryInBlock * OrgMapsforgeMapReaderHeaderSubFileParameter_BYTES_PER_INDEX_ENTRY);
  return OrgMapsforgeMapReaderDeserializer_getFiveBytesLongWithByteArray_withInt_(indexBlock, addressInIndexBlock);
}

- (void)dealloc {
  RELEASE_(map_);
  RELEASE_(randomAccessFile_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 1, 2, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoRandomAccessFile:withInt:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getIndexEntryWithOrgMapsforgeMapReaderHeaderSubFileParameter:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INDEX_ENTRIES_PER_BLOCK", "I", .constantValue.asInt = OrgMapsforgeMapReaderIndexCache_INDEX_ENTRIES_PER_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "SIZE_OF_INDEX_BLOCK", "I", .constantValue.asInt = OrgMapsforgeMapReaderIndexCache_SIZE_OF_INDEX_BLOCK, 0x1a, -1, -1, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
    { "randomAccessFile_", "LJavaIoRandomAccessFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoRandomAccessFile;I", "getIndexEntry", "LOrgMapsforgeMapReaderHeaderSubFileParameter;J", "LJavaIoIOException;", "Ljava/util/Map<Lorg/mapsforge/map/reader/IndexCacheEntryKey;[B>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderIndexCache = { "IndexCache", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x0, 3, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderIndexCache;
}

@end

void OrgMapsforgeMapReaderIndexCache_initWithJavaIoRandomAccessFile_withInt_(OrgMapsforgeMapReaderIndexCache *self, JavaIoRandomAccessFile *randomAccessFile, jint capacity) {
  NSObject_init(self);
  JreStrongAssign(&self->randomAccessFile_, randomAccessFile);
  JreStrongAssignAndConsume(&self->map_, new_OrgMapsforgeCoreUtilLRUCache_initWithInt_(capacity));
}

OrgMapsforgeMapReaderIndexCache *new_OrgMapsforgeMapReaderIndexCache_initWithJavaIoRandomAccessFile_withInt_(JavaIoRandomAccessFile *randomAccessFile, jint capacity) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderIndexCache, initWithJavaIoRandomAccessFile_withInt_, randomAccessFile, capacity)
}

OrgMapsforgeMapReaderIndexCache *create_OrgMapsforgeMapReaderIndexCache_initWithJavaIoRandomAccessFile_withInt_(JavaIoRandomAccessFile *randomAccessFile, jint capacity) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderIndexCache, initWithJavaIoRandomAccessFile_withInt_, randomAccessFile, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderIndexCache)
