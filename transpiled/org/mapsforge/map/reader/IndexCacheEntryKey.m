//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/reader/IndexCacheEntryKey.java
//

#include "J2ObjC_source.h"
#include "org/mapsforge/map/reader/IndexCacheEntryKey.h"
#include "org/mapsforge/map/reader/header/SubFileParameter.h"

@interface OrgMapsforgeMapReaderIndexCacheEntryKey () {
 @public
  jint hashCodeValue_;
  jlong indexBlockNumber_;
  OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter_;
}

- (jint)calculateHashCode;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapReaderIndexCacheEntryKey, subFileParameter_, OrgMapsforgeMapReaderHeaderSubFileParameter *)

__attribute__((unused)) static jint OrgMapsforgeMapReaderIndexCacheEntryKey_calculateHashCode(OrgMapsforgeMapReaderIndexCacheEntryKey *self);

@implementation OrgMapsforgeMapReaderIndexCacheEntryKey

- (instancetype)initWithOrgMapsforgeMapReaderHeaderSubFileParameter:(OrgMapsforgeMapReaderHeaderSubFileParameter *)subFileParameter
                                                           withLong:(jlong)indexBlockNumber {
  OrgMapsforgeMapReaderIndexCacheEntryKey_initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_(self, subFileParameter, indexBlockNumber);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeMapReaderIndexCacheEntryKey class]])) {
    return false;
  }
  OrgMapsforgeMapReaderIndexCacheEntryKey *other = (OrgMapsforgeMapReaderIndexCacheEntryKey *) cast_chk(obj, [OrgMapsforgeMapReaderIndexCacheEntryKey class]);
  if (self->subFileParameter_ == nil && ((OrgMapsforgeMapReaderIndexCacheEntryKey *) nil_chk(other))->subFileParameter_ != nil) {
    return false;
  }
  else if (self->subFileParameter_ != nil && ![self->subFileParameter_ isEqual:((OrgMapsforgeMapReaderIndexCacheEntryKey *) nil_chk(other))->subFileParameter_]) {
    return false;
  }
  else if (self->indexBlockNumber_ != ((OrgMapsforgeMapReaderIndexCacheEntryKey *) nil_chk(other))->indexBlockNumber_) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  return self->hashCodeValue_;
}

- (jint)calculateHashCode {
  return OrgMapsforgeMapReaderIndexCacheEntryKey_calculateHashCode(self);
}

- (void)dealloc {
  RELEASE_(subFileParameter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapReaderHeaderSubFileParameter:withLong:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(calculateHashCode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hashCodeValue_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "indexBlockNumber_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "subFileParameter_", "LOrgMapsforgeMapReaderHeaderSubFileParameter;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapReaderHeaderSubFileParameter;J", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgMapsforgeMapReaderIndexCacheEntryKey = { "IndexCacheEntryKey", "org.mapsforge.map.reader", ptrTable, methods, fields, 7, 0x0, 4, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapReaderIndexCacheEntryKey;
}

@end

void OrgMapsforgeMapReaderIndexCacheEntryKey_initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_(OrgMapsforgeMapReaderIndexCacheEntryKey *self, OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, jlong indexBlockNumber) {
  NSObject_init(self);
  JreStrongAssign(&self->subFileParameter_, subFileParameter);
  self->indexBlockNumber_ = indexBlockNumber;
  self->hashCodeValue_ = OrgMapsforgeMapReaderIndexCacheEntryKey_calculateHashCode(self);
}

OrgMapsforgeMapReaderIndexCacheEntryKey *new_OrgMapsforgeMapReaderIndexCacheEntryKey_initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_(OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, jlong indexBlockNumber) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapReaderIndexCacheEntryKey, initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_, subFileParameter, indexBlockNumber)
}

OrgMapsforgeMapReaderIndexCacheEntryKey *create_OrgMapsforgeMapReaderIndexCacheEntryKey_initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_(OrgMapsforgeMapReaderHeaderSubFileParameter *subFileParameter, jlong indexBlockNumber) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapReaderIndexCacheEntryKey, initWithOrgMapsforgeMapReaderHeaderSubFileParameter_withLong_, subFileParameter, indexBlockNumber)
}

jint OrgMapsforgeMapReaderIndexCacheEntryKey_calculateHashCode(OrgMapsforgeMapReaderIndexCacheEntryKey *self) {
  jint result = 7;
  result = 31 * result + ((self->subFileParameter_ == nil) ? 0 : ((jint) [((OrgMapsforgeMapReaderHeaderSubFileParameter *) nil_chk(self->subFileParameter_)) hash]));
  result = 31 * result + (jint) (self->indexBlockNumber_ ^ (JreURShift64(self->indexBlockNumber_, 32)));
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapReaderIndexCacheEntryKey)
