//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/model/DisplayModel.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/common/Observable.h"

@interface OrgMapsforgeMapModelDisplayModel () {
 @public
  jint backgroundColor_;
  jint fixedTileSize_;
  jint maxTextWidth_;
  jfloat maxTextWidthFactor_;
  jint tileSize_;
  jint tileSizeMultiple_;
  jfloat userScaleFactor_;
}

- (void)setMaxTextWidth;

- (void)setTileSize;

@end

inline jint OrgMapsforgeMapModelDisplayModel_get_DEFAULT_BACKGROUND_COLOR();
#define OrgMapsforgeMapModelDisplayModel_DEFAULT_BACKGROUND_COLOR -1118482
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapModelDisplayModel, DEFAULT_BACKGROUND_COLOR, jint)

inline jint OrgMapsforgeMapModelDisplayModel_get_DEFAULT_TILE_SIZE();
#define OrgMapsforgeMapModelDisplayModel_DEFAULT_TILE_SIZE 256
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapModelDisplayModel, DEFAULT_TILE_SIZE, jint)

inline jfloat OrgMapsforgeMapModelDisplayModel_get_DEFAULT_MAX_TEXT_WIDTH_FACTOR();
#define OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH_FACTOR 0.7f
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapModelDisplayModel, DEFAULT_MAX_TEXT_WIDTH_FACTOR, jfloat)

inline jint OrgMapsforgeMapModelDisplayModel_get_DEFAULT_MAX_TEXT_WIDTH();
#define OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH 179
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapModelDisplayModel, DEFAULT_MAX_TEXT_WIDTH, jint)

inline jfloat OrgMapsforgeMapModelDisplayModel_get_defaultUserScaleFactor();
inline jfloat OrgMapsforgeMapModelDisplayModel_set_defaultUserScaleFactor(jfloat value);
inline jfloat *OrgMapsforgeMapModelDisplayModel_getRef_defaultUserScaleFactor();
static jfloat OrgMapsforgeMapModelDisplayModel_defaultUserScaleFactor = 1.0f;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgMapsforgeMapModelDisplayModel, defaultUserScaleFactor, jfloat)

inline jfloat OrgMapsforgeMapModelDisplayModel_get_deviceScaleFactor();
inline jfloat OrgMapsforgeMapModelDisplayModel_set_deviceScaleFactor(jfloat value);
inline jfloat *OrgMapsforgeMapModelDisplayModel_getRef_deviceScaleFactor();
static jfloat OrgMapsforgeMapModelDisplayModel_deviceScaleFactor = 1.0f;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgMapsforgeMapModelDisplayModel, deviceScaleFactor, jfloat)

__attribute__((unused)) static void OrgMapsforgeMapModelDisplayModel_setMaxTextWidth(OrgMapsforgeMapModelDisplayModel *self);

__attribute__((unused)) static void OrgMapsforgeMapModelDisplayModel_setTileSize(OrgMapsforgeMapModelDisplayModel *self);

@implementation OrgMapsforgeMapModelDisplayModel

+ (jfloat)getDefaultUserScaleFactor {
  return OrgMapsforgeMapModelDisplayModel_getDefaultUserScaleFactor();
}

+ (jfloat)getDeviceScaleFactor {
  return OrgMapsforgeMapModelDisplayModel_getDeviceScaleFactor();
}

+ (void)setDefaultUserScaleFactorWithFloat:(jfloat)scaleFactor {
  OrgMapsforgeMapModelDisplayModel_setDefaultUserScaleFactorWithFloat_(scaleFactor);
}

+ (void)setDeviceScaleFactorWithFloat:(jfloat)scaleFactor {
  OrgMapsforgeMapModelDisplayModel_setDeviceScaleFactorWithFloat_(scaleFactor);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapModelDisplayModel_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isEqual:(id)obj {
  if (self == obj) return true;
  if (!([obj isKindOfClass:[OrgMapsforgeMapModelDisplayModel class]])) return false;
  OrgMapsforgeMapModelDisplayModel *other = (OrgMapsforgeMapModelDisplayModel *) cast_chk(obj, [OrgMapsforgeMapModelDisplayModel class]);
  if (self->backgroundColor_ != ((OrgMapsforgeMapModelDisplayModel *) nil_chk(other))->backgroundColor_) return false;
  if (self->fixedTileSize_ != other->fixedTileSize_) return false;
  if (self->maxTextWidth_ != other->maxTextWidth_) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(self->maxTextWidthFactor_) != JavaLangFloat_floatToIntBitsWithFloat_(other->maxTextWidthFactor_)) return false;
  if (self->tileSize_ != other->tileSize_) return false;
  if (self->tileSizeMultiple_ != other->tileSizeMultiple_) return false;
  if (JavaLangFloat_floatToIntBitsWithFloat_(self->userScaleFactor_) != JavaLangFloat_floatToIntBitsWithFloat_(other->userScaleFactor_)) return false;
  return true;
}

- (jint)getBackgroundColor {
  @synchronized(self) {
    return backgroundColor_;
  }
}

- (jint)getMaxTextWidth {
  return maxTextWidth_;
}

- (jfloat)getScaleFactor {
  @synchronized(self) {
    return OrgMapsforgeMapModelDisplayModel_deviceScaleFactor * self->userScaleFactor_;
  }
}

- (jint)getTileSize {
  @synchronized(self) {
    return tileSize_;
  }
}

- (jint)getTileSizeMultiple {
  @synchronized(self) {
    return self->tileSizeMultiple_;
  }
}

- (jfloat)getUserScaleFactor {
  @synchronized(self) {
    return self->userScaleFactor_;
  }
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + self->backgroundColor_;
  result = prime * result + self->fixedTileSize_;
  result = prime * result + self->maxTextWidth_;
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(self->maxTextWidthFactor_);
  result = prime * result + self->tileSize_;
  result = prime * result + self->tileSizeMultiple_;
  result = prime * result + JavaLangFloat_floatToIntBitsWithFloat_(self->userScaleFactor_);
  return result;
}

- (void)setBackgroundColorWithInt:(jint)color {
  @synchronized(self) {
    self->backgroundColor_ = color;
  }
}

- (void)setFixedTileSizeWithInt:(jint)tileSize {
  self->fixedTileSize_ = tileSize;
  OrgMapsforgeMapModelDisplayModel_setTileSize(self);
}

- (void)setMaxTextWidthFactorWithFloat:(jfloat)maxTextWidthFactor {
  self->maxTextWidthFactor_ = maxTextWidthFactor;
  OrgMapsforgeMapModelDisplayModel_setMaxTextWidth(self);
}

- (void)setTileSizeMultipleWithInt:(jint)multiple {
  @synchronized(self) {
    self->tileSizeMultiple_ = multiple;
    OrgMapsforgeMapModelDisplayModel_setTileSize(self);
  }
}

- (void)setUserScaleFactorWithFloat:(jfloat)scaleFactor {
  @synchronized(self) {
    userScaleFactor_ = scaleFactor;
    OrgMapsforgeMapModelDisplayModel_setTileSize(self);
  }
}

- (void)setMaxTextWidth {
  OrgMapsforgeMapModelDisplayModel_setMaxTextWidth(self);
}

- (void)setTileSize {
  OrgMapsforgeMapModelDisplayModel_setTileSize(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "F", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x29, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x29, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getDefaultUserScaleFactor);
  methods[1].selector = @selector(getDeviceScaleFactor);
  methods[2].selector = @selector(setDefaultUserScaleFactorWithFloat:);
  methods[3].selector = @selector(setDeviceScaleFactorWithFloat:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(isEqual:);
  methods[6].selector = @selector(getBackgroundColor);
  methods[7].selector = @selector(getMaxTextWidth);
  methods[8].selector = @selector(getScaleFactor);
  methods[9].selector = @selector(getTileSize);
  methods[10].selector = @selector(getTileSizeMultiple);
  methods[11].selector = @selector(getUserScaleFactor);
  methods[12].selector = @selector(hash);
  methods[13].selector = @selector(setBackgroundColorWithInt:);
  methods[14].selector = @selector(setFixedTileSizeWithInt:);
  methods[15].selector = @selector(setMaxTextWidthFactorWithFloat:);
  methods[16].selector = @selector(setTileSizeMultipleWithInt:);
  methods[17].selector = @selector(setUserScaleFactorWithFloat:);
  methods[18].selector = @selector(setMaxTextWidth);
  methods[19].selector = @selector(setTileSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_BACKGROUND_COLOR", "I", .constantValue.asInt = OrgMapsforgeMapModelDisplayModel_DEFAULT_BACKGROUND_COLOR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_TILE_SIZE", "I", .constantValue.asInt = OrgMapsforgeMapModelDisplayModel_DEFAULT_TILE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MAX_TEXT_WIDTH_FACTOR", "F", .constantValue.asFloat = OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH_FACTOR, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MAX_TEXT_WIDTH", "I", .constantValue.asInt = OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "defaultUserScaleFactor", "F", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "deviceScaleFactor", "F", .constantValue.asLong = 0, 0xa, -1, 13, -1, -1 },
    { "backgroundColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fixedTileSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxTextWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxTextWidthFactor_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileSizeMultiple_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userScaleFactor_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDefaultUserScaleFactor", "F", "setDeviceScaleFactor", "equals", "LNSObject;", "hashCode", "setBackgroundColor", "I", "setFixedTileSize", "setMaxTextWidthFactor", "setTileSizeMultiple", "setUserScaleFactor", &OrgMapsforgeMapModelDisplayModel_defaultUserScaleFactor, &OrgMapsforgeMapModelDisplayModel_deviceScaleFactor };
  static const J2ObjcClassInfo _OrgMapsforgeMapModelDisplayModel = { "DisplayModel", "org.mapsforge.map.model", ptrTable, methods, fields, 7, 0x1, 20, 13, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapModelDisplayModel;
}

@end

jfloat OrgMapsforgeMapModelDisplayModel_getDefaultUserScaleFactor() {
  OrgMapsforgeMapModelDisplayModel_initialize();
  @synchronized(OrgMapsforgeMapModelDisplayModel_class_()) {
    return OrgMapsforgeMapModelDisplayModel_defaultUserScaleFactor;
  }
}

jfloat OrgMapsforgeMapModelDisplayModel_getDeviceScaleFactor() {
  OrgMapsforgeMapModelDisplayModel_initialize();
  @synchronized(OrgMapsforgeMapModelDisplayModel_class_()) {
    return OrgMapsforgeMapModelDisplayModel_deviceScaleFactor;
  }
}

void OrgMapsforgeMapModelDisplayModel_setDefaultUserScaleFactorWithFloat_(jfloat scaleFactor) {
  OrgMapsforgeMapModelDisplayModel_initialize();
  @synchronized(OrgMapsforgeMapModelDisplayModel_class_()) {
    OrgMapsforgeMapModelDisplayModel_defaultUserScaleFactor = scaleFactor;
  }
}

void OrgMapsforgeMapModelDisplayModel_setDeviceScaleFactorWithFloat_(jfloat scaleFactor) {
  OrgMapsforgeMapModelDisplayModel_initialize();
  @synchronized(OrgMapsforgeMapModelDisplayModel_class_()) {
    OrgMapsforgeMapModelDisplayModel_deviceScaleFactor = scaleFactor;
  }
}

void OrgMapsforgeMapModelDisplayModel_init(OrgMapsforgeMapModelDisplayModel *self) {
  OrgMapsforgeMapModelCommonObservable_init(self);
  self->backgroundColor_ = OrgMapsforgeMapModelDisplayModel_DEFAULT_BACKGROUND_COLOR;
  self->maxTextWidth_ = OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH;
  self->maxTextWidthFactor_ = OrgMapsforgeMapModelDisplayModel_DEFAULT_MAX_TEXT_WIDTH_FACTOR;
  self->tileSize_ = OrgMapsforgeMapModelDisplayModel_DEFAULT_TILE_SIZE;
  self->tileSizeMultiple_ = 64;
  self->userScaleFactor_ = OrgMapsforgeMapModelDisplayModel_defaultUserScaleFactor;
  OrgMapsforgeMapModelDisplayModel_setTileSize(self);
}

OrgMapsforgeMapModelDisplayModel *new_OrgMapsforgeMapModelDisplayModel_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapModelDisplayModel, init)
}

OrgMapsforgeMapModelDisplayModel *create_OrgMapsforgeMapModelDisplayModel_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapModelDisplayModel, init)
}

void OrgMapsforgeMapModelDisplayModel_setMaxTextWidth(OrgMapsforgeMapModelDisplayModel *self) {
  self->maxTextWidth_ = JreFpToInt((self->tileSize_ * self->maxTextWidthFactor_));
}

void OrgMapsforgeMapModelDisplayModel_setTileSize(OrgMapsforgeMapModelDisplayModel *self) {
  if (self->fixedTileSize_ == 0) {
    jfloat temp = OrgMapsforgeMapModelDisplayModel_DEFAULT_TILE_SIZE * OrgMapsforgeMapModelDisplayModel_deviceScaleFactor * self->userScaleFactor_;
    self->tileSize_ = JavaLangMath_maxWithInt_withInt_(self->tileSizeMultiple_, JavaLangMath_roundWithFloat_(temp / self->tileSizeMultiple_) * self->tileSizeMultiple_);
  }
  else {
    self->tileSize_ = self->fixedTileSize_;
  }
  OrgMapsforgeMapModelDisplayModel_setMaxTextWidth(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapModelDisplayModel)
