//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/model/common/Observable.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "org/mapsforge/map/model/common/Observable.h"
#include "org/mapsforge/map/model/common/Observer.h"

@interface OrgMapsforgeMapModelCommonObservable () {
 @public
  id<JavaUtilList> observers_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapModelCommonObservable, observers_, id<JavaUtilList>)

inline NSString *OrgMapsforgeMapModelCommonObservable_get_OBSERVER_MUST_NOT_BE_NULL();
static NSString *OrgMapsforgeMapModelCommonObservable_OBSERVER_MUST_NOT_BE_NULL = @"observer must not be null";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapModelCommonObservable, OBSERVER_MUST_NOT_BE_NULL, NSString *)

@implementation OrgMapsforgeMapModelCommonObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapModelCommonObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addObserverWithOrgMapsforgeMapModelCommonObserver:(id<OrgMapsforgeMapModelCommonObserver>)observer {
  if (observer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgMapsforgeMapModelCommonObservable_OBSERVER_MUST_NOT_BE_NULL);
  }
  else if ([((id<JavaUtilList>) nil_chk(self->observers_)) containsWithId:observer]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"observer is already registered: ", observer));
  }
  [self->observers_ addWithId:observer];
}

- (void)removeObserverWithOrgMapsforgeMapModelCommonObserver:(id<OrgMapsforgeMapModelCommonObserver>)observer {
  if (observer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(OrgMapsforgeMapModelCommonObservable_OBSERVER_MUST_NOT_BE_NULL);
  }
  else if (![((id<JavaUtilList>) nil_chk(self->observers_)) containsWithId:observer]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"observer is not registered: ", observer));
  }
  [self->observers_ removeWithId:observer];
}

- (void)notifyObservers {
  for (id<OrgMapsforgeMapModelCommonObserver> __strong observer in nil_chk(self->observers_)) {
    [((id<OrgMapsforgeMapModelCommonObserver>) nil_chk(observer)) onChange];
  }
}

- (void)dealloc {
  RELEASE_(observers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x14, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addObserverWithOrgMapsforgeMapModelCommonObserver:);
  methods[2].selector = @selector(removeObserverWithOrgMapsforgeMapModelCommonObserver:);
  methods[3].selector = @selector(notifyObservers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "OBSERVER_MUST_NOT_BE_NULL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 3, -1, -1 },
    { "observers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "addObserver", "LOrgMapsforgeMapModelCommonObserver;", "removeObserver", &OrgMapsforgeMapModelCommonObservable_OBSERVER_MUST_NOT_BE_NULL, "Ljava/util/List<Lorg/mapsforge/map/model/common/Observer;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapModelCommonObservable = { "Observable", "org.mapsforge.map.model.common", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapModelCommonObservable;
}

@end

void OrgMapsforgeMapModelCommonObservable_init(OrgMapsforgeMapModelCommonObservable *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->observers_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
}

OrgMapsforgeMapModelCommonObservable *new_OrgMapsforgeMapModelCommonObservable_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapModelCommonObservable, init)
}

OrgMapsforgeMapModelCommonObservable *create_OrgMapsforgeMapModelCommonObservable_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapModelCommonObservable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapModelCommonObservable)
