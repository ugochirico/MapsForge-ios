//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/ElementNodeMatcher.java
//

#include "J2ObjC_source.h"
#include "org/mapsforge/map/rendertheme/rule/Element.h"
#include "org/mapsforge/map/rendertheme/rule/ElementMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/ElementNodeMatcher.h"

@interface OrgMapsforgeMapRenderthemeRuleElementNodeMatcher ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *self);

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *new_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *create_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher)

OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_INSTANCE;

@implementation OrgMapsforgeMapRenderthemeRuleElementNodeMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isCoveredByWithOrgMapsforgeMapRenderthemeRuleElementMatcher:(id<OrgMapsforgeMapRenderthemeRuleElementMatcher>)elementMatcher {
  return [((id<OrgMapsforgeMapRenderthemeRuleElementMatcher>) nil_chk(elementMatcher)) matchesWithOrgMapsforgeMapRenderthemeRuleElement:JreLoadEnum(OrgMapsforgeMapRenderthemeRuleElement, NODE)];
}

- (jboolean)matchesWithOrgMapsforgeMapRenderthemeRuleElement:(OrgMapsforgeMapRenderthemeRuleElement *)element {
  return element == JreLoadEnum(OrgMapsforgeMapRenderthemeRuleElement, NODE);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isCoveredByWithOrgMapsforgeMapRenderthemeRuleElementMatcher:);
  methods[2].selector = @selector(matchesWithOrgMapsforgeMapRenderthemeRuleElement:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgMapsforgeMapRenderthemeRuleElementNodeMatcher;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "isCoveredBy", "LOrgMapsforgeMapRenderthemeRuleElementMatcher;", "matches", "LOrgMapsforgeMapRenderthemeRuleElement;", &OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_INSTANCE };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleElementNodeMatcher = { "ElementNodeMatcher", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x10, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleElementNodeMatcher class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_INSTANCE, new_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *self) {
  NSObject_init(self);
}

OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *new_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher, init)
}

OrgMapsforgeMapRenderthemeRuleElementNodeMatcher *create_OrgMapsforgeMapRenderthemeRuleElementNodeMatcher_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleElementNodeMatcher)
