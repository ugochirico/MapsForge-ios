//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/RenderTheme.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/LRUCache.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/mapsforge/map/rendertheme/rule/Closed.h"
#include "org/mapsforge/map/rendertheme/rule/MatchingCacheKey.h"
#include "org/mapsforge/map/rendertheme/rule/RenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeBuilder.h"
#include "org/mapsforge/map/rendertheme/rule/Rule.h"

@interface OrgMapsforgeMapRenderthemeRuleRenderTheme () {
 @public
  jfloat baseStrokeWidth_;
  jfloat baseTextSize_;
  jboolean hasBackgroundOutside_;
  jint levels_;
  jint mapBackground_;
  jint mapBackgroundOutside_;
  OrgMapsforgeCoreUtilLRUCache *wayMatchingCache_;
  OrgMapsforgeCoreUtilLRUCache *poiMatchingCache_;
  JavaUtilConcurrentAtomicAtomicInteger *refCount_;
  JavaUtilArrayList *rulesList_;
  jfloat textScale_;
  jfloat strokeWidthScale_;
}

- (void)matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
           withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                    withOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderTheme, wayMatchingCache_, OrgMapsforgeCoreUtilLRUCache *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderTheme, poiMatchingCache_, OrgMapsforgeCoreUtilLRUCache *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderTheme, refCount_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderTheme, rulesList_, JavaUtilArrayList *)

inline jint OrgMapsforgeMapRenderthemeRuleRenderTheme_get_MATCHING_CACHE_SIZE();
#define OrgMapsforgeMapRenderthemeRuleRenderTheme_MATCHING_CACHE_SIZE 1024
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderTheme, MATCHING_CACHE_SIZE, jint)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderTheme_matchWayWithOrgMapsforgeMapRenderthemeRenderCallback_withOrgMapsforgeMapLayerRendererPolylineContainer_withOrgMapsforgeMapRenderthemeRuleClosed_(OrgMapsforgeMapRenderthemeRuleRenderTheme *self, id<OrgMapsforgeMapRenderthemeRenderCallback> renderCallback, OrgMapsforgeMapLayerRendererPolylineContainer *way, OrgMapsforgeMapRenderthemeRuleClosed *closed);

@implementation OrgMapsforgeMapRenderthemeRuleRenderTheme

- (instancetype)initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder:(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *)renderThemeBuilder {
  OrgMapsforgeMapRenderthemeRuleRenderTheme_initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_(self, renderThemeBuilder);
  return self;
}

- (void)destroy {
  if ([((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) decrementAndGet] < 0) {
    [((OrgMapsforgeCoreUtilLRUCache *) nil_chk(self->poiMatchingCache_)) clear];
    [((OrgMapsforgeCoreUtilLRUCache *) nil_chk(self->wayMatchingCache_)) clear];
    for (OrgMapsforgeMapRenderthemeRuleRule * __strong r in nil_chk(self->rulesList_)) {
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(r)) destroy];
    }
  }
}

- (jint)getLevels {
  return self->levels_;
}

- (jint)getMapBackground {
  return self->mapBackground_;
}

- (jint)getMapBackgroundOutside {
  return self->mapBackgroundOutside_;
}

- (jboolean)hasMapBackgroundOutside {
  return self->hasBackgroundOutside_;
}

- (void)incrementRefCount {
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->refCount_)) incrementAndGet];
}

- (void)matchClosedWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                 withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  OrgMapsforgeMapRenderthemeRuleRenderTheme_matchWayWithOrgMapsforgeMapRenderthemeRenderCallback_withOrgMapsforgeMapLayerRendererPolylineContainer_withOrgMapsforgeMapRenderthemeRuleClosed_(self, renderCallback, way, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleClosed, YES));
}

- (void)matchLinearWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                 withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  OrgMapsforgeMapRenderthemeRuleRenderTheme_matchWayWithOrgMapsforgeMapRenderthemeRenderCallback_withOrgMapsforgeMapLayerRendererPolylineContainer_withOrgMapsforgeMapRenderthemeRuleClosed_(self, renderCallback, way, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleClosed, NO));
}

- (void)matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                     withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapRenderthemeRuleMatchingCacheKey *matchingCacheKey = create_OrgMapsforgeMapRenderthemeRuleMatchingCacheKey_initWithJavaUtilList_withByte_withOrgMapsforgeMapRenderthemeRuleClosed_(((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(poi))->tags_, ((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleClosed, NO));
  id<JavaUtilList> matchingList = [((OrgMapsforgeCoreUtilLRUCache *) nil_chk(self->poiMatchingCache_)) getWithId:matchingCacheKey];
  if (matchingList != nil) {
    for (jint i = 0, n = [matchingList size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([matchingList getWithInt:i])) renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapReaderPointOfInterest:poi withOrgMapsforgeCoreModelTile:tile];
    }
    return;
  }
  matchingList = create_JavaUtilArrayList_init();
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->rulesList_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->rulesList_ getWithInt:i])) matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapReaderPointOfInterest:poi withOrgMapsforgeCoreModelTile:tile withJavaUtilList:matchingList];
  }
  [self->poiMatchingCache_ putWithId:matchingCacheKey withId:matchingList];
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
  if (self->strokeWidthScale_ != scaleFactor) {
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->rulesList_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->rulesList_ getWithInt:i])) scaleStrokeWidthWithFloat:scaleFactor * self->baseStrokeWidth_];
    }
    self->strokeWidthScale_ = scaleFactor;
  }
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
  if (self->textScale_ != scaleFactor) {
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->rulesList_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->rulesList_ getWithInt:i])) scaleTextSizeWithFloat:scaleFactor * self->baseTextSize_];
    }
    self->textScale_ = scaleFactor;
  }
}

- (void)addRuleWithOrgMapsforgeMapRenderthemeRuleRule:(OrgMapsforgeMapRenderthemeRuleRule *)rule {
  [((JavaUtilArrayList *) nil_chk(self->rulesList_)) addWithId:rule];
}

- (void)complete {
  [((JavaUtilArrayList *) nil_chk(self->rulesList_)) trimToSize];
  for (jint i = 0, n = [self->rulesList_ size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->rulesList_ getWithInt:i])) onComplete];
  }
}

- (void)setLevelsWithInt:(jint)levels {
  self->levels_ = levels;
}

- (void)matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
           withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                    withOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed {
  OrgMapsforgeMapRenderthemeRuleRenderTheme_matchWayWithOrgMapsforgeMapRenderthemeRenderCallback_withOrgMapsforgeMapLayerRendererPolylineContainer_withOrgMapsforgeMapRenderthemeRuleClosed_(self, renderCallback, way, closed);
}

- (void)dealloc {
  RELEASE_(wayMatchingCache_);
  RELEASE_(poiMatchingCache_);
  RELEASE_(refCount_);
  RELEASE_(rulesList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getLevels);
  methods[3].selector = @selector(getMapBackground);
  methods[4].selector = @selector(getMapBackgroundOutside);
  methods[5].selector = @selector(hasMapBackgroundOutside);
  methods[6].selector = @selector(incrementRefCount);
  methods[7].selector = @selector(matchClosedWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[8].selector = @selector(matchLinearWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[9].selector = @selector(matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[10].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[11].selector = @selector(scaleTextSizeWithFloat:);
  methods[12].selector = @selector(addRuleWithOrgMapsforgeMapRenderthemeRuleRule:);
  methods[13].selector = @selector(complete);
  methods[14].selector = @selector(setLevelsWithInt:);
  methods[15].selector = @selector(matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeMapRenderthemeRuleClosed:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MATCHING_CACHE_SIZE", "I", .constantValue.asInt = OrgMapsforgeMapRenderthemeRuleRenderTheme_MATCHING_CACHE_SIZE, 0x1a, -1, -1, -1, -1 },
    { "baseStrokeWidth_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "baseTextSize_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "hasBackgroundOutside_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "levels_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mapBackground_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapBackgroundOutside_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "wayMatchingCache_", "LOrgMapsforgeCoreUtilLRUCache;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "poiMatchingCache_", "LOrgMapsforgeCoreUtilLRUCache;", .constantValue.asLong = 0, 0x12, -1, -1, 15, -1 },
    { "refCount_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "rulesList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "textScale_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strokeWidthScale_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder;", "matchClosedWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "matchLinearWay", "matchNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "scaleStrokeWidth", "F", "scaleTextSize", "addRule", "LOrgMapsforgeMapRenderthemeRuleRule;", "setLevels", "I", "matchWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeMapRenderthemeRuleClosed;", "Lorg/mapsforge/core/util/LRUCache<Lorg/mapsforge/map/rendertheme/rule/MatchingCacheKey;Ljava/util/List<Lorg/mapsforge/map/rendertheme/renderinstruction/RenderInstruction;>;>;", "Ljava/util/ArrayList<Lorg/mapsforge/map/rendertheme/rule/Rule;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRenderTheme = { "RenderTheme", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x1, 16, 13, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRenderTheme;
}

@end

void OrgMapsforgeMapRenderthemeRuleRenderTheme_initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_(OrgMapsforgeMapRenderthemeRuleRenderTheme *self, OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *renderThemeBuilder) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->refCount_, new_JavaUtilConcurrentAtomicAtomicInteger_init());
  self->baseStrokeWidth_ = ((OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *) nil_chk(renderThemeBuilder))->baseStrokeWidth_;
  self->baseTextSize_ = renderThemeBuilder->baseTextSize_;
  self->hasBackgroundOutside_ = renderThemeBuilder->hasBackgroundOutside_;
  self->mapBackground_ = renderThemeBuilder->mapBackground_;
  self->mapBackgroundOutside_ = renderThemeBuilder->mapBackgroundOutside_;
  JreStrongAssignAndConsume(&self->rulesList_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->poiMatchingCache_, new_OrgMapsforgeCoreUtilLRUCache_initWithInt_(OrgMapsforgeMapRenderthemeRuleRenderTheme_MATCHING_CACHE_SIZE));
  JreStrongAssignAndConsume(&self->wayMatchingCache_, new_OrgMapsforgeCoreUtilLRUCache_initWithInt_(OrgMapsforgeMapRenderthemeRuleRenderTheme_MATCHING_CACHE_SIZE));
}

OrgMapsforgeMapRenderthemeRuleRenderTheme *new_OrgMapsforgeMapRenderthemeRuleRenderTheme_initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *renderThemeBuilder) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleRenderTheme, initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_, renderThemeBuilder)
}

OrgMapsforgeMapRenderthemeRuleRenderTheme *create_OrgMapsforgeMapRenderthemeRuleRenderTheme_initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *renderThemeBuilder) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleRenderTheme, initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_, renderThemeBuilder)
}

void OrgMapsforgeMapRenderthemeRuleRenderTheme_matchWayWithOrgMapsforgeMapRenderthemeRenderCallback_withOrgMapsforgeMapLayerRendererPolylineContainer_withOrgMapsforgeMapRenderthemeRuleClosed_(OrgMapsforgeMapRenderthemeRuleRenderTheme *self, id<OrgMapsforgeMapRenderthemeRenderCallback> renderCallback, OrgMapsforgeMapLayerRendererPolylineContainer *way, OrgMapsforgeMapRenderthemeRuleClosed *closed) {
  OrgMapsforgeMapRenderthemeRuleMatchingCacheKey *matchingCacheKey = create_OrgMapsforgeMapRenderthemeRuleMatchingCacheKey_initWithJavaUtilList_withByte_withOrgMapsforgeMapRenderthemeRuleClosed_([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTags], ((OrgMapsforgeCoreModelTile *) nil_chk([way getTile]))->zoomLevel_, closed);
  id<JavaUtilList> matchingList = [((OrgMapsforgeCoreUtilLRUCache *) nil_chk(self->wayMatchingCache_)) getWithId:matchingCacheKey];
  if (matchingList != nil) {
    for (jint i = 0, n = [matchingList size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([matchingList getWithInt:i])) renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapLayerRendererPolylineContainer:way];
    }
    return;
  }
  matchingList = create_JavaUtilArrayList_init();
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->rulesList_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->rulesList_ getWithInt:i])) matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreModelTile:[way getTile] withOrgMapsforgeMapRenderthemeRuleClosed:closed withJavaUtilList:matchingList];
  }
  [self->wayMatchingCache_ putWithId:matchingCacheKey withId:matchingList];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRenderTheme)
