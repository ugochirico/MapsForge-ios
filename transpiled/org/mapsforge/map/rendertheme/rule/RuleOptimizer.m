//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/RuleOptimizer.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/Stack.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/map/rendertheme/rule/AnyMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/AttributeMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/ClosedMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/ElementMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/KeyMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/NegativeMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/PositiveRule.h"
#include "org/mapsforge/map/rendertheme/rule/Rule.h"
#include "org/mapsforge/map/rendertheme/rule/RuleOptimizer.h"
#include "org/mapsforge/map/rendertheme/rule/ValueMatcher.h"

@interface OrgMapsforgeMapRenderthemeRuleRuleOptimizer ()

+ (id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher
                                                                                                         withJavaUtilStack:(JavaUtilStack *)ruleStack;

+ (id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher
                                                                                                           withJavaUtilStack:(JavaUtilStack *)ruleStack;

- (instancetype)init;

@end

inline JavaUtilLoggingLogger *OrgMapsforgeMapRenderthemeRuleRuleOptimizer_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapRenderthemeRuleRuleOptimizer_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRuleOptimizer, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher, JavaUtilStack *ruleStack);

__attribute__((unused)) static id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher, JavaUtilStack *ruleStack);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init(OrgMapsforgeMapRenderthemeRuleRuleOptimizer *self);

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleRuleOptimizer *new_OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleRuleOptimizer *create_OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleRuleOptimizer)

@implementation OrgMapsforgeMapRenderthemeRuleRuleOptimizer

+ (id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)optimizeWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher
                                                                                               withJavaUtilStack:(JavaUtilStack *)ruleStack {
  return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(attributeMatcher, ruleStack);
}

+ (id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>)optimizeWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:(id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>)closedMatcher
                                                                                         withJavaUtilStack:(JavaUtilStack *)ruleStack {
  return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleClosedMatcher_withJavaUtilStack_(closedMatcher, ruleStack);
}

+ (id<OrgMapsforgeMapRenderthemeRuleElementMatcher>)optimizeWithOrgMapsforgeMapRenderthemeRuleElementMatcher:(id<OrgMapsforgeMapRenderthemeRuleElementMatcher>)elementMatcher
                                                                                           withJavaUtilStack:(JavaUtilStack *)ruleStack {
  return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleElementMatcher_withJavaUtilStack_(elementMatcher, ruleStack);
}

+ (id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher
                                                                                                         withJavaUtilStack:(JavaUtilStack *)ruleStack {
  return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(attributeMatcher, ruleStack);
}

+ (id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher
                                                                                                           withJavaUtilStack:(JavaUtilStack *)ruleStack {
  return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(attributeMatcher, ruleStack);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleClosedMatcher;", 0x8, 0, 3, -1, 4, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleElementMatcher;", 0x8, 0, 5, -1, 6, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", 0xa, 7, 1, -1, 2, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", 0xa, 8, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(optimizeWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:withJavaUtilStack:);
  methods[1].selector = @selector(optimizeWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:withJavaUtilStack:);
  methods[2].selector = @selector(optimizeWithOrgMapsforgeMapRenderthemeRuleElementMatcher:withJavaUtilStack:);
  methods[3].selector = @selector(optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:withJavaUtilStack:);
  methods[4].selector = @selector(optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:withJavaUtilStack:);
  methods[5].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "optimize", "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;LJavaUtilStack;", "(Lorg/mapsforge/map/rendertheme/rule/AttributeMatcher;Ljava/util/Stack<Lorg/mapsforge/map/rendertheme/rule/Rule;>;)Lorg/mapsforge/map/rendertheme/rule/AttributeMatcher;", "LOrgMapsforgeMapRenderthemeRuleClosedMatcher;LJavaUtilStack;", "(Lorg/mapsforge/map/rendertheme/rule/ClosedMatcher;Ljava/util/Stack<Lorg/mapsforge/map/rendertheme/rule/Rule;>;)Lorg/mapsforge/map/rendertheme/rule/ClosedMatcher;", "LOrgMapsforgeMapRenderthemeRuleElementMatcher;LJavaUtilStack;", "(Lorg/mapsforge/map/rendertheme/rule/ElementMatcher;Ljava/util/Stack<Lorg/mapsforge/map/rendertheme/rule/Rule;>;)Lorg/mapsforge/map/rendertheme/rule/ElementMatcher;", "optimizeKeyMatcher", "optimizeValueMatcher", &OrgMapsforgeMapRenderthemeRuleRuleOptimizer_LOGGER };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRuleOptimizer = { "RuleOptimizer", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x10, 6, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRuleOptimizer;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleRuleOptimizer class]) {
    JreStrongAssign(&OrgMapsforgeMapRenderthemeRuleRuleOptimizer_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapRenderthemeRuleRuleOptimizer_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleRuleOptimizer)
  }
}

@end

id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher, JavaUtilStack *ruleStack) {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_initialize();
  if ([attributeMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleAnyMatcher class]] || [attributeMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleNegativeMatcher class]]) {
    return attributeMatcher;
  }
  else if ([attributeMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleKeyMatcher class]]) {
    return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(attributeMatcher, ruleStack);
  }
  else if ([attributeMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleValueMatcher class]]) {
    return OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(attributeMatcher, ruleStack);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"unknown AttributeMatcher: ", attributeMatcher));
}

id<OrgMapsforgeMapRenderthemeRuleClosedMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleClosedMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleClosedMatcher> closedMatcher, JavaUtilStack *ruleStack) {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_initialize();
  if ([closedMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleAnyMatcher class]]) {
    return closedMatcher;
  }
  for (jint i = 0, n = [((JavaUtilStack *) nil_chk(ruleStack)) size]; i < n; ++i) {
    if ([((id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>) nil_chk(((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([ruleStack getWithInt:i]))->closedMatcher_)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:closedMatcher]) {
      return JreLoadStatic(OrgMapsforgeMapRenderthemeRuleAnyMatcher, INSTANCE);
    }
    else if (![((id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>) nil_chk(closedMatcher)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([ruleStack getWithInt:i]))->closedMatcher_]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapRenderthemeRuleRuleOptimizer_LOGGER)) warningWithNSString:@"unreachable rule (closed)"];
    }
  }
  return closedMatcher;
}

id<OrgMapsforgeMapRenderthemeRuleElementMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeWithOrgMapsforgeMapRenderthemeRuleElementMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleElementMatcher> elementMatcher, JavaUtilStack *ruleStack) {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_initialize();
  if ([elementMatcher isKindOfClass:[OrgMapsforgeMapRenderthemeRuleAnyMatcher class]]) {
    return elementMatcher;
  }
  for (jint i = 0, n = [((JavaUtilStack *) nil_chk(ruleStack)) size]; i < n; ++i) {
    OrgMapsforgeMapRenderthemeRuleRule *rule = [ruleStack getWithInt:i];
    if ([((id<OrgMapsforgeMapRenderthemeRuleElementMatcher>) nil_chk(((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(rule))->elementMatcher_)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleElementMatcher:elementMatcher]) {
      return JreLoadStatic(OrgMapsforgeMapRenderthemeRuleAnyMatcher, INSTANCE);
    }
    else if (![((id<OrgMapsforgeMapRenderthemeRuleElementMatcher>) nil_chk(elementMatcher)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleElementMatcher:rule->elementMatcher_]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapRenderthemeRuleRuleOptimizer_LOGGER)) warningWithNSString:@"unreachable rule (e)"];
    }
  }
  return elementMatcher;
}

id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeKeyMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher, JavaUtilStack *ruleStack) {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_initialize();
  for (jint i = 0, n = [((JavaUtilStack *) nil_chk(ruleStack)) size]; i < n; ++i) {
    if ([[ruleStack getWithInt:i] isKindOfClass:[OrgMapsforgeMapRenderthemeRulePositiveRule class]]) {
      OrgMapsforgeMapRenderthemeRulePositiveRule *positiveRule = (OrgMapsforgeMapRenderthemeRulePositiveRule *) cast_chk([ruleStack getWithInt:i], [OrgMapsforgeMapRenderthemeRulePositiveRule class]);
      if ([((id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>) nil_chk(((OrgMapsforgeMapRenderthemeRulePositiveRule *) nil_chk(positiveRule))->keyMatcher_)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:attributeMatcher]) {
        return JreLoadStatic(OrgMapsforgeMapRenderthemeRuleAnyMatcher, INSTANCE);
      }
    }
  }
  return attributeMatcher;
}

id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> OrgMapsforgeMapRenderthemeRuleRuleOptimizer_optimizeValueMatcherWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher_withJavaUtilStack_(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher, JavaUtilStack *ruleStack) {
  OrgMapsforgeMapRenderthemeRuleRuleOptimizer_initialize();
  for (jint i = 0, n = [((JavaUtilStack *) nil_chk(ruleStack)) size]; i < n; ++i) {
    if ([[ruleStack getWithInt:i] isKindOfClass:[OrgMapsforgeMapRenderthemeRulePositiveRule class]]) {
      OrgMapsforgeMapRenderthemeRulePositiveRule *positiveRule = (OrgMapsforgeMapRenderthemeRulePositiveRule *) cast_chk([ruleStack getWithInt:i], [OrgMapsforgeMapRenderthemeRulePositiveRule class]);
      if ([((id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>) nil_chk(((OrgMapsforgeMapRenderthemeRulePositiveRule *) nil_chk(positiveRule))->valueMatcher_)) isCoveredByWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:attributeMatcher]) {
        return JreLoadStatic(OrgMapsforgeMapRenderthemeRuleAnyMatcher, INSTANCE);
      }
    }
  }
  return attributeMatcher;
}

void OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init(OrgMapsforgeMapRenderthemeRuleRuleOptimizer *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapRenderthemeRuleRuleOptimizer *new_OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleRuleOptimizer, init)
}

OrgMapsforgeMapRenderthemeRuleRuleOptimizer *create_OrgMapsforgeMapRenderthemeRuleRuleOptimizer_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleRuleOptimizer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRuleOptimizer)
