//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/ClosedWayMatcher.java
//

#include "J2ObjC_source.h"
#include "org/mapsforge/map/rendertheme/rule/Closed.h"
#include "org/mapsforge/map/rendertheme/rule/ClosedMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/ClosedWayMatcher.h"

@interface OrgMapsforgeMapRenderthemeRuleClosedWayMatcher ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *self);

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *new_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *create_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher)

OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_INSTANCE;

@implementation OrgMapsforgeMapRenderthemeRuleClosedWayMatcher

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isCoveredByWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:(id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>)closedMatcher {
  return [((id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>) nil_chk(closedMatcher)) matchesWithOrgMapsforgeMapRenderthemeRuleClosed:JreLoadEnum(OrgMapsforgeMapRenderthemeRuleClosed, YES)];
}

- (jboolean)matchesWithOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed {
  return closed == JreLoadEnum(OrgMapsforgeMapRenderthemeRuleClosed, YES);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isCoveredByWithOrgMapsforgeMapRenderthemeRuleClosedMatcher:);
  methods[2].selector = @selector(matchesWithOrgMapsforgeMapRenderthemeRuleClosed:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgMapsforgeMapRenderthemeRuleClosedWayMatcher;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "isCoveredBy", "LOrgMapsforgeMapRenderthemeRuleClosedMatcher;", "matches", "LOrgMapsforgeMapRenderthemeRuleClosed;", &OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_INSTANCE };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleClosedWayMatcher = { "ClosedWayMatcher", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x10, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleClosedWayMatcher class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_INSTANCE, new_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *self) {
  NSObject_init(self);
}

OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *new_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher, init)
}

OrgMapsforgeMapRenderthemeRuleClosedWayMatcher *create_OrgMapsforgeMapRenderthemeRuleClosedWayMatcher_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleClosedWayMatcher)
