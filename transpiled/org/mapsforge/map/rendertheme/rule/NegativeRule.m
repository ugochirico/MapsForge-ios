//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/NegativeRule.java
//

#include "J2ObjC_source.h"
#include "java/util/List.h"
#include "org/mapsforge/map/rendertheme/rule/AttributeMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/Closed.h"
#include "org/mapsforge/map/rendertheme/rule/ClosedMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/Element.h"
#include "org/mapsforge/map/rendertheme/rule/ElementMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/NegativeRule.h"
#include "org/mapsforge/map/rendertheme/rule/Rule.h"
#include "org/mapsforge/map/rendertheme/rule/RuleBuilder.h"

@interface OrgMapsforgeMapRenderthemeRuleNegativeRule () {
 @public
  id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleNegativeRule, attributeMatcher_, id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)

@implementation OrgMapsforgeMapRenderthemeRuleNegativeRule

- (instancetype)initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder:(OrgMapsforgeMapRenderthemeRuleRuleBuilder *)ruleBuilder
               withOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher {
  OrgMapsforgeMapRenderthemeRuleNegativeRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_(self, ruleBuilder, attributeMatcher);
  return self;
}

- (jboolean)matchesNodeWithJavaUtilList:(id<JavaUtilList>)tags
                               withByte:(jbyte)zoomLevel {
  return self->zoomMin_ <= zoomLevel && self->zoomMax_ >= zoomLevel && [((id<OrgMapsforgeMapRenderthemeRuleElementMatcher>) nil_chk(self->elementMatcher_)) matchesWithOrgMapsforgeMapRenderthemeRuleElement:JreLoadEnum(OrgMapsforgeMapRenderthemeRuleElement, NODE)] && [((id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>) nil_chk(self->attributeMatcher_)) matchesWithJavaUtilList:tags];
}

- (jboolean)matchesWayWithJavaUtilList:(id<JavaUtilList>)tags
                              withByte:(jbyte)zoomLevel
withOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed {
  return self->zoomMin_ <= zoomLevel && self->zoomMax_ >= zoomLevel && [((id<OrgMapsforgeMapRenderthemeRuleElementMatcher>) nil_chk(self->elementMatcher_)) matchesWithOrgMapsforgeMapRenderthemeRuleElement:JreLoadEnum(OrgMapsforgeMapRenderthemeRuleElement, WAY)] && [((id<OrgMapsforgeMapRenderthemeRuleClosedMatcher>) nil_chk(self->closedMatcher_)) matchesWithOrgMapsforgeMapRenderthemeRuleClosed:closed] && [((id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>) nil_chk(self->attributeMatcher_)) matchesWithJavaUtilList:tags];
}

- (void)dealloc {
  RELEASE_(attributeMatcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder:withOrgMapsforgeMapRenderthemeRuleAttributeMatcher:);
  methods[1].selector = @selector(matchesNodeWithJavaUtilList:withByte:);
  methods[2].selector = @selector(matchesWayWithJavaUtilList:withByte:withOrgMapsforgeMapRenderthemeRuleClosed:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "attributeMatcher_", "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapRenderthemeRuleRuleBuilder;LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", "matchesNode", "LJavaUtilList;B", "(Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;B)Z", "matchesWay", "LJavaUtilList;BLOrgMapsforgeMapRenderthemeRuleClosed;", "(Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;BLorg/mapsforge/map/rendertheme/rule/Closed;)Z" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleNegativeRule = { "NegativeRule", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleNegativeRule;
}

@end

void OrgMapsforgeMapRenderthemeRuleNegativeRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_(OrgMapsforgeMapRenderthemeRuleNegativeRule *self, OrgMapsforgeMapRenderthemeRuleRuleBuilder *ruleBuilder, id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher) {
  OrgMapsforgeMapRenderthemeRuleRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_(self, ruleBuilder);
  JreStrongAssign(&self->attributeMatcher_, attributeMatcher);
}

OrgMapsforgeMapRenderthemeRuleNegativeRule *new_OrgMapsforgeMapRenderthemeRuleNegativeRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_(OrgMapsforgeMapRenderthemeRuleRuleBuilder *ruleBuilder, id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleNegativeRule, initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_, ruleBuilder, attributeMatcher)
}

OrgMapsforgeMapRenderthemeRuleNegativeRule *create_OrgMapsforgeMapRenderthemeRuleNegativeRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_(OrgMapsforgeMapRenderthemeRuleRuleBuilder *ruleBuilder, id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher> attributeMatcher) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleNegativeRule, initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_withOrgMapsforgeMapRenderthemeRuleAttributeMatcher_, ruleBuilder, attributeMatcher)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleNegativeRule)
