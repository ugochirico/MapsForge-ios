//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/RenderThemeBuilder.java
//

#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/rule/RenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeBuilder.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder () {
 @public
  JavaLangInteger *version__;
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

- (void)validateWithNSString:(NSString *)elementName;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, version__, JavaLangInteger *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_BASE_STROKE_WIDTH();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_STROKE_WIDTH = @"base-stroke-width";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, BASE_STROKE_WIDTH, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_BASE_TEXT_SIZE();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_TEXT_SIZE = @"base-text-size";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, BASE_TEXT_SIZE, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_MAP_BACKGROUND();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND = @"map-background";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, MAP_BACKGROUND, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_MAP_BACKGROUND_OUTSIDE();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND_OUTSIDE = @"map-background-outside";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, MAP_BACKGROUND_OUTSIDE, NSString *)

inline jint OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_RENDER_THEME_VERSION();
#define OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_RENDER_THEME_VERSION 4
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, RENDER_THEME_VERSION, jint)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_VERSION();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_VERSION = @"version";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, VERSION, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_XMLNS();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS = @"xmlns";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, XMLNS, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_XMLNS_XSI();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS_XSI = @"xmlns:xsi";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, XMLNS_XSI, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_get_XSI_SCHEMALOCATION();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XSI_SCHEMALOCATION = @"xsi:schemaLocation";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, XSI_SCHEMALOCATION, NSString *)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_validateWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *self, NSString *elementName);

@implementation OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, elementName, pullParser);
  return self;
}

- (OrgMapsforgeMapRenderthemeRuleRenderTheme *)build {
  return create_OrgMapsforgeMapRenderthemeRuleRenderTheme_initWithOrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_(self);
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, elementName, pullParser);
}

- (void)validateWithNSString:(NSString *)elementName {
  OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_validateWithNSString_(self, elementName);
}

- (void)dealloc {
  RELEASE_(version__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleRenderTheme;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withNSString:withOrgXmlpullV1XmlPullParser:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:withNSString:withOrgXmlpullV1XmlPullParser:);
  methods[3].selector = @selector(validateWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_STROKE_WIDTH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "BASE_TEXT_SIZE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "MAP_BACKGROUND", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "MAP_BACKGROUND_OUTSIDE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "RENDER_THEME_VERSION", "I", .constantValue.asInt = OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_RENDER_THEME_VERSION, 0x1a, -1, -1, -1, -1 },
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "XMLNS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "XMLNS_XSI", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "XSI_SCHEMALOCATION", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "baseStrokeWidth_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "baseTextSize_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hasBackgroundOutside_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mapBackground_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mapBackgroundOutside_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "version__", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, 13, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LNSString;LOrgXmlpullV1XmlPullParser;", "LOrgXmlpullV1XmlPullParserException;", "extractValues", "validate", "LNSString;", &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_STROKE_WIDTH, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_TEXT_SIZE, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND_OUTSIDE, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_VERSION, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS_XSI, &OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XSI_SCHEMALOCATION, "version" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder = { "RenderThemeBuilder", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x1, 4, 15, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder;
}

@end

void OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  NSObject_init(self);
  self->baseStrokeWidth_ = 1.0f;
  self->baseTextSize_ = 1.0f;
  self->mapBackground_ = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, WHITE)];
  OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, elementName, pullParser);
}

OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *new_OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_, graphicFactory, elementName, pullParser)
}

OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *create_OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_, graphicFactory, elementName, pullParser)
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS)) isEqual:name]) {
      continue;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XMLNS_XSI)) isEqual:name]) {
      continue;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_XSI_SCHEMALOCATION)) isEqual:name]) {
      continue;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_VERSION)) isEqual:name]) {
      JreStrongAssign(&self->version__, JavaLangInteger_valueOfWithInt_(OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value)));
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND)) isEqual:name]) {
      self->mapBackground_ = OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_MAP_BACKGROUND_OUTSIDE)) isEqual:name]) {
      self->mapBackgroundOutside_ = OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value);
      self->hasBackgroundOutside_ = true;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_STROKE_WIDTH)) isEqual:name]) {
      self->baseStrokeWidth_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_BASE_TEXT_SIZE)) isEqual:name]) {
      self->baseTextSize_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value);
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
  OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_validateWithNSString_(self, elementName);
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_validateWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder *self, NSString *elementName) {
  OrgMapsforgeMapRenderthemeXmlUtils_checkMandatoryAttributeWithNSString_withNSString_withId_(elementName, OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_VERSION, self->version__);
  if (!JreLoadStatic(OrgMapsforgeMapRenderthemeXmlUtils, supportOlderRenderThemes) && [((JavaLangInteger *) nil_chk(self->version__)) intValue] != OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_RENDER_THEME_VERSION) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$@", @"unsupported render theme version: ", self->version__));
  }
  else if ([((JavaLangInteger *) nil_chk(self->version__)) intValue] > OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_RENDER_THEME_VERSION) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$@", @"unsupported newer render theme version: ", self->version__));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder)
