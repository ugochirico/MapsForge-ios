//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/RenderThemeHandler.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/logging/Logger.h"
#include "org/kxml2/io/KXmlParser.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/util/IOUtils.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/rendertheme/XmlRenderTheme.h"
#include "org/mapsforge/map/rendertheme/XmlRenderThemeMenuCallback.h"
#include "org/mapsforge/map/rendertheme/XmlRenderThemeStyleLayer.h"
#include "org/mapsforge/map/rendertheme/XmlRenderThemeStyleMenu.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Area.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Caption.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Circle.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Line.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/LineSymbol.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/PathText.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Symbol.h"
#include "org/mapsforge/map/rendertheme/rule/RenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeBuilder.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeHandler.h"
#include "org/mapsforge/map/rendertheme/rule/Rule.h"
#include "org/mapsforge/map/rendertheme/rule/RuleBuilder.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@class OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;

@interface OrgMapsforgeMapRenderthemeRuleRenderThemeHandler () {
 @public
  id<JavaUtilSet> categories_;
  OrgMapsforgeMapRenderthemeRuleRule *currentRule_;
  OrgMapsforgeMapModelDisplayModel *displayModel_;
  JavaUtilStack *elementStack_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  jint level_;
  id<OrgXmlpullV1XmlPullParser> pullParser_;
  NSString *qName_;
  NSString *relativePathPrefix_;
  OrgMapsforgeMapRenderthemeRuleRenderTheme *renderTheme_;
  JavaUtilStack *ruleStack_;
  id<JavaUtilMap> symbols_;
  id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme_;
  OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu *renderThemeStyleMenu_;
  OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *currentLayer_;
}

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)relativePathPrefix
                  withOrgMapsforgeMapRenderthemeXmlRenderTheme:(id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)xmlRenderTheme
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

- (void)endDocument;

- (void)endElement;

- (void)startElement;

- (void)checkElementWithNSString:(NSString *)elementName
withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)element;

- (void)checkStateWithNSString:(NSString *)elementName
withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)element;

- (NSString *)getStringAttributeWithNSString:(NSString *)name;

- (jboolean)isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *)renderInstruction;

- (jboolean)isVisibleWithOrgMapsforgeMapRenderthemeRuleRule:(OrgMapsforgeMapRenderthemeRuleRule *)rule;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, categories_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, currentRule_, OrgMapsforgeMapRenderthemeRuleRule *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, displayModel_, OrgMapsforgeMapModelDisplayModel *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, elementStack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, pullParser_, id<OrgXmlpullV1XmlPullParser>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, qName_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, relativePathPrefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, renderTheme_, OrgMapsforgeMapRenderthemeRuleRenderTheme *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, ruleStack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, symbols_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, xmlRenderTheme_, id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, renderThemeStyleMenu_, OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, currentLayer_, OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, LOGGER, JavaUtilLoggingLogger *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_get_ELEMENT_NAME_RULE();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_ELEMENT_NAME_RULE = @"rule";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, ELEMENT_NAME_RULE, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_get_UNEXPECTED_ELEMENT();
static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_UNEXPECTED_ELEMENT = @"unexpected element: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, UNEXPECTED_ELEMENT, NSString *)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser);

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *new_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *create_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endDocument(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endElement(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_startElement(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkElementWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *elementName, OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *element);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *elementName, OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *element);

__attribute__((unused)) static NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *name);

__attribute__((unused)) static jboolean OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *renderInstruction);

__attribute__((unused)) static jboolean OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRuleRule_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, OrgMapsforgeMapRenderthemeRuleRule *rule);

typedef NS_ENUM(NSUInteger, OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum) {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDER_THEME = 0,
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDERING_INSTRUCTION = 1,
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RULE = 2,
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDERING_STYLE = 3,
};

@interface OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;

+ (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)valueOfWithNSString:(NSString *)name;

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_[];

inline OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_get_RENDER_THEME();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDER_THEME)

inline OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_get_RENDERING_INSTRUCTION();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION)

inline OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_get_RULE();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RULE)

inline OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_get_RENDERING_STYLE();
J2OBJC_ENUM_CONSTANT(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values();

__attribute__((unused)) static OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler)

@implementation OrgMapsforgeMapRenderthemeRuleRenderThemeHandler

+ (OrgMapsforgeMapRenderthemeRuleRenderTheme *)getRenderThemeWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                                   withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                           withOrgMapsforgeMapRenderthemeXmlRenderTheme:(id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)xmlRenderTheme {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getRenderThemeWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeMapRenderthemeXmlRenderTheme_(graphicFactory, displayModel, xmlRenderTheme);
}

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)relativePathPrefix
                  withOrgMapsforgeMapRenderthemeXmlRenderTheme:(id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)xmlRenderTheme
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, displayModel, relativePathPrefix, xmlRenderTheme, pullParser);
  return self;
}

- (void)processRenderTheme {
  jint eventType = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser_)) getEventType];
  do {
    if (eventType == OrgXmlpullV1XmlPullParser_START_DOCUMENT) {
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_START_TAG) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_startElement(self);
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_END_TAG) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endElement(self);
    }
    else if (eventType == OrgXmlpullV1XmlPullParser_TEXT) {
    }
    eventType = [pullParser_ next];
  }
  while (eventType != OrgXmlpullV1XmlPullParser_END_DOCUMENT);
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endDocument(self);
}

- (void)endDocument {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endDocument(self);
}

- (void)endElement {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endElement(self);
}

- (void)startElement {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_startElement(self);
}

- (void)checkElementWithNSString:(NSString *)elementName
withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)element {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkElementWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, elementName, element);
}

- (void)checkStateWithNSString:(NSString *)elementName
withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)element {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, elementName, element);
}

- (NSString *)getStringAttributeWithNSString:(NSString *)name {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, name);
}

- (jboolean)isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *)renderInstruction {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, renderInstruction);
}

- (jboolean)isVisibleWithOrgMapsforgeMapRenderthemeRuleRule:(OrgMapsforgeMapRenderthemeRuleRule *)rule {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRuleRule_(self, rule);
}

- (void)dealloc {
  RELEASE_(categories_);
  RELEASE_(currentRule_);
  RELEASE_(displayModel_);
  RELEASE_(elementStack_);
  RELEASE_(graphicFactory_);
  RELEASE_(pullParser_);
  RELEASE_(qName_);
  RELEASE_(relativePathPrefix_);
  RELEASE_(renderTheme_);
  RELEASE_(ruleStack_);
  RELEASE_(symbols_);
  RELEASE_(xmlRenderTheme_);
  RELEASE_(renderThemeStyleMenu_);
  RELEASE_(currentLayer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeMapRenderthemeRuleRenderTheme;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 7, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 13, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getRenderThemeWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withOrgMapsforgeMapRenderthemeXmlRenderTheme:);
  methods[1].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgMapsforgeMapRenderthemeXmlRenderTheme:withOrgXmlpullV1XmlPullParser:);
  methods[2].selector = @selector(processRenderTheme);
  methods[3].selector = @selector(endDocument);
  methods[4].selector = @selector(endElement);
  methods[5].selector = @selector(startElement);
  methods[6].selector = @selector(checkElementWithNSString:withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:);
  methods[7].selector = @selector(checkStateWithNSString:withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element:);
  methods[8].selector = @selector(getStringAttributeWithNSString:);
  methods[9].selector = @selector(isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:);
  methods[10].selector = @selector(isVisibleWithOrgMapsforgeMapRenderthemeRuleRule:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "ELEMENT_NAME_RULE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "UNEXPECTED_ELEMENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "categories_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "currentRule_", "LOrgMapsforgeMapRenderthemeRuleRule;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "elementStack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 18, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "level_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pullParser_", "LOrgXmlpullV1XmlPullParser;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "qName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relativePathPrefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "renderTheme_", "LOrgMapsforgeMapRenderthemeRuleRenderTheme;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ruleStack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x12, -1, -1, 19, -1 },
    { "symbols_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "xmlRenderTheme_", "LOrgMapsforgeMapRenderthemeXmlRenderTheme;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "renderThemeStyleMenu_", "LOrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentLayer_", "LOrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getRenderTheme", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LOrgMapsforgeMapRenderthemeXmlRenderTheme;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgMapsforgeMapRenderthemeXmlRenderTheme;LOrgXmlpullV1XmlPullParser;", "LOrgXmlpullV1XmlPullParserException;LJavaIoIOException;", "LOrgXmlpullV1XmlPullParserException;", "checkElement", "LNSString;LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", "checkState", "getStringAttribute", "LNSString;", "isVisible", "LOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction;", "LOrgMapsforgeMapRenderthemeRuleRule;", &OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_LOGGER, &OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_ELEMENT_NAME_RULE, &OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_UNEXPECTED_ELEMENT, "Ljava/util/Set<Ljava/lang/String;>;", "Ljava/util/Stack<Lorg/mapsforge/map/rendertheme/rule/RenderThemeHandler$Element;>;", "Ljava/util/Stack<Lorg/mapsforge/map/rendertheme/rule/Rule;>;", "Ljava/util/Map<Ljava/lang/String;Lorg/mapsforge/map/rendertheme/renderinstruction/Symbol;>;", "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRenderThemeHandler = { "RenderThemeHandler", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x11, 11, 18, -1, 21, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleRenderThemeHandler class]) {
    JreStrongAssign(&OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler)
  }
}

@end

OrgMapsforgeMapRenderthemeRuleRenderTheme *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getRenderThemeWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeMapRenderthemeXmlRenderTheme_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme) {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initialize();
  id<OrgXmlpullV1XmlPullParser> pullParser = create_OrgKxml2IoKXmlParser_init();
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *renderThemeHandler = create_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(graphicFactory, displayModel, [((id<OrgMapsforgeMapRenderthemeXmlRenderTheme>) nil_chk(xmlRenderTheme)) getRelativePathPrefix], xmlRenderTheme, pullParser);
  JavaIoInputStream *inputStream = nil;
  @try {
    inputStream = [xmlRenderTheme getRenderThemeAsStream];
    [pullParser setInputWithJavaIoInputStream:inputStream withNSString:nil];
    [renderThemeHandler processRenderTheme];
    [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(renderThemeHandler->renderTheme_)) incrementRefCount];
    return renderThemeHandler->renderTheme_;
  }
  @finally {
    if (renderThemeHandler->renderTheme_ != nil) {
      [renderThemeHandler->renderTheme_ destroy];
    }
    OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(inputStream);
  }
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->elementStack_, new_JavaUtilStack_init());
  JreStrongAssignAndConsume(&self->ruleStack_, new_JavaUtilStack_init());
  JreStrongAssignAndConsume(&self->symbols_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->pullParser_, pullParser);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->relativePathPrefix_, relativePathPrefix);
  JreStrongAssign(&self->xmlRenderTheme_, xmlRenderTheme);
}

OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *new_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_, graphicFactory, displayModel, relativePathPrefix, xmlRenderTheme, pullParser)
}

OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *create_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme, id<OrgXmlpullV1XmlPullParser> pullParser) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgXmlpullV1XmlPullParser_, graphicFactory, displayModel, relativePathPrefix, xmlRenderTheme, pullParser)
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endDocument(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self) {
  if (self->renderTheme_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"missing element: rules");
  }
  [self->renderTheme_ setLevelsWithInt:self->level_];
  [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) complete];
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_endElement(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self) {
  JreStrongAssign(&self->qName_, [((id<OrgXmlpullV1XmlPullParser>) nil_chk(self->pullParser_)) getName]);
  [((JavaUtilStack *) nil_chk(self->elementStack_)) pop];
  if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_ELEMENT_NAME_RULE)) isEqual:self->qName_]) {
    [((JavaUtilStack *) nil_chk(self->ruleStack_)) pop];
    if ([self->ruleStack_ empty]) {
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRuleRule_(self, self->currentRule_)) {
        [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) addRuleWithOrgMapsforgeMapRenderthemeRuleRule:self->currentRule_];
      }
    }
    else {
      JreStrongAssign(&self->currentRule_, [self->ruleStack_ peek]);
    }
  }
  else if ([@"stylemenu" isEqual:self->qName_]) {
    if (nil != [((id<OrgMapsforgeMapRenderthemeXmlRenderTheme>) nil_chk(self->xmlRenderTheme_)) getMenuCallback]) {
      JreStrongAssign(&self->categories_, [((id<OrgMapsforgeMapRenderthemeXmlRenderThemeMenuCallback>) nil_chk([self->xmlRenderTheme_ getMenuCallback])) getCategoriesWithOrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu:self->renderThemeStyleMenu_]);
    }
    return;
  }
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_startElement(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self) {
  JreStrongAssign(&self->qName_, [((id<OrgXmlpullV1XmlPullParser>) nil_chk(self->pullParser_)) getName]);
  @try {
    if ([@"rendertheme" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDER_THEME));
      JreStrongAssign(&self->renderTheme_, [create_OrgMapsforgeMapRenderthemeRuleRenderThemeBuilder_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withOrgXmlpullV1XmlPullParser_(self->graphicFactory_, self->qName_, self->pullParser_) build]);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_ELEMENT_NAME_RULE)) isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RULE));
      OrgMapsforgeMapRenderthemeRuleRule *rule = [create_OrgMapsforgeMapRenderthemeRuleRuleBuilder_initWithNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilStack_(self->qName_, self->pullParser_, self->ruleStack_) build];
      if (![((JavaUtilStack *) nil_chk(self->ruleStack_)) empty] && OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRuleRule_(self, rule)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addSubRuleWithOrgMapsforgeMapRenderthemeRuleRule:rule];
      }
      JreStrongAssign(&self->currentRule_, rule);
      [self->ruleStack_ pushWithId:self->currentRule_];
    }
    else if ([@"area" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionArea *area = create_OrgMapsforgeMapRenderthemeRenderinstructionArea_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->level_++, self->relativePathPrefix_);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, area)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:area];
      }
    }
    else if ([@"caption" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionCaption *caption = create_OrgMapsforgeMapRenderthemeRenderinstructionCaption_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->symbols_);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, caption)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:caption];
      }
    }
    else if ([@"cat" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE));
      [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *) nil_chk(self->currentLayer_)) addCategoryWithNSString:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"id")];
    }
    else if ([@"circle" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionCircle *circle = create_OrgMapsforgeMapRenderthemeRenderinstructionCircle_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->level_++);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, circle)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:circle];
      }
    }
    else if ([@"layer" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE));
      jboolean enabled = false;
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"enabled") != nil) {
        enabled = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"enabled")))) booleanValue];
      }
      jboolean visible = [((JavaLangBoolean *) nil_chk(JavaLangBoolean_valueOfWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"visible")))) booleanValue];
      JreStrongAssign(&self->currentLayer_, [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu *) nil_chk(self->renderThemeStyleMenu_)) createLayerWithNSString:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"id") withBoolean:visible withBoolean:enabled]);
      NSString *parent = OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"parent");
      if (nil != parent) {
        OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *parentEntry = [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu *) nil_chk(self->renderThemeStyleMenu_)) getLayerWithNSString:parent];
        if (nil != parentEntry) {
          for (NSString * __strong cat in nil_chk([parentEntry getCategories])) {
            [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *) nil_chk(self->currentLayer_)) addCategoryWithNSString:cat];
          }
          for (OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer * __strong overlay in nil_chk([parentEntry getOverlays])) {
            [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *) nil_chk(self->currentLayer_)) addOverlayWithOrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer:overlay];
          }
        }
      }
    }
    else if ([@"line" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionLine *line = create_OrgMapsforgeMapRenderthemeRenderinstructionLine_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->level_++, self->relativePathPrefix_);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, line)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:line];
      }
    }
    else if ([@"lineSymbol" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionLineSymbol *lineSymbol = create_OrgMapsforgeMapRenderthemeRenderinstructionLineSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->relativePathPrefix_);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, lineSymbol)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:lineSymbol];
      }
    }
    else if ([@"name" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE));
      [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *) nil_chk(self->currentLayer_)) addTranslationWithNSString:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"lang") withNSString:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"value")];
    }
    else if ([@"overlay" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE));
      OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *overlay = [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu *) nil_chk(self->renderThemeStyleMenu_)) getLayerWithNSString:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"id")];
      if (overlay != nil) {
        [((OrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer *) nil_chk(self->currentLayer_)) addOverlayWithOrgMapsforgeMapRenderthemeXmlRenderThemeStyleLayer:overlay];
      }
    }
    else if ([@"pathText" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionPathText *pathText = create_OrgMapsforgeMapRenderthemeRenderinstructionPathText_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_);
      if (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(self, pathText)) {
        [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:pathText];
      }
    }
    else if ([@"stylemenu" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE));
      JreStrongAssignAndConsume(&self->renderThemeStyleMenu_, new_OrgMapsforgeMapRenderthemeXmlRenderThemeStyleMenu_initWithNSString_withNSString_withNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"id"), OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"defaultlang"), OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(self, @"defaultvalue")));
    }
    else if ([@"symbol" isEqual:self->qName_]) {
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, self->qName_, JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION));
      OrgMapsforgeMapRenderthemeRenderinstructionSymbol *symbol = create_OrgMapsforgeMapRenderthemeRenderinstructionSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(self->graphicFactory_, self->displayModel_, self->qName_, self->pullParser_, self->relativePathPrefix_);
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(self->currentRule_)) addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:symbol];
      NSString *symbolId = [symbol getId];
      if (symbolId != nil) {
        [((id<JavaUtilMap>) nil_chk(self->symbols_)) putWithId:symbolId withId:symbol];
      }
    }
    else {
      @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", @"unknown element: ", self->qName_));
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_LOGGER)) warningWithNSString:JreStrcat("$$", @"Rendertheme missing or invalid resource ", [e getMessage])];
  }
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkElementWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *elementName, OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *element) {
  {
    OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *parentElement;
    switch ([element ordinal]) {
      case OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDER_THEME:
      if (![((JavaUtilStack *) nil_chk(self->elementStack_)) empty]) {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_UNEXPECTED_ELEMENT, elementName));
      }
      return;
      case OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RULE:
      parentElement = [((JavaUtilStack *) nil_chk(self->elementStack_)) peek];
      if (parentElement != JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDER_THEME) && parentElement != JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RULE)) {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_UNEXPECTED_ELEMENT, elementName));
      }
      return;
      case OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDERING_INSTRUCTION:
      if ([((JavaUtilStack *) nil_chk(self->elementStack_)) peek] != JreLoadEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RULE)) {
        @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$", OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_UNEXPECTED_ELEMENT, elementName));
      }
      return;
      case OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_Enum_RENDERING_STYLE:
      return;
    }
  }
  @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$@", @"unknown enum value: ", element));
}

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkStateWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *elementName, OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *element) {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_checkElementWithNSString_withOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_(self, elementName, element);
  [((JavaUtilStack *) nil_chk(self->elementStack_)) pushWithId:element];
}

NSString *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_getStringAttributeWithNSString_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, NSString *name) {
  jint n = [((id<OrgXmlpullV1XmlPullParser>) nil_chk(self->pullParser_)) getAttributeCount];
  for (jint i = 0; i < n; i++) {
    if ([((NSString *) nil_chk([self->pullParser_ getAttributeNameWithInt:i])) isEqual:name]) {
      return [self->pullParser_ getAttributeValueWithInt:i];
    }
  }
  return nil;
}

jboolean OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *renderInstruction) {
  return self->categories_ == nil || [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk(renderInstruction)) getCategory] == nil || [((id<JavaUtilSet>) nil_chk(self->categories_)) containsWithId:[renderInstruction getCategory]];
}

jboolean OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_isVisibleWithOrgMapsforgeMapRenderthemeRuleRule_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler *self, OrgMapsforgeMapRenderthemeRuleRule *rule) {
  return self->categories_ == nil || ((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(rule))->cat_ == nil || [self->categories_ containsWithId:rule->cat_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element)

OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_[4];

@implementation OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element

+ (IOSObjectArray *)values {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values();
}

+ (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RENDER_THEME", "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "RENDERING_INSTRUCTION", "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "RULE", "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "RENDERING_STYLE", "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDER_THEME), &JreEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_INSTRUCTION), &JreEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RULE), &JreEnum(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element, RENDERING_STYLE), "LOrgMapsforgeMapRenderthemeRuleRenderThemeHandler;", "Ljava/lang/Enum<Lorg/mapsforge/map/rendertheme/rule/RenderThemeHandler$Element;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element = { "Element", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"RENDER_THEME", @"RENDERING_INSTRUCTION", @"RULE", @"RENDERING_STYLE",
    };
    for (jint i = 0; i < 4; i++) {
      (OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values() {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_ count:4 type:OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_class_()];
}

OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initialize();
  for (int i = 0; i < 4; i++) {
    OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *e = OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element *OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRenderThemeHandler_Element)
