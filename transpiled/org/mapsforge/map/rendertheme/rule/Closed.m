//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/Closed.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/map/rendertheme/rule/Closed.h"

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleClosed_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleClosed *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleClosed)

OrgMapsforgeMapRenderthemeRuleClosed *OrgMapsforgeMapRenderthemeRuleClosed_values_[3];

@implementation OrgMapsforgeMapRenderthemeRuleClosed

+ (OrgMapsforgeMapRenderthemeRuleClosed *)fromStringWithNSString:(NSString *)value {
  return OrgMapsforgeMapRenderthemeRuleClosed_fromStringWithNSString_(value);
}

+ (IOSObjectArray *)values {
  return OrgMapsforgeMapRenderthemeRuleClosed_values();
}

+ (OrgMapsforgeMapRenderthemeRuleClosed *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeMapRenderthemeRuleClosed_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeMapRenderthemeRuleClosed;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgMapsforgeMapRenderthemeRuleClosed;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleClosed;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromStringWithNSString:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY", "LOrgMapsforgeMapRenderthemeRuleClosed;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NO", "LOrgMapsforgeMapRenderthemeRuleClosed;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "YES", "LOrgMapsforgeMapRenderthemeRuleClosed;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "fromString", "LNSString;", "valueOf", &JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, ANY), &JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, NO), &JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, YES), "Ljava/lang/Enum<Lorg/mapsforge/map/rendertheme/rule/Closed;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleClosed = { "Closed", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x4010, 3, 3, -1, -1, -1, 6, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleClosed;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleClosed class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"ANY", @"NO", @"YES",
    };
    for (jint i = 0; i < 3; i++) {
      (OrgMapsforgeMapRenderthemeRuleClosed_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgMapsforgeMapRenderthemeRuleClosed_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleClosed)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleClosed_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleClosed *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgMapsforgeMapRenderthemeRuleClosed *OrgMapsforgeMapRenderthemeRuleClosed_fromStringWithNSString_(NSString *value) {
  OrgMapsforgeMapRenderthemeRuleClosed_initialize();
  if ([@"any" isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, ANY);
  }
  else if ([(@"no") isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, NO);
  }
  else if ([@"yes" isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleClosed, YES);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid value for Closed: ", value));
}

IOSObjectArray *OrgMapsforgeMapRenderthemeRuleClosed_values() {
  OrgMapsforgeMapRenderthemeRuleClosed_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeMapRenderthemeRuleClosed_values_ count:3 type:OrgMapsforgeMapRenderthemeRuleClosed_class_()];
}

OrgMapsforgeMapRenderthemeRuleClosed *OrgMapsforgeMapRenderthemeRuleClosed_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeMapRenderthemeRuleClosed_initialize();
  for (int i = 0; i < 3; i++) {
    OrgMapsforgeMapRenderthemeRuleClosed *e = OrgMapsforgeMapRenderthemeRuleClosed_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeMapRenderthemeRuleClosed *OrgMapsforgeMapRenderthemeRuleClosed_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeMapRenderthemeRuleClosed_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgMapsforgeMapRenderthemeRuleClosed_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleClosed)
