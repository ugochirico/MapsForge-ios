//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/Rule.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/mapsforge/map/rendertheme/rule/Closed.h"
#include "org/mapsforge/map/rendertheme/rule/ClosedMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/ElementMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/Rule.h"
#include "org/mapsforge/map/rendertheme/rule/RuleBuilder.h"

@interface OrgMapsforgeMapRenderthemeRuleRule () {
 @public
  JavaUtilArrayList *renderInstructions_;
  JavaUtilArrayList *subRules_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRule, renderInstructions_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleRule, subRules_, JavaUtilArrayList *)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleRule)

id<JavaUtilMap> OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_KEY;
id<JavaUtilMap> OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_VALUE;

@implementation OrgMapsforgeMapRenderthemeRuleRule

- (instancetype)initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder:(OrgMapsforgeMapRenderthemeRuleRuleBuilder *)ruleBuilder {
  OrgMapsforgeMapRenderthemeRuleRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_(self, ruleBuilder);
  return self;
}

- (void)addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *)renderInstruction {
  [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) addWithId:renderInstruction];
}

- (void)addSubRuleWithOrgMapsforgeMapRenderthemeRuleRule:(OrgMapsforgeMapRenderthemeRuleRule *)rule {
  [((JavaUtilArrayList *) nil_chk(self->subRules_)) addWithId:rule];
}

- (void)destroy {
  for (OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction * __strong ri in nil_chk(self->renderInstructions_)) {
    [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk(ri)) destroy];
  }
  for (OrgMapsforgeMapRenderthemeRuleRule * __strong sr in nil_chk(self->subRules_)) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk(sr)) destroy];
  }
}

- (jboolean)matchesNodeWithJavaUtilList:(id<JavaUtilList>)tags
                               withByte:(jbyte)zoomLevel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)matchesWayWithJavaUtilList:(id<JavaUtilList>)tags
                              withByte:(jbyte)zoomLevel
withOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                     withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)pointOfInterest
                                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                             withJavaUtilList:(id<JavaUtilList>)matchingList {
  if ([self matchesNodeWithJavaUtilList:((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(pointOfInterest))->tags_ withByte:((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_]) {
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([self->renderInstructions_ getWithInt:i])) renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapReaderPointOfInterest:pointOfInterest withOrgMapsforgeCoreModelTile:tile];
      [((id<JavaUtilList>) nil_chk(matchingList)) addWithId:[self->renderInstructions_ getWithInt:i]];
    }
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->subRules_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->subRules_ getWithInt:i])) matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapReaderPointOfInterest:pointOfInterest withOrgMapsforgeCoreModelTile:tile withJavaUtilList:matchingList];
    }
  }
}

- (void)matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
           withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                               withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                    withOrgMapsforgeMapRenderthemeRuleClosed:(OrgMapsforgeMapRenderthemeRuleClosed *)closed
                                            withJavaUtilList:(id<JavaUtilList>)matchingList {
  if ([self matchesWayWithJavaUtilList:[((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTags] withByte:((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_ withOrgMapsforgeMapRenderthemeRuleClosed:closed]) {
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([self->renderInstructions_ getWithInt:i])) renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapLayerRendererPolylineContainer:way];
      [((id<JavaUtilList>) nil_chk(matchingList)) addWithId:[self->renderInstructions_ getWithInt:i]];
    }
    for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->subRules_)) size]; i < n; ++i) {
      [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->subRules_ getWithInt:i])) matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:renderCallback withOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreModelTile:tile withOrgMapsforgeMapRenderthemeRuleClosed:closed withJavaUtilList:matchingList];
    }
  }
}

- (void)onComplete {
  [((id<JavaUtilMap>) nil_chk(OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_KEY)) clear];
  [((id<JavaUtilMap>) nil_chk(OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_VALUE)) clear];
  [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) trimToSize];
  [((JavaUtilArrayList *) nil_chk(self->subRules_)) trimToSize];
  for (jint i = 0, n = [self->subRules_ size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->subRules_ getWithInt:i])) onComplete];
  }
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([self->renderInstructions_ getWithInt:i])) scaleStrokeWidthWithFloat:scaleFactor];
  }
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->subRules_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->subRules_ getWithInt:i])) scaleStrokeWidthWithFloat:scaleFactor];
  }
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->renderInstructions_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction *) nil_chk([self->renderInstructions_ getWithInt:i])) scaleTextSizeWithFloat:scaleFactor];
  }
  for (jint i = 0, n = [((JavaUtilArrayList *) nil_chk(self->subRules_)) size]; i < n; ++i) {
    [((OrgMapsforgeMapRenderthemeRuleRule *) nil_chk([self->subRules_ getWithInt:i])) scaleTextSizeWithFloat:scaleFactor];
  }
}

- (void)dealloc {
  RELEASE_(cat_);
  RELEASE_(closedMatcher_);
  RELEASE_(elementMatcher_);
  RELEASE_(renderInstructions_);
  RELEASE_(subRules_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x400, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x400, 8, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x0, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 18, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder:);
  methods[1].selector = @selector(addRenderingInstructionWithOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction:);
  methods[2].selector = @selector(addSubRuleWithOrgMapsforgeMapRenderthemeRuleRule:);
  methods[3].selector = @selector(destroy);
  methods[4].selector = @selector(matchesNodeWithJavaUtilList:withByte:);
  methods[5].selector = @selector(matchesWayWithJavaUtilList:withByte:withOrgMapsforgeMapRenderthemeRuleClosed:);
  methods[6].selector = @selector(matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:withJavaUtilList:);
  methods[7].selector = @selector(matchWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreModelTile:withOrgMapsforgeMapRenderthemeRuleClosed:withJavaUtilList:);
  methods[8].selector = @selector(onComplete);
  methods[9].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[10].selector = @selector(scaleTextSizeWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MATCHERS_CACHE_KEY", "LJavaUtilMap;", .constantValue.asLong = 0, 0x18, -1, 20, 21, -1 },
    { "MATCHERS_CACHE_VALUE", "LJavaUtilMap;", .constantValue.asLong = 0, 0x18, -1, 22, 21, -1 },
    { "cat_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "closedMatcher_", "LOrgMapsforgeMapRenderthemeRuleClosedMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "elementMatcher_", "LOrgMapsforgeMapRenderthemeRuleElementMatcher;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "zoomMax_", "B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "zoomMin_", "B", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "renderInstructions_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
    { "subRules_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapRenderthemeRuleRuleBuilder;", "addRenderingInstruction", "LOrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction;", "addSubRule", "LOrgMapsforgeMapRenderthemeRuleRule;", "matchesNode", "LJavaUtilList;B", "(Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;B)Z", "matchesWay", "LJavaUtilList;BLOrgMapsforgeMapRenderthemeRuleClosed;", "(Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;BLorg/mapsforge/map/rendertheme/rule/Closed;)Z", "matchNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;LJavaUtilList;", "(Lorg/mapsforge/map/rendertheme/RenderCallback;Lorg/mapsforge/map/reader/PointOfInterest;Lorg/mapsforge/core/model/Tile;Ljava/util/List<Lorg/mapsforge/map/rendertheme/renderinstruction/RenderInstruction;>;)V", "matchWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreModelTile;LOrgMapsforgeMapRenderthemeRuleClosed;LJavaUtilList;", "(Lorg/mapsforge/map/rendertheme/RenderCallback;Lorg/mapsforge/map/layer/renderer/PolylineContainer;Lorg/mapsforge/core/model/Tile;Lorg/mapsforge/map/rendertheme/rule/Closed;Ljava/util/List<Lorg/mapsforge/map/rendertheme/renderinstruction/RenderInstruction;>;)V", "scaleStrokeWidth", "F", "scaleTextSize", &OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_KEY, "Ljava/util/Map<Ljava/util/List<Ljava/lang/String;>;Lorg/mapsforge/map/rendertheme/rule/AttributeMatcher;>;", &OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_VALUE, "Ljava/util/ArrayList<Lorg/mapsforge/map/rendertheme/renderinstruction/RenderInstruction;>;", "Ljava/util/ArrayList<Lorg/mapsforge/map/rendertheme/rule/Rule;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleRule = { "Rule", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x400, 11, 9, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleRule;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleRule class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_KEY, new_JavaUtilHashMap_init());
    JreStrongAssignAndConsume(&OrgMapsforgeMapRenderthemeRuleRule_MATCHERS_CACHE_VALUE, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleRule)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleRule_initWithOrgMapsforgeMapRenderthemeRuleRuleBuilder_(OrgMapsforgeMapRenderthemeRuleRule *self, OrgMapsforgeMapRenderthemeRuleRuleBuilder *ruleBuilder) {
  NSObject_init(self);
  JreStrongAssign(&self->cat_, ((OrgMapsforgeMapRenderthemeRuleRuleBuilder *) nil_chk(ruleBuilder))->cat_);
  JreStrongAssign(&self->closedMatcher_, ruleBuilder->closedMatcher_);
  JreStrongAssign(&self->elementMatcher_, ruleBuilder->elementMatcher_);
  self->zoomMax_ = ruleBuilder->zoomMax_;
  self->zoomMin_ = ruleBuilder->zoomMin_;
  JreStrongAssignAndConsume(&self->renderInstructions_, new_JavaUtilArrayList_initWithInt_(4));
  JreStrongAssignAndConsume(&self->subRules_, new_JavaUtilArrayList_initWithInt_(4));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleRule)
