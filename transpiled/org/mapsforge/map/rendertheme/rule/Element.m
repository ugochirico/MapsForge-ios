//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/Element.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/map/rendertheme/rule/Element.h"

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRuleElement_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleElement *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRuleElement)

OrgMapsforgeMapRenderthemeRuleElement *OrgMapsforgeMapRenderthemeRuleElement_values_[3];

@implementation OrgMapsforgeMapRenderthemeRuleElement

+ (OrgMapsforgeMapRenderthemeRuleElement *)fromStringWithNSString:(NSString *)value {
  return OrgMapsforgeMapRenderthemeRuleElement_fromStringWithNSString_(value);
}

+ (IOSObjectArray *)values {
  return OrgMapsforgeMapRenderthemeRuleElement_values();
}

+ (OrgMapsforgeMapRenderthemeRuleElement *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeMapRenderthemeRuleElement_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeMapRenderthemeRuleElement;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgMapsforgeMapRenderthemeRuleElement;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapRenderthemeRuleElement;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(fromStringWithNSString:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANY", "LOrgMapsforgeMapRenderthemeRuleElement;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "NODE", "LOrgMapsforgeMapRenderthemeRuleElement;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "WAY", "LOrgMapsforgeMapRenderthemeRuleElement;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "fromString", "LNSString;", "valueOf", &JreEnum(OrgMapsforgeMapRenderthemeRuleElement, ANY), &JreEnum(OrgMapsforgeMapRenderthemeRuleElement, NODE), &JreEnum(OrgMapsforgeMapRenderthemeRuleElement, WAY), "Ljava/lang/Enum<Lorg/mapsforge/map/rendertheme/rule/Element;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleElement = { "Element", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x4010, 3, 3, -1, -1, -1, 6, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleElement;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRuleElement class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    id names[] = {
      @"ANY", @"NODE", @"WAY",
    };
    for (jint i = 0; i < 3; i++) {
      (OrgMapsforgeMapRenderthemeRuleElement_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgMapsforgeMapRenderthemeRuleElement_initWithNSString_withInt_(e, names[i], i);
    }
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRuleElement)
  }
}

@end

void OrgMapsforgeMapRenderthemeRuleElement_initWithNSString_withInt_(OrgMapsforgeMapRenderthemeRuleElement *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgMapsforgeMapRenderthemeRuleElement *OrgMapsforgeMapRenderthemeRuleElement_fromStringWithNSString_(NSString *value) {
  OrgMapsforgeMapRenderthemeRuleElement_initialize();
  if ([@"any" isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleElement, ANY);
  }
  if ([@"node" isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleElement, NODE);
  }
  if ([@"way" isEqual:value]) {
    return JreEnum(OrgMapsforgeMapRenderthemeRuleElement, WAY);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Invalid value for Element: ", value));
}

IOSObjectArray *OrgMapsforgeMapRenderthemeRuleElement_values() {
  OrgMapsforgeMapRenderthemeRuleElement_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeMapRenderthemeRuleElement_values_ count:3 type:OrgMapsforgeMapRenderthemeRuleElement_class_()];
}

OrgMapsforgeMapRenderthemeRuleElement *OrgMapsforgeMapRenderthemeRuleElement_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeMapRenderthemeRuleElement_initialize();
  for (int i = 0; i < 3; i++) {
    OrgMapsforgeMapRenderthemeRuleElement *e = OrgMapsforgeMapRenderthemeRuleElement_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeMapRenderthemeRuleElement *OrgMapsforgeMapRenderthemeRuleElement_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeMapRenderthemeRuleElement_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgMapsforgeMapRenderthemeRuleElement_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleElement)
