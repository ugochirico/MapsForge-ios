//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/rule/KeyMatcher.java
//

#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/mapsforge/core/model/Tag.h"
#include "org/mapsforge/map/rendertheme/rule/AttributeMatcher.h"
#include "org/mapsforge/map/rendertheme/rule/KeyMatcher.h"

@interface OrgMapsforgeMapRenderthemeRuleKeyMatcher () {
 @public
  id<JavaUtilList> keys_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRuleKeyMatcher, keys_, id<JavaUtilList>)

@implementation OrgMapsforgeMapRenderthemeRuleKeyMatcher

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)keys {
  OrgMapsforgeMapRenderthemeRuleKeyMatcher_initWithJavaUtilList_(self, keys);
  return self;
}

- (jboolean)isCoveredByWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:(id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>)attributeMatcher {
  if (attributeMatcher == self) {
    return true;
  }
  id<JavaUtilList> tags = create_JavaUtilArrayList_initWithInt_([((id<JavaUtilList>) nil_chk(self->keys_)) size]);
  for (jint i = 0, n = [self->keys_ size]; i < n; ++i) {
    [tags addWithId:create_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_([self->keys_ getWithInt:i], nil)];
  }
  return [((id<OrgMapsforgeMapRenderthemeRuleAttributeMatcher>) nil_chk(attributeMatcher)) matchesWithJavaUtilList:tags];
}

- (jboolean)matchesWithJavaUtilList:(id<JavaUtilList>)tags {
  for (jint i = 0, n = [((id<JavaUtilList>) nil_chk(tags)) size]; i < n; ++i) {
    if ([((id<JavaUtilList>) nil_chk(self->keys_)) containsWithId:((OrgMapsforgeCoreModelTag *) nil_chk([tags getWithInt:i]))->key_]) {
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(keys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 0, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaUtilList:);
  methods[1].selector = @selector(isCoveredByWithOrgMapsforgeMapRenderthemeRuleAttributeMatcher:);
  methods[2].selector = @selector(matchesWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "isCoveredBy", "LOrgMapsforgeMapRenderthemeRuleAttributeMatcher;", "matches", "(Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;)Z", "Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRuleKeyMatcher = { "KeyMatcher", "org.mapsforge.map.rendertheme.rule", ptrTable, methods, fields, 7, 0x0, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRuleKeyMatcher;
}

@end

void OrgMapsforgeMapRenderthemeRuleKeyMatcher_initWithJavaUtilList_(OrgMapsforgeMapRenderthemeRuleKeyMatcher *self, id<JavaUtilList> keys) {
  NSObject_init(self);
  JreStrongAssign(&self->keys_, keys);
}

OrgMapsforgeMapRenderthemeRuleKeyMatcher *new_OrgMapsforgeMapRenderthemeRuleKeyMatcher_initWithJavaUtilList_(id<JavaUtilList> keys) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRuleKeyMatcher, initWithJavaUtilList_, keys)
}

OrgMapsforgeMapRenderthemeRuleKeyMatcher *create_OrgMapsforgeMapRenderthemeRuleKeyMatcher_initWithJavaUtilList_(id<JavaUtilList> keys) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRuleKeyMatcher, initWithJavaUtilList_, keys)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRuleKeyMatcher)
