//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/XmlUtils.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Byte.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/ResourceBitmap.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeXmlUtils ()

+ (void)checkForNegativeValueWithNSString:(NSString *)name
                                withFloat:(jfloat)value;

+ (JavaIoInputStream *)createInputStreamWithNSString:(NSString *)relativePathPrefix
                                        withNSString:(NSString *)src;

+ (NSString *)getAbsoluteNameWithNSString:(NSString *)relativePathPrefix
                             withNSString:(NSString *)name;

+ (jint)getColorWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                              withNSString:(NSString *)colorString
                                                   withInt:(jint)alpha
                                                   withInt:(jint)rgbStartIndex;

+ (JavaIoFile *)getFileWithNSString:(NSString *)parentPath
                       withNSString:(NSString *)pathName;

- (instancetype)init;

@end

inline NSString *OrgMapsforgeMapRenderthemeXmlUtils_get_PREFIX_FILE();
static NSString *OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_FILE = @"file:";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeXmlUtils, PREFIX_FILE, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeXmlUtils_get_PREFIX_JAR();
static NSString *OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR = @"jar:";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeXmlUtils, PREFIX_JAR, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeXmlUtils_get_PREFIX_JAR_V1();
static NSString *OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR_V1 = @"jar:/org/mapsforge/android/maps/rendertheme";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeXmlUtils, PREFIX_JAR_V1, NSString *)

inline NSString *OrgMapsforgeMapRenderthemeXmlUtils_get_UNSUPPORTED_COLOR_FORMAT();
static NSString *OrgMapsforgeMapRenderthemeXmlUtils_UNSUPPORTED_COLOR_FORMAT = @"unsupported color format: ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeXmlUtils, UNSUPPORTED_COLOR_FORMAT, NSString *)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(NSString *name, jfloat value);

__attribute__((unused)) static JavaIoInputStream *OrgMapsforgeMapRenderthemeXmlUtils_createInputStreamWithNSString_withNSString_(NSString *relativePathPrefix, NSString *src);

__attribute__((unused)) static NSString *OrgMapsforgeMapRenderthemeXmlUtils_getAbsoluteNameWithNSString_withNSString_(NSString *relativePathPrefix, NSString *name);

__attribute__((unused)) static jint OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withInt_withInt_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *colorString, jint alpha, jint rgbStartIndex);

__attribute__((unused)) static JavaIoFile *OrgMapsforgeMapRenderthemeXmlUtils_getFileWithNSString_withNSString_(NSString *parentPath, NSString *pathName);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeXmlUtils_init(OrgMapsforgeMapRenderthemeXmlUtils *self);

__attribute__((unused)) static OrgMapsforgeMapRenderthemeXmlUtils *new_OrgMapsforgeMapRenderthemeXmlUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapRenderthemeXmlUtils *create_OrgMapsforgeMapRenderthemeXmlUtils_init();

jboolean OrgMapsforgeMapRenderthemeXmlUtils_supportOlderRenderThemes = true;

@implementation OrgMapsforgeMapRenderthemeXmlUtils

+ (void)checkMandatoryAttributeWithNSString:(NSString *)elementName
                               withNSString:(NSString *)attributeName
                                     withId:(id)attributeValue {
  OrgMapsforgeMapRenderthemeXmlUtils_checkMandatoryAttributeWithNSString_withNSString_withId_(elementName, attributeName, attributeValue);
}

+ (id<OrgMapsforgeCoreGraphicsResourceBitmap>)createBitmapWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                                withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                                                        withNSString:(NSString *)relativePathPrefix
                                                                                        withNSString:(NSString *)src
                                                                                             withInt:(jint)width
                                                                                             withInt:(jint)height
                                                                                             withInt:(jint)percent {
  return OrgMapsforgeMapRenderthemeXmlUtils_createBitmapWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withNSString_withInt_withInt_withInt_(graphicFactory, displayModel, relativePathPrefix, src, width, height, percent);
}

+ (OrgXmlpullV1XmlPullParserException *)createXmlPullParserExceptionWithNSString:(NSString *)element
                                                                    withNSString:(NSString *)name
                                                                    withNSString:(NSString *)value
                                                                         withInt:(jint)attributeIndex {
  return OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(element, name, value, attributeIndex);
}

+ (jint)getColorWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                              withNSString:(NSString *)colorString {
  return OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, colorString);
}

+ (jbyte)parseNonNegativeByteWithNSString:(NSString *)name
                             withNSString:(NSString *)value {
  return OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeByteWithNSString_withNSString_(name, value);
}

+ (jfloat)parseNonNegativeFloatWithNSString:(NSString *)name
                               withNSString:(NSString *)value {
  return OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value);
}

+ (jint)parseNonNegativeIntegerWithNSString:(NSString *)name
                               withNSString:(NSString *)value {
  return OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value);
}

+ (void)checkForNegativeValueWithNSString:(NSString *)name
                                withFloat:(jfloat)value {
  OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(name, value);
}

+ (JavaIoInputStream *)createInputStreamWithNSString:(NSString *)relativePathPrefix
                                        withNSString:(NSString *)src {
  return OrgMapsforgeMapRenderthemeXmlUtils_createInputStreamWithNSString_withNSString_(relativePathPrefix, src);
}

+ (NSString *)getAbsoluteNameWithNSString:(NSString *)relativePathPrefix
                             withNSString:(NSString *)name {
  return OrgMapsforgeMapRenderthemeXmlUtils_getAbsoluteNameWithNSString_withNSString_(relativePathPrefix, name);
}

+ (jint)getColorWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                              withNSString:(NSString *)colorString
                                                   withInt:(jint)alpha
                                                   withInt:(jint)rgbStartIndex {
  return OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withInt_withInt_(graphicFactory, colorString, alpha, rgbStartIndex);
}

+ (JavaIoFile *)getFileWithNSString:(NSString *)parentPath
                       withNSString:(NSString *)pathName {
  return OrgMapsforgeMapRenderthemeXmlUtils_getFileWithNSString_withNSString_(parentPath, pathName);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapRenderthemeXmlUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsResourceBitmap;", 0x9, 3, 4, 5, -1, -1, -1 },
    { NULL, "LOrgXmlpullV1XmlPullParserException;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "B", 0x9, 10, 11, 2, -1, -1, -1 },
    { NULL, "F", 0x9, 12, 11, 2, -1, -1, -1 },
    { NULL, "I", 0x9, 13, 11, 2, -1, -1, -1 },
    { NULL, "V", 0xa, 14, 15, 2, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0xa, 16, 11, 17, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 18, 11, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 8, 19, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0xa, 20, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkMandatoryAttributeWithNSString:withNSString:withId:);
  methods[1].selector = @selector(createBitmapWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withNSString:withInt:withInt:withInt:);
  methods[2].selector = @selector(createXmlPullParserExceptionWithNSString:withNSString:withNSString:withInt:);
  methods[3].selector = @selector(getColorWithOrgMapsforgeCoreGraphicsGraphicFactory:withNSString:);
  methods[4].selector = @selector(parseNonNegativeByteWithNSString:withNSString:);
  methods[5].selector = @selector(parseNonNegativeFloatWithNSString:withNSString:);
  methods[6].selector = @selector(parseNonNegativeIntegerWithNSString:withNSString:);
  methods[7].selector = @selector(checkForNegativeValueWithNSString:withFloat:);
  methods[8].selector = @selector(createInputStreamWithNSString:withNSString:);
  methods[9].selector = @selector(getAbsoluteNameWithNSString:withNSString:);
  methods[10].selector = @selector(getColorWithOrgMapsforgeCoreGraphicsGraphicFactory:withNSString:withInt:withInt:);
  methods[11].selector = @selector(getFileWithNSString:withNSString:);
  methods[12].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "supportOlderRenderThemes", "Z", .constantValue.asLong = 0, 0x9, -1, 21, -1, -1 },
    { "PREFIX_FILE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "PREFIX_JAR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "PREFIX_JAR_V1", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "UNSUPPORTED_COLOR_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
  };
  static const void *ptrTable[] = { "checkMandatoryAttribute", "LNSString;LNSString;LNSObject;", "LOrgXmlpullV1XmlPullParserException;", "createBitmap", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LNSString;III", "LJavaIoIOException;", "createXmlPullParserException", "LNSString;LNSString;LNSString;I", "getColor", "LOrgMapsforgeCoreGraphicsGraphicFactory;LNSString;", "parseNonNegativeByte", "LNSString;LNSString;", "parseNonNegativeFloat", "parseNonNegativeInteger", "checkForNegativeValue", "LNSString;F", "createInputStream", "LJavaIoFileNotFoundException;", "getAbsoluteName", "LOrgMapsforgeCoreGraphicsGraphicFactory;LNSString;II", "getFile", &OrgMapsforgeMapRenderthemeXmlUtils_supportOlderRenderThemes, &OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_FILE, &OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR, &OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR_V1, &OrgMapsforgeMapRenderthemeXmlUtils_UNSUPPORTED_COLOR_FORMAT };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeXmlUtils = { "XmlUtils", "org.mapsforge.map.rendertheme", ptrTable, methods, fields, 7, 0x11, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeXmlUtils;
}

@end

void OrgMapsforgeMapRenderthemeXmlUtils_checkMandatoryAttributeWithNSString_withNSString_withId_(NSString *elementName, NSString *attributeName, id attributeValue) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if (attributeValue == nil) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$$", @"missing attribute '", attributeName, @"' for element: ", elementName));
  }
}

id<OrgMapsforgeCoreGraphicsResourceBitmap> OrgMapsforgeMapRenderthemeXmlUtils_createBitmapWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withNSString_withInt_withInt_withInt_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *relativePathPrefix, NSString *src, jint width, jint height, jint percent) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if (src == nil || [src java_length] == 0) {
    return nil;
  }
  JavaIoInputStream *inputStream = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) platformSpecificSourcesWithNSString:relativePathPrefix withNSString:src];
  if (inputStream == nil) {
    inputStream = OrgMapsforgeMapRenderthemeXmlUtils_createInputStreamWithNSString_withNSString_(relativePathPrefix, src);
  }
  @try {
    NSString *absoluteName = OrgMapsforgeMapRenderthemeXmlUtils_getAbsoluteNameWithNSString_withNSString_(relativePathPrefix, src);
    jint hash_ = ((jint) [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([create_JavaLangStringBuilder_init() appendWithNSString:absoluteName])) appendWithInt:width])) appendWithInt:height])) appendWithInt:percent])) description])) hash]);
    if ([src java_hasSuffix:@".svg"]) {
      @try {
        return [graphicFactory renderSvgWithJavaIoInputStream:inputStream withFloat:[((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor] withInt:width withInt:height withInt:percent withInt:hash_];
      }
      @catch (JavaIoIOException *e) {
        @throw create_JavaIoIOException_initWithNSString_withNSException_(JreStrcat("$$", @"SVG render failed ", src), e);
      }
    }
    @try {
      return [graphicFactory createResourceBitmapWithJavaIoInputStream:inputStream withInt:((jint) [((NSString *) nil_chk(absoluteName)) hash])];
    }
    @catch (JavaIoIOException *e) {
      @throw create_JavaIoIOException_initWithNSString_withNSException_(JreStrcat("$$", @"Reading bitmap file failed ", src), e);
    }
  }
  @finally {
    [((JavaIoInputStream *) nil_chk(inputStream)) close];
  }
}

OrgXmlpullV1XmlPullParserException *OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(NSString *element, NSString *name, NSString *value, jint attributeIndex) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  [stringBuilder appendWithNSString:@"unknown attribute ("];
  [stringBuilder appendWithInt:attributeIndex];
  [stringBuilder appendWithNSString:@") in element '"];
  [stringBuilder appendWithNSString:element];
  [stringBuilder appendWithNSString:@"': "];
  [stringBuilder appendWithNSString:name];
  [stringBuilder appendWithChar:'='];
  [stringBuilder appendWithNSString:value];
  return create_OrgXmlpullV1XmlPullParserException_initWithNSString_([stringBuilder description]);
}

jint OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *colorString) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if ([((NSString *) nil_chk(colorString)) java_isEmpty] || [colorString charAtWithInt:0] != '#') {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", OrgMapsforgeMapRenderthemeXmlUtils_UNSUPPORTED_COLOR_FORMAT, colorString));
  }
  else if ([colorString java_length] == 7) {
    return OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withInt_withInt_(graphicFactory, colorString, 255, 1);
  }
  else if ([colorString java_length] == 9) {
    return OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withInt_withInt_(graphicFactory, colorString, JavaLangInteger_parseIntWithNSString_withInt_([colorString java_substring:1 endIndex:3], 16), 3);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", OrgMapsforgeMapRenderthemeXmlUtils_UNSUPPORTED_COLOR_FORMAT, colorString));
  }
}

jbyte OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeByteWithNSString_withNSString_(NSString *name, NSString *value) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  jbyte parsedByte = JavaLangByte_parseByteWithNSString_(value);
  OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(name, parsedByte);
  return parsedByte;
}

jfloat OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(NSString *name, NSString *value) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  jfloat parsedFloat = JavaLangFloat_parseFloatWithNSString_(value);
  OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(name, parsedFloat);
  return parsedFloat;
}

jint OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(NSString *name, NSString *value) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  jint parsedInt = JavaLangInteger_parseIntWithNSString_(value);
  OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(name, parsedInt);
  return parsedInt;
}

void OrgMapsforgeMapRenderthemeXmlUtils_checkForNegativeValueWithNSString_withFloat_(NSString *name, jfloat value) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if (value < 0) {
    @throw create_OrgXmlpullV1XmlPullParserException_initWithNSString_(JreStrcat("$$$F", @"Attribute '", name, @"' must not be negative: ", value));
  }
}

JavaIoInputStream *OrgMapsforgeMapRenderthemeXmlUtils_createInputStreamWithNSString_withNSString_(NSString *relativePathPrefix, NSString *src) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if ([((NSString *) nil_chk(src)) java_hasPrefix:OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR]) {
    NSString *prefixJar;
    if (!OrgMapsforgeMapRenderthemeXmlUtils_supportOlderRenderThemes) {
      prefixJar = OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR;
    }
    else {
      prefixJar = [src java_hasPrefix:OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR_V1] ? OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR_V1 : OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_JAR;
    }
    NSString *absoluteName = OrgMapsforgeMapRenderthemeXmlUtils_getAbsoluteNameWithNSString_withNSString_(relativePathPrefix, [src java_substring:[((NSString *) nil_chk(prefixJar)) java_length]]);
    JavaIoInputStream *inputStream = [OrgMapsforgeMapRenderthemeXmlUtils_class_() getResourceAsStream:absoluteName];
    if (inputStream == nil) {
      @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"resource not found: ", absoluteName));
    }
    return inputStream;
  }
  else if ([src java_hasPrefix:OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_FILE]) {
    JavaIoFile *file = OrgMapsforgeMapRenderthemeXmlUtils_getFileWithNSString_withNSString_(relativePathPrefix, [src java_substring:[((NSString *) nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_FILE)) java_length]]);
    if (![((JavaIoFile *) nil_chk(file)) exists]) {
      NSString *pathName = [src java_substring:[OrgMapsforgeMapRenderthemeXmlUtils_PREFIX_FILE java_length]];
      if ([((NSString *) nil_chk(pathName)) java_length] > 0 && [pathName charAtWithInt:0] == JreLoadStatic(JavaIoFile, separatorChar)) {
        file = OrgMapsforgeMapRenderthemeXmlUtils_getFileWithNSString_withNSString_(relativePathPrefix, [pathName java_substring:1]);
      }
      if (![((JavaIoFile *) nil_chk(file)) exists]) {
        @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"file does not exist: ", [file getAbsolutePath]));
      }
    }
    else if (![file isFile]) {
      @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"not a file: ", [file getAbsolutePath]));
    }
    else if (![file canRead]) {
      @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"cannot read file: ", [file getAbsolutePath]));
    }
    return create_JavaIoFileInputStream_initWithJavaIoFile_(file);
  }
  @throw create_JavaIoFileNotFoundException_initWithNSString_(JreStrcat("$$", @"invalid bitmap source: ", src));
}

NSString *OrgMapsforgeMapRenderthemeXmlUtils_getAbsoluteNameWithNSString_withNSString_(NSString *relativePathPrefix, NSString *name) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if ([((NSString *) nil_chk(name)) charAtWithInt:0] == '/') {
    return name;
  }
  return JreStrcat("$$", relativePathPrefix, name);
}

jint OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_withInt_withInt_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, NSString *colorString, jint alpha, jint rgbStartIndex) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  jint red = JavaLangInteger_parseIntWithNSString_withInt_([((NSString *) nil_chk(colorString)) java_substring:rgbStartIndex endIndex:rgbStartIndex + 2], 16);
  jint green = JavaLangInteger_parseIntWithNSString_withInt_([colorString java_substring:rgbStartIndex + 2 endIndex:rgbStartIndex + 4], 16);
  jint blue = JavaLangInteger_parseIntWithNSString_withInt_([colorString java_substring:rgbStartIndex + 4 endIndex:rgbStartIndex + 6], 16);
  return [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createColorWithInt:alpha withInt:red withInt:green withInt:blue];
}

JavaIoFile *OrgMapsforgeMapRenderthemeXmlUtils_getFileWithNSString_withNSString_(NSString *parentPath, NSString *pathName) {
  OrgMapsforgeMapRenderthemeXmlUtils_initialize();
  if ([((NSString *) nil_chk(pathName)) charAtWithInt:0] == JreLoadStatic(JavaIoFile, separatorChar)) {
    return create_JavaIoFile_initWithNSString_(pathName);
  }
  return create_JavaIoFile_initWithNSString_withNSString_(parentPath, pathName);
}

void OrgMapsforgeMapRenderthemeXmlUtils_init(OrgMapsforgeMapRenderthemeXmlUtils *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapRenderthemeXmlUtils *new_OrgMapsforgeMapRenderthemeXmlUtils_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeXmlUtils, init)
}

OrgMapsforgeMapRenderthemeXmlUtils *create_OrgMapsforgeMapRenderthemeXmlUtils_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeXmlUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeXmlUtils)
