//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/renderinstruction/Line.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Float.h"
#include "java/util/regex/Pattern.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Cap.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Join.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Line.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRenderinstructionLine () {
 @public
  jboolean bitmapCreated_;
  jfloat dy_;
  jfloat dyScaled_;
  jint level_;
  NSString *relativePathPrefix_;
  NSString *src_;
  id<OrgMapsforgeCoreGraphicsPaint> stroke_;
  jfloat strokeWidth_;
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                   withNSString:(NSString *)relativePathPrefix;

+ (IOSFloatArray *)parseFloatArrayWithNSString:(NSString *)name
                                  withNSString:(NSString *)dashString;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionLine, relativePathPrefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionLine, src_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionLine, stroke_, id<OrgMapsforgeCoreGraphicsPaint>)

inline JavaUtilRegexPattern *OrgMapsforgeMapRenderthemeRenderinstructionLine_get_SPLIT_PATTERN();
static JavaUtilRegexPattern *OrgMapsforgeMapRenderthemeRenderinstructionLine_SPLIT_PATTERN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapRenderthemeRenderinstructionLine, SPLIT_PATTERN, JavaUtilRegexPattern *)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRenderinstructionLine_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(OrgMapsforgeMapRenderthemeRenderinstructionLine *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, NSString *relativePathPrefix);

__attribute__((unused)) static IOSFloatArray *OrgMapsforgeMapRenderthemeRenderinstructionLine_parseFloatArrayWithNSString_withNSString_(NSString *name, NSString *dashString);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapRenderthemeRenderinstructionLine)

@implementation OrgMapsforgeMapRenderthemeRenderinstructionLine

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                       withInt:(jint)level
                                                  withNSString:(NSString *)relativePathPrefix {
  OrgMapsforgeMapRenderthemeRenderinstructionLine_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(self, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix);
  return self;
}

- (void)destroy {
}

- (void)renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                      withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
}

- (void)renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
            withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  if (!bitmapCreated_) {
    @try {
      id<OrgMapsforgeCoreGraphicsBitmap> shaderBitmap = [self createBitmapWithNSString:relativePathPrefix_ withNSString:src_];
      if (shaderBitmap != nil) {
        [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setBitmapShaderWithOrgMapsforgeCoreGraphicsBitmap:shaderBitmap];
        [shaderBitmap decrementRefCount];
      }
    }
    @catch (JavaIoIOException *ioException) {
    }
    bitmapCreated_ = true;
  }
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setBitmapShaderShiftWithOrgMapsforgeCoreModelPoint:[((OrgMapsforgeCoreModelTile *) nil_chk([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTile])) getOrigin]];
  [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderWayWithOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreGraphicsPaint:self->stroke_ withFloat:self->dyScaled_ withInt:self->level_];
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setStrokeWidthWithFloat:self->strokeWidth_ * scaleFactor];
  self->dyScaled_ = self->dy_ * scaleFactor;
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                   withNSString:(NSString *)relativePathPrefix {
  OrgMapsforgeMapRenderthemeRenderinstructionLine_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(self, graphicFactory, displayModel, elementName, pullParser, relativePathPrefix);
}

+ (IOSFloatArray *)parseFloatArrayWithNSString:(NSString *)name
                                  withNSString:(NSString *)dashString {
  return OrgMapsforgeMapRenderthemeRenderinstructionLine_parseFloatArrayWithNSString_withNSString_(name, dashString);
}

- (void)dealloc {
  RELEASE_(relativePathPrefix_);
  RELEASE_(src_);
  RELEASE_(stroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 1, -1, -1, -1 },
    { NULL, "[F", 0xa, 11, 12, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withInt:withNSString:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[3].selector = @selector(renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[4].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[5].selector = @selector(scaleTextSizeWithFloat:);
  methods[6].selector = @selector(extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withNSString:);
  methods[7].selector = @selector(parseFloatArrayWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPLIT_PATTERN", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "bitmapCreated_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dy_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dyScaled_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "level_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "relativePathPrefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "src_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "strokeWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;ILNSString;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "renderNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "scaleStrokeWidth", "F", "scaleTextSize", "extractValues", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;LNSString;", "parseFloatArray", "LNSString;LNSString;", "LOrgXmlpullV1XmlPullParserException;", &OrgMapsforgeMapRenderthemeRenderinstructionLine_SPLIT_PATTERN };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRenderinstructionLine = { "Line", "org.mapsforge.map.rendertheme.renderinstruction", ptrTable, methods, fields, 7, 0x1, 8, 9, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRenderinstructionLine;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapRenderthemeRenderinstructionLine class]) {
    JreStrongAssign(&OrgMapsforgeMapRenderthemeRenderinstructionLine_SPLIT_PATTERN, JavaUtilRegexPattern_compileWithNSString_(@","));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapRenderthemeRenderinstructionLine)
  }
}

@end

void OrgMapsforgeMapRenderthemeRenderinstructionLine_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(OrgMapsforgeMapRenderthemeRenderinstructionLine *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  self->level_ = level;
  JreStrongAssign(&self->relativePathPrefix_, relativePathPrefix);
  JreStrongAssign(&self->stroke_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, BLACK)];
  [self->stroke_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  [self->stroke_ setStrokeCapWithOrgMapsforgeCoreGraphicsCap:JreLoadEnum(OrgMapsforgeCoreGraphicsCap, ROUND)];
  [self->stroke_ setStrokeJoinWithOrgMapsforgeCoreGraphicsJoin:JreLoadEnum(OrgMapsforgeCoreGraphicsJoin, ROUND)];
  OrgMapsforgeMapRenderthemeRenderinstructionLine_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(self, graphicFactory, displayModel, elementName, pullParser, relativePathPrefix);
}

OrgMapsforgeMapRenderthemeRenderinstructionLine *new_OrgMapsforgeMapRenderthemeRenderinstructionLine_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionLine, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix)
}

OrgMapsforgeMapRenderthemeRenderinstructionLine *create_OrgMapsforgeMapRenderthemeRenderinstructionLine_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionLine, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix)
}

void OrgMapsforgeMapRenderthemeRenderinstructionLine_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(OrgMapsforgeMapRenderthemeRenderinstructionLine *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, NSString *relativePathPrefix) {
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SRC)) isEqual:name]) {
      JreStrongAssign(&self->src_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_CAT)) isEqual:name]) {
      JreStrongAssign(&self->category_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_DY)) isEqual:name]) {
      self->dy_ = JavaLangFloat_parseFloatWithNSString_(value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
      self->dyScaled_ = self->dy_;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_WIDTH)) isEqual:name]) {
      self->strokeWidth_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_DASHARRAY)) isEqual:name]) {
      IOSFloatArray *floatArray = OrgMapsforgeMapRenderthemeRenderinstructionLine_parseFloatArrayWithNSString_withNSString_(name, value);
      for (jint f = 0; f < ((IOSFloatArray *) nil_chk(floatArray))->size_; ++f) {
        *IOSFloatArray_GetRef(floatArray, f) = IOSFloatArray_Get(floatArray, f) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
      }
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setDashPathEffectWithFloatArray:floatArray];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_LINECAP)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setStrokeCapWithOrgMapsforgeCoreGraphicsCap:OrgMapsforgeCoreGraphicsCap_fromStringWithNSString_(value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_LINEJOIN)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setStrokeJoinWithOrgMapsforgeCoreGraphicsJoin:OrgMapsforgeCoreGraphicsJoin_fromStringWithNSString_(value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_HEIGHT)) isEqual:name]) {
      self->height_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_PERCENT)) isEqual:name]) {
      self->percent_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_SCALING)) isEqual:name]) {
      JreStrongAssign(&self->scaling_, [self fromValueWithNSString:value]);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_WIDTH)) isEqual:name]) {
      self->width_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
}

IOSFloatArray *OrgMapsforgeMapRenderthemeRenderinstructionLine_parseFloatArrayWithNSString_withNSString_(NSString *name, NSString *dashString) {
  OrgMapsforgeMapRenderthemeRenderinstructionLine_initialize();
  IOSObjectArray *dashEntries = [((JavaUtilRegexPattern *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionLine_SPLIT_PATTERN)) splitWithJavaLangCharSequence:dashString];
  IOSFloatArray *dashIntervals = [IOSFloatArray arrayWithLength:((IOSObjectArray *) nil_chk(dashEntries))->size_];
  for (jint i = 0; i < dashEntries->size_; ++i) {
    *IOSFloatArray_GetRef(dashIntervals, i) = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, IOSObjectArray_Get(dashEntries, i));
  }
  return dashIntervals;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRenderinstructionLine)
