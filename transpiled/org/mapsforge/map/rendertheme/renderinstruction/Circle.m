//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/renderinstruction/Circle.java
//

#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Circle.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRenderinstructionCircle () {
 @public
  id<OrgMapsforgeCoreGraphicsPaint> fill_;
  jint level_;
  jfloat radius_;
  jfloat renderRadius_;
  jboolean scaleRadius_;
  id<OrgMapsforgeCoreGraphicsPaint> stroke_;
  jfloat strokeWidth_;
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCircle, fill_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCircle, stroke_, id<OrgMapsforgeCoreGraphicsPaint>)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRenderinstructionCircle_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionCircle *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser);

@implementation OrgMapsforgeMapRenderthemeRenderinstructionCircle

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                       withInt:(jint)level {
  OrgMapsforgeMapRenderthemeRenderinstructionCircle_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_(self, graphicFactory, displayModel, elementName, pullParser, level);
  return self;
}

- (void)destroy {
}

- (void)renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                      withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderPointOfInterestCircleWithOrgMapsforgeMapReaderPointOfInterest:poi withFloat:self->renderRadius_ withOrgMapsforgeCoreGraphicsPaint:self->fill_ withOrgMapsforgeCoreGraphicsPaint:self->stroke_ withInt:self->level_ withOrgMapsforgeCoreModelTile:tile];
}

- (void)renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
            withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
  if (self->scaleRadius_) {
    self->renderRadius_ = self->radius_ * scaleFactor;
    if (self->stroke_ != nil) {
      [self->stroke_ setStrokeWidthWithFloat:self->strokeWidth_ * scaleFactor];
    }
  }
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRenderinstructionCircle_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, displayModel, elementName, pullParser);
}

- (void)dealloc {
  RELEASE_(fill_);
  RELEASE_(stroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withInt:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[3].selector = @selector(renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[4].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[5].selector = @selector(scaleTextSizeWithFloat:);
  methods[6].selector = @selector(extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fill_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "level_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "radius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "renderRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleRadius_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "strokeWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;I", "LOrgXmlpullV1XmlPullParserException;", "renderNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "scaleStrokeWidth", "F", "scaleTextSize", "extractValues", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRenderinstructionCircle = { "Circle", "org.mapsforge.map.rendertheme.renderinstruction", ptrTable, methods, fields, 7, 0x1, 7, 7, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRenderinstructionCircle;
}

@end

void OrgMapsforgeMapRenderthemeRenderinstructionCircle_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_(OrgMapsforgeMapRenderthemeRenderinstructionCircle *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level) {
  OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  self->level_ = level;
  JreStrongAssign(&self->fill_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, TRANSPARENT)];
  [self->fill_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, FILL)];
  JreStrongAssign(&self->stroke_, [graphicFactory createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, TRANSPARENT)];
  [self->stroke_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  OrgMapsforgeMapRenderthemeRenderinstructionCircle_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, displayModel, elementName, pullParser);
  if (!self->scaleRadius_) {
    self->renderRadius_ = self->radius_;
    [self->stroke_ setStrokeWidthWithFloat:self->strokeWidth_];
  }
}

OrgMapsforgeMapRenderthemeRenderinstructionCircle *new_OrgMapsforgeMapRenderthemeRenderinstructionCircle_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionCircle, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_, graphicFactory, displayModel, elementName, pullParser, level)
}

OrgMapsforgeMapRenderthemeRenderinstructionCircle *create_OrgMapsforgeMapRenderthemeRenderinstructionCircle_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionCircle, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_, graphicFactory, displayModel, elementName, pullParser, level)
}

void OrgMapsforgeMapRenderthemeRenderinstructionCircle_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionCircle *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_RADIUS)) isEqual:name] || (JreLoadStatic(OrgMapsforgeMapRenderthemeXmlUtils, supportOlderRenderThemes) && [((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_R)) isEqual:name])) {
      self->radius_ = [JavaLangFloat_valueOfWithFloat_(OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value)) floatValue] * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SCALE_RADIUS)) isEqual:name]) {
      self->scaleRadius_ = JavaLangBoolean_parseBooleanWithNSString_(value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_CAT)) isEqual:name]) {
      JreStrongAssign(&self->category_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FILL)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_WIDTH)) isEqual:name]) {
      self->strokeWidth_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
  OrgMapsforgeMapRenderthemeXmlUtils_checkMandatoryAttributeWithNSString_withNSString_withId_(elementName, OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_RADIUS, JavaLangFloat_valueOfWithFloat_(self->radius_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRenderinstructionCircle)
