//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/renderinstruction/Caption.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "org/mapsforge/core/graphics/Align.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/Display.h"
#include "org/mapsforge/core/graphics/FontFamily.h"
#include "org/mapsforge/core/graphics/FontStyle.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Position.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Caption.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Symbol.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/TextKey.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRenderinstructionCaption () {
 @public
  id<OrgMapsforgeCoreGraphicsBitmap> bitmap_;
  OrgMapsforgeCoreGraphicsPosition *position_;
  OrgMapsforgeCoreGraphicsDisplay *display_;
  jfloat dy_;
  jfloat dyScaled_;
  id<OrgMapsforgeCoreGraphicsPaint> fill_;
  jfloat fontSize_;
  jfloat gap_;
  jint maxTextWidth_;
  jint priority_;
  id<OrgMapsforgeCoreGraphicsPaint> stroke_;
  OrgMapsforgeMapRenderthemeRenderinstructionTextKey *textKey_;
}

- (jfloat)computeHorizontalOffset;

- (jfloat)computeVerticalOffset;

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, bitmap_, id<OrgMapsforgeCoreGraphicsBitmap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, position_, OrgMapsforgeCoreGraphicsPosition *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, display_, OrgMapsforgeCoreGraphicsDisplay *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, fill_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, stroke_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionCaption, textKey_, OrgMapsforgeMapRenderthemeRenderinstructionTextKey *)

__attribute__((unused)) static jfloat OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeHorizontalOffset(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self);

__attribute__((unused)) static jfloat OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeVerticalOffset(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self);

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRenderinstructionCaption_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser);

@implementation OrgMapsforgeMapRenderthemeRenderinstructionCaption

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                               withJavaUtilMap:(id<JavaUtilMap>)symbols {
  OrgMapsforgeMapRenderthemeRenderinstructionCaption_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_(self, graphicFactory, displayModel, elementName, pullParser, symbols);
  return self;
}

- (void)destroy {
}

- (void)renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                      withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, NEVER) == self->display_) {
    return;
  }
  NSString *caption = [((OrgMapsforgeMapRenderthemeRenderinstructionTextKey *) nil_chk(self->textKey_)) getValueWithJavaUtilList:((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(poi))->tags_];
  if (caption == nil) {
    return;
  }
  jfloat horizontalOffset = 0.0f;
  jfloat verticalOffset = self->dyScaled_;
  if (self->bitmap_ != nil) {
    horizontalOffset = OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeHorizontalOffset(self);
    verticalOffset = OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeVerticalOffset(self);
  }
  [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderPointOfInterestCaptionWithOrgMapsforgeMapReaderPointOfInterest:poi withOrgMapsforgeCoreGraphicsDisplay:self->display_ withInt:self->priority_ withNSString:caption withFloat:horizontalOffset withFloat:verticalOffset withOrgMapsforgeCoreGraphicsPaint:self->fill_ withOrgMapsforgeCoreGraphicsPaint:self->stroke_ withOrgMapsforgeCoreGraphicsPosition:self->position_ withInt:self->maxTextWidth_ withOrgMapsforgeCoreModelTile:tile];
}

- (void)renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
            withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, NEVER) == self->display_) {
    return;
  }
  NSString *caption = [((OrgMapsforgeMapRenderthemeRenderinstructionTextKey *) nil_chk(self->textKey_)) getValueWithJavaUtilList:[((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTags]];
  if (caption == nil) {
    return;
  }
  jfloat horizontalOffset = 0.0f;
  jfloat verticalOffset = self->dyScaled_;
  if (self->bitmap_ != nil) {
    horizontalOffset = OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeHorizontalOffset(self);
    verticalOffset = OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeVerticalOffset(self);
  }
  [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderAreaCaptionWithOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreGraphicsDisplay:self->display_ withInt:self->priority_ withNSString:caption withFloat:horizontalOffset withFloat:verticalOffset withOrgMapsforgeCoreGraphicsPaint:self->fill_ withOrgMapsforgeCoreGraphicsPaint:self->stroke_ withOrgMapsforgeCoreGraphicsPosition:self->position_ withInt:self->maxTextWidth_];
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setTextSizeWithFloat:self->fontSize_ * scaleFactor];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setTextSizeWithFloat:self->fontSize_ * scaleFactor];
  self->dyScaled_ = self->dy_ * scaleFactor;
}

- (jfloat)computeHorizontalOffset {
  return OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeHorizontalOffset(self);
}

- (jfloat)computeVerticalOffset {
  return OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeVerticalOffset(self);
}

- (void)extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                           withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                   withNSString:(NSString *)elementName
                                  withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRenderinstructionCaption_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, displayModel, elementName, pullParser);
}

- (void)dealloc {
  RELEASE_(bitmap_);
  RELEASE_(position_);
  RELEASE_(display_);
  RELEASE_(fill_);
  RELEASE_(stroke_);
  RELEASE_(textKey_);
  RELEASE_(symbolId_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, 2, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withJavaUtilMap:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[3].selector = @selector(renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[4].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[5].selector = @selector(scaleTextSizeWithFloat:);
  methods[6].selector = @selector(computeHorizontalOffset);
  methods[7].selector = @selector(computeVerticalOffset);
  methods[8].selector = @selector(extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitmap_", "LOrgMapsforgeCoreGraphicsBitmap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "position_", "LOrgMapsforgeCoreGraphicsPosition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "display_", "LOrgMapsforgeCoreGraphicsDisplay;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dy_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dyScaled_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fill_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fontSize_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "gap_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxTextWidth_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "textKey_", "LOrgMapsforgeMapRenderthemeRenderinstructionTextKey;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_GAP", "F", .constantValue.asFloat = OrgMapsforgeMapRenderthemeRenderinstructionCaption_DEFAULT_GAP, 0x19, -1, -1, -1, -1 },
    { "symbolId_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;LJavaUtilMap;", "LOrgXmlpullV1XmlPullParserException;", "(Lorg/mapsforge/core/graphics/GraphicFactory;Lorg/mapsforge/map/model/DisplayModel;Ljava/lang/String;Lorg/xmlpull/v1/XmlPullParser;Ljava/util/Map<Ljava/lang/String;Lorg/mapsforge/map/rendertheme/renderinstruction/Symbol;>;)V", "renderNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "scaleStrokeWidth", "F", "scaleTextSize", "extractValues", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRenderinstructionCaption = { "Caption", "org.mapsforge.map.rendertheme.renderinstruction", ptrTable, methods, fields, 7, 0x1, 9, 14, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRenderinstructionCaption;
}

@end

void OrgMapsforgeMapRenderthemeRenderinstructionCaption_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, id<JavaUtilMap> symbols) {
  OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  JreStrongAssign(&self->fill_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, BLACK)];
  [self->fill_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, FILL)];
  JreStrongAssign(&self->stroke_, [graphicFactory createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, BLACK)];
  [self->stroke_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  JreStrongAssign(&self->display_, JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, IFSPACE));
  self->gap_ = OrgMapsforgeMapRenderthemeRenderinstructionCaption_DEFAULT_GAP * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
  OrgMapsforgeMapRenderthemeRenderinstructionCaption_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(self, graphicFactory, displayModel, elementName, pullParser);
  if (self->symbolId_ != nil) {
    OrgMapsforgeMapRenderthemeRenderinstructionSymbol *symbol = [((id<JavaUtilMap>) nil_chk(symbols)) getWithId:self->symbolId_];
    if (symbol != nil) {
      JreStrongAssign(&self->bitmap_, [symbol getBitmap]);
    }
  }
  if (self->position_ == nil) {
    if (self->bitmap_ == nil) {
      JreStrongAssign(&self->position_, JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, CENTER));
    }
    else {
      JreStrongAssign(&self->position_, JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW));
    }
  }
  switch ([self->position_ ordinal]) {
    case OrgMapsforgeCoreGraphicsPosition_Enum_CENTER:
    case OrgMapsforgeCoreGraphicsPosition_Enum_BELOW:
    case OrgMapsforgeCoreGraphicsPosition_Enum_ABOVE:
    [self->stroke_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, CENTER)];
    [self->fill_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, CENTER)];
    break;
    case OrgMapsforgeCoreGraphicsPosition_Enum_BELOW_LEFT:
    case OrgMapsforgeCoreGraphicsPosition_Enum_ABOVE_LEFT:
    case OrgMapsforgeCoreGraphicsPosition_Enum_LEFT:
    [self->stroke_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, RIGHT)];
    [self->fill_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, RIGHT)];
    break;
    case OrgMapsforgeCoreGraphicsPosition_Enum_BELOW_RIGHT:
    case OrgMapsforgeCoreGraphicsPosition_Enum_ABOVE_RIGHT:
    case OrgMapsforgeCoreGraphicsPosition_Enum_RIGHT:
    [self->stroke_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, LEFT)];
    [self->fill_ setTextAlignWithOrgMapsforgeCoreGraphicsAlign:JreLoadStatic(OrgMapsforgeCoreGraphicsAlign, LEFT)];
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Position invalid");
  }
  self->maxTextWidth_ = [displayModel getMaxTextWidth];
}

OrgMapsforgeMapRenderthemeRenderinstructionCaption *new_OrgMapsforgeMapRenderthemeRenderinstructionCaption_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, id<JavaUtilMap> symbols) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionCaption, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_, graphicFactory, displayModel, elementName, pullParser, symbols)
}

OrgMapsforgeMapRenderthemeRenderinstructionCaption *create_OrgMapsforgeMapRenderthemeRenderinstructionCaption_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, id<JavaUtilMap> symbols) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionCaption, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withJavaUtilMap_, graphicFactory, displayModel, elementName, pullParser, symbols)
}

jfloat OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeHorizontalOffset(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self) {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, RIGHT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW_RIGHT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW_LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE_RIGHT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE_LEFT) == self->position_) {
    jfloat horizontalOffset = [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getWidth] / 2.0f + self->gap_;
    if (JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW_LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE_LEFT) == self->position_) {
      JreTimesAssignFloatF(&horizontalOffset, -1.0f);
    }
    return horizontalOffset;
  }
  return 0;
}

jfloat OrgMapsforgeMapRenderthemeRenderinstructionCaption_computeVerticalOffset(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self) {
  jfloat verticalOffset = self->dyScaled_;
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE_LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, ABOVE_RIGHT) == self->position_) {
    JreMinusAssignFloatF(&verticalOffset, [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getHeight] / 2.0f + self->gap_);
  }
  else if (JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW_LEFT) == self->position_ || JreLoadEnum(OrgMapsforgeCoreGraphicsPosition, BELOW_RIGHT) == self->position_) {
    JrePlusAssignFloatF(&verticalOffset, [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getHeight] / 2.0f + self->gap_);
  }
  return verticalOffset;
}

void OrgMapsforgeMapRenderthemeRenderinstructionCaption_extractValuesWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionCaption *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  OrgMapsforgeCoreGraphicsFontFamily *fontFamily = JreLoadEnum(OrgMapsforgeCoreGraphicsFontFamily, DEFAULT);
  OrgMapsforgeCoreGraphicsFontStyle *fontStyle = JreLoadEnum(OrgMapsforgeCoreGraphicsFontStyle, NORMAL);
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_K)) isEqual:name]) {
      JreStrongAssign(&self->textKey_, OrgMapsforgeMapRenderthemeRenderinstructionTextKey_getInstanceWithNSString_(value));
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_POSITION)) isEqual:name]) {
      JreStrongAssign(&self->position_, OrgMapsforgeCoreGraphicsPosition_fromStringWithNSString_(value));
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_CAT)) isEqual:name]) {
      JreStrongAssign(&self->category_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_DISPLAY)) isEqual:name]) {
      JreStrongAssign(&self->display_, OrgMapsforgeCoreGraphicsDisplay_fromStringWithNSString_(value));
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_DY)) isEqual:name]) {
      self->dy_ = JavaLangFloat_parseFloatWithNSString_(value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
      self->dyScaled_ = self->dy_;
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FONT_FAMILY)) isEqual:name]) {
      fontFamily = OrgMapsforgeCoreGraphicsFontFamily_fromStringWithNSString_(value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FONT_STYLE)) isEqual:name]) {
      fontStyle = OrgMapsforgeCoreGraphicsFontStyle_fromStringWithNSString_(value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FONT_SIZE)) isEqual:name]) {
      self->fontSize_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FILL)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_PRIORITY)) isEqual:name]) {
      self->priority_ = JavaLangInteger_parseIntWithNSString_(value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(graphicFactory, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_WIDTH)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setStrokeWidthWithFloat:OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor]];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_ID)) isEqual:name]) {
      JreStrongAssign(&self->symbolId_, value);
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setTypefaceWithOrgMapsforgeCoreGraphicsFontFamily:fontFamily withOrgMapsforgeCoreGraphicsFontStyle:fontStyle];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setTypefaceWithOrgMapsforgeCoreGraphicsFontFamily:fontFamily withOrgMapsforgeCoreGraphicsFontStyle:fontStyle];
  OrgMapsforgeMapRenderthemeXmlUtils_checkMandatoryAttributeWithNSString_withNSString_withId_(elementName, OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_K, self->textKey_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRenderinstructionCaption)
