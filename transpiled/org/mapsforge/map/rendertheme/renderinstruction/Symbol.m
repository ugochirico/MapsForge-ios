//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/renderinstruction/Symbol.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/lang/Integer.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Display.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Symbol.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRenderinstructionSymbol () {
 @public
  id<OrgMapsforgeCoreGraphicsBitmap> bitmap_;
  jboolean bitmapInvalid_;
  OrgMapsforgeCoreGraphicsDisplay *display_;
  NSString *id__;
  jint priority_;
  NSString *relativePathPrefix_;
  NSString *src_;
}

- (void)extractValuesWithNSString:(NSString *)elementName
    withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, bitmap_, id<OrgMapsforgeCoreGraphicsBitmap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, display_, OrgMapsforgeCoreGraphicsDisplay *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, id__, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, relativePathPrefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, src_, NSString *)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRenderinstructionSymbol_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionSymbol *self, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser);

@implementation OrgMapsforgeMapRenderthemeRenderinstructionSymbol

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                  withNSString:(NSString *)relativePathPrefix {
  OrgMapsforgeMapRenderthemeRenderinstructionSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(self, graphicFactory, displayModel, elementName, pullParser, relativePathPrefix);
  return self;
}

- (void)destroy {
  if (self->bitmap_ != nil) {
    [self->bitmap_ decrementRefCount];
  }
}

- (id<OrgMapsforgeCoreGraphicsBitmap>)getBitmap {
  if (self->bitmap_ == nil && !bitmapInvalid_) {
    @try {
      JreStrongAssign(&self->bitmap_, [self createBitmapWithNSString:relativePathPrefix_ withNSString:src_]);
    }
    @catch (JavaIoIOException *ioException) {
      self->bitmapInvalid_ = true;
    }
  }
  return self->bitmap_;
}

- (NSString *)getId {
  return self->id__;
}

- (void)renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                      withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, NEVER) == self->display_) {
    return;
  }
  if ([self getBitmap] != nil) {
    [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderPointOfInterestSymbolWithOrgMapsforgeMapReaderPointOfInterest:poi withOrgMapsforgeCoreGraphicsDisplay:self->display_ withInt:self->priority_ withOrgMapsforgeCoreGraphicsBitmap:self->bitmap_ withOrgMapsforgeCoreModelTile:tile];
  }
}

- (void)renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
            withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  if (JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, NEVER) == self->display_) {
    return;
  }
  if ([self getBitmap] != nil) {
    [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderAreaSymbolWithOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreGraphicsDisplay:self->display_ withInt:self->priority_ withOrgMapsforgeCoreGraphicsBitmap:self->bitmap_];
  }
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
}

- (void)extractValuesWithNSString:(NSString *)elementName
    withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRenderinstructionSymbol_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(self, elementName, pullParser);
}

- (void)dealloc {
  RELEASE_(bitmap_);
  RELEASE_(display_);
  RELEASE_(id__);
  RELEASE_(relativePathPrefix_);
  RELEASE_(src_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsBitmap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withNSString:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(getBitmap);
  methods[3].selector = @selector(getId);
  methods[4].selector = @selector(renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[5].selector = @selector(renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[6].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[7].selector = @selector(scaleTextSizeWithFloat:);
  methods[8].selector = @selector(extractValuesWithNSString:withOrgXmlpullV1XmlPullParser:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitmap_", "LOrgMapsforgeCoreGraphicsBitmap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bitmapInvalid_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "display_", "LOrgMapsforgeCoreGraphicsDisplay;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "id__", "LNSString;", .constantValue.asLong = 0, 0x2, 11, -1, -1, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "relativePathPrefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "src_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;LNSString;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "renderNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "scaleStrokeWidth", "F", "scaleTextSize", "extractValues", "LNSString;LOrgXmlpullV1XmlPullParser;", "id" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRenderinstructionSymbol = { "Symbol", "org.mapsforge.map.rendertheme.renderinstruction", ptrTable, methods, fields, 7, 0x1, 9, 7, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRenderinstructionSymbol;
}

@end

void OrgMapsforgeMapRenderthemeRenderinstructionSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(OrgMapsforgeMapRenderthemeRenderinstructionSymbol *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, NSString *relativePathPrefix) {
  OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  JreStrongAssign(&self->relativePathPrefix_, relativePathPrefix);
  JreStrongAssign(&self->display_, JreLoadEnum(OrgMapsforgeCoreGraphicsDisplay, IFSPACE));
  OrgMapsforgeMapRenderthemeRenderinstructionSymbol_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(self, elementName, pullParser);
}

OrgMapsforgeMapRenderthemeRenderinstructionSymbol *new_OrgMapsforgeMapRenderthemeRenderinstructionSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, NSString *relativePathPrefix) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_, graphicFactory, displayModel, elementName, pullParser, relativePathPrefix)
}

OrgMapsforgeMapRenderthemeRenderinstructionSymbol *create_OrgMapsforgeMapRenderthemeRenderinstructionSymbol_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, NSString *relativePathPrefix) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionSymbol, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withNSString_, graphicFactory, displayModel, elementName, pullParser, relativePathPrefix)
}

void OrgMapsforgeMapRenderthemeRenderinstructionSymbol_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionSymbol *self, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SRC)) isEqual:name]) {
      JreStrongAssign(&self->src_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_CAT)) isEqual:name]) {
      JreStrongAssign(&self->category_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_DISPLAY)) isEqual:name]) {
      JreStrongAssign(&self->display_, OrgMapsforgeCoreGraphicsDisplay_fromStringWithNSString_(value));
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_ID)) isEqual:name]) {
      JreStrongAssign(&self->id__, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_PRIORITY)) isEqual:name]) {
      self->priority_ = JavaLangInteger_parseIntWithNSString_(value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_HEIGHT)) isEqual:name]) {
      self->height_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_PERCENT)) isEqual:name]) {
      self->percent_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_SCALING)) isEqual:name]) {
      JreStrongAssign(&self->scaling_, [self fromValueWithNSString:value]);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_WIDTH)) isEqual:name]) {
      self->width_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor];
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRenderinstructionSymbol)
