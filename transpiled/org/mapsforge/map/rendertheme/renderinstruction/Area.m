//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/rendertheme/renderinstruction/Area.java
//

#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Cap.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/rendertheme/RenderCallback.h"
#include "org/mapsforge/map/rendertheme/XmlUtils.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/Area.h"
#include "org/mapsforge/map/rendertheme/renderinstruction/RenderInstruction.h"
#include "org/xmlpull/v1/XmlPullParser.h"
#include "org/xmlpull/v1/XmlPullParserException.h"

@interface OrgMapsforgeMapRenderthemeRenderinstructionArea () {
 @public
  jboolean bitmapInvalid_;
  id<OrgMapsforgeCoreGraphicsPaint> fill_;
  jint level_;
  NSString *relativePathPrefix_;
  id<OrgMapsforgeCoreGraphicsBitmap> shaderBitmap_;
  NSString *src_;
  id<OrgMapsforgeCoreGraphicsPaint> stroke_;
  jfloat strokeWidth_;
}

- (void)extractValuesWithNSString:(NSString *)elementName
    withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionArea, fill_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionArea, relativePathPrefix_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionArea, shaderBitmap_, id<OrgMapsforgeCoreGraphicsBitmap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionArea, src_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapRenderthemeRenderinstructionArea, stroke_, id<OrgMapsforgeCoreGraphicsPaint>)

__attribute__((unused)) static void OrgMapsforgeMapRenderthemeRenderinstructionArea_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionArea *self, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser);

@implementation OrgMapsforgeMapRenderthemeRenderinstructionArea

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                                  withNSString:(NSString *)elementName
                                 withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser
                                                       withInt:(jint)level
                                                  withNSString:(NSString *)relativePathPrefix {
  OrgMapsforgeMapRenderthemeRenderinstructionArea_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(self, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix);
  return self;
}

- (void)destroy {
}

- (void)extractValuesWithNSString:(NSString *)elementName
    withOrgXmlpullV1XmlPullParser:(id<OrgXmlpullV1XmlPullParser>)pullParser {
  OrgMapsforgeMapRenderthemeRenderinstructionArea_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(self, elementName, pullParser);
}

- (void)renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
                      withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
}

- (void)renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:(id<OrgMapsforgeMapRenderthemeRenderCallback>)renderCallback
            withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  if (shaderBitmap_ == nil && !bitmapInvalid_) {
    @try {
      JreStrongAssign(&shaderBitmap_, [self createBitmapWithNSString:relativePathPrefix_ withNSString:src_]);
      if (shaderBitmap_ != nil) {
        [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setBitmapShaderWithOrgMapsforgeCoreGraphicsBitmap:shaderBitmap_];
        [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(shaderBitmap_)) decrementRefCount];
      }
    }
    @catch (JavaIoIOException *ioException) {
      bitmapInvalid_ = true;
    }
  }
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setBitmapShaderShiftWithOrgMapsforgeCoreModelPoint:[((OrgMapsforgeCoreModelTile *) nil_chk([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTile])) getOrigin]];
  [((id<OrgMapsforgeMapRenderthemeRenderCallback>) nil_chk(renderCallback)) renderAreaWithOrgMapsforgeMapLayerRendererPolylineContainer:way withOrgMapsforgeCoreGraphicsPaint:self->fill_ withOrgMapsforgeCoreGraphicsPaint:self->stroke_ withInt:self->level_];
}

- (void)scaleStrokeWidthWithFloat:(jfloat)scaleFactor {
  if (self->stroke_ != nil) {
    [self->stroke_ setStrokeWidthWithFloat:self->strokeWidth_ * scaleFactor];
  }
}

- (void)scaleTextSizeWithFloat:(jfloat)scaleFactor {
}

- (void)dealloc {
  RELEASE_(fill_);
  RELEASE_(relativePathPrefix_);
  RELEASE_(shaderBitmap_);
  RELEASE_(src_);
  RELEASE_(stroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withNSString:withOrgXmlpullV1XmlPullParser:withInt:withNSString:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(extractValuesWithNSString:withOrgXmlpullV1XmlPullParser:);
  methods[3].selector = @selector(renderNodeWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[4].selector = @selector(renderWayWithOrgMapsforgeMapRenderthemeRenderCallback:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[5].selector = @selector(scaleStrokeWidthWithFloat:);
  methods[6].selector = @selector(scaleTextSizeWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitmapInvalid_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fill_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "level_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "relativePathPrefix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "shaderBitmap_", "LOrgMapsforgeCoreGraphicsBitmap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "src_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "strokeWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LNSString;LOrgXmlpullV1XmlPullParser;ILNSString;", "LJavaIoIOException;LOrgXmlpullV1XmlPullParserException;", "extractValues", "LNSString;LOrgXmlpullV1XmlPullParser;", "renderNode", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapRenderthemeRenderCallback;LOrgMapsforgeMapLayerRendererPolylineContainer;", "scaleStrokeWidth", "F", "scaleTextSize" };
  static const J2ObjcClassInfo _OrgMapsforgeMapRenderthemeRenderinstructionArea = { "Area", "org.mapsforge.map.rendertheme.renderinstruction", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapRenderthemeRenderinstructionArea;
}

@end

void OrgMapsforgeMapRenderthemeRenderinstructionArea_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(OrgMapsforgeMapRenderthemeRenderinstructionArea *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, graphicFactory, displayModel);
  self->level_ = level;
  JreStrongAssign(&self->relativePathPrefix_, relativePathPrefix);
  JreStrongAssign(&self->fill_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, TRANSPARENT)];
  [self->fill_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, FILL)];
  [self->fill_ setStrokeCapWithOrgMapsforgeCoreGraphicsCap:JreLoadEnum(OrgMapsforgeCoreGraphicsCap, ROUND)];
  JreStrongAssign(&self->stroke_, [graphicFactory createPaint]);
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, TRANSPARENT)];
  [self->stroke_ setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  [self->stroke_ setStrokeCapWithOrgMapsforgeCoreGraphicsCap:JreLoadEnum(OrgMapsforgeCoreGraphicsCap, ROUND)];
  OrgMapsforgeMapRenderthemeRenderinstructionArea_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(self, elementName, pullParser);
}

OrgMapsforgeMapRenderthemeRenderinstructionArea *new_OrgMapsforgeMapRenderthemeRenderinstructionArea_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionArea, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix)
}

OrgMapsforgeMapRenderthemeRenderinstructionArea *create_OrgMapsforgeMapRenderthemeRenderinstructionArea_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser, jint level, NSString *relativePathPrefix) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapRenderthemeRenderinstructionArea, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withNSString_withOrgXmlpullV1XmlPullParser_withInt_withNSString_, graphicFactory, displayModel, elementName, pullParser, level, relativePathPrefix)
}

void OrgMapsforgeMapRenderthemeRenderinstructionArea_extractValuesWithNSString_withOrgXmlpullV1XmlPullParser_(OrgMapsforgeMapRenderthemeRenderinstructionArea *self, NSString *elementName, id<OrgXmlpullV1XmlPullParser> pullParser) {
  for (jint i = 0; i < [((id<OrgXmlpullV1XmlPullParser>) nil_chk(pullParser)) getAttributeCount]; ++i) {
    NSString *name = [pullParser getAttributeNameWithInt:i];
    NSString *value = [pullParser getAttributeValueWithInt:i];
    if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SRC)) isEqual:name]) {
      JreStrongAssign(&self->src_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_CAT)) isEqual:name]) {
      JreStrongAssign(&self->category_, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_FILL)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->fill_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(self->graphicFactory_, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE)) isEqual:name]) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->stroke_)) setColorWithInt:OrgMapsforgeMapRenderthemeXmlUtils_getColorWithOrgMapsforgeCoreGraphicsGraphicFactory_withNSString_(self->graphicFactory_, value)];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_HEIGHT)) isEqual:name]) {
      self->height_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_PERCENT)) isEqual:name]) {
      self->percent_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_SCALING)) isEqual:name]) {
      JreStrongAssign(&self->scaling_, [self fromValueWithNSString:value]);
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_SYMBOL_WIDTH)) isEqual:name]) {
      self->width_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeIntegerWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor];
    }
    else if ([((NSString *) nil_chk(OrgMapsforgeMapRenderthemeRenderinstructionRenderInstruction_STROKE_WIDTH)) isEqual:name]) {
      self->strokeWidth_ = OrgMapsforgeMapRenderthemeXmlUtils_parseNonNegativeFloatWithNSString_withNSString_(name, value) * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor];
    }
    else {
      @throw nil_chk(OrgMapsforgeMapRenderthemeXmlUtils_createXmlPullParserExceptionWithNSString_withNSString_withNSString_withInt_(elementName, name, value, i));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapRenderthemeRenderinstructionArea)
