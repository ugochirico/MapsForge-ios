//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/queue/QueueItem.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/map/layer/queue/Job.h"
#include "org/mapsforge/map/layer/queue/QueueItem.h"

@interface OrgMapsforgeMapLayerQueueQueueItem () {
 @public
  jdouble priority_;
}

@end

@implementation OrgMapsforgeMapLayerQueueQueueItem

- (instancetype)initWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)object {
  OrgMapsforgeMapLayerQueueQueueItem_initWithOrgMapsforgeMapLayerQueueJob_(self, object);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeMapLayerQueueQueueItem class]])) {
    return false;
  }
  OrgMapsforgeMapLayerQueueQueueItem *other = (OrgMapsforgeMapLayerQueueQueueItem *) cast_chk(obj, [OrgMapsforgeMapLayerQueueQueueItem class]);
  return [((OrgMapsforgeMapLayerQueueJob *) nil_chk(self->object_)) isEqual:((OrgMapsforgeMapLayerQueueQueueItem *) nil_chk(other))->object_];
}

- (NSUInteger)hash {
  return ((jint) [((OrgMapsforgeMapLayerQueueJob *) nil_chk(self->object_)) hash]);
}

- (jdouble)getPriority {
  return self->priority_;
}

- (void)setPriorityWithDouble:(jdouble)priority {
  if (priority < 0 || JavaLangDouble_isNaNWithDouble_(priority)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$D", @"invalid priority: ", priority));
  }
  self->priority_ = priority;
}

- (void)dealloc {
  RELEASE_(object_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerQueueJob:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  methods[3].selector = @selector(getPriority);
  methods[4].selector = @selector(setPriorityWithDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "object_", "LOrgMapsforgeMapLayerQueueJob;", .constantValue.asLong = 0, 0x10, -1, -1, 7, -1 },
    { "priority_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerQueueJob;", "(TT;)V", "equals", "LNSObject;", "hashCode", "setPriority", "D", "TT;", "<T:Lorg/mapsforge/map/layer/queue/Job;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerQueueQueueItem = { "QueueItem", "org.mapsforge.map.layer.queue", ptrTable, methods, fields, 7, 0x0, 5, 2, -1, -1, -1, 8, -1 };
  return &_OrgMapsforgeMapLayerQueueQueueItem;
}

@end

void OrgMapsforgeMapLayerQueueQueueItem_initWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerQueueQueueItem *self, OrgMapsforgeMapLayerQueueJob *object) {
  NSObject_init(self);
  JreStrongAssign(&self->object_, object);
}

OrgMapsforgeMapLayerQueueQueueItem *new_OrgMapsforgeMapLayerQueueQueueItem_initWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerQueueJob *object) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerQueueQueueItem, initWithOrgMapsforgeMapLayerQueueJob_, object)
}

OrgMapsforgeMapLayerQueueQueueItem *create_OrgMapsforgeMapLayerQueueQueueItem_initWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerQueueJob *object) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerQueueQueueItem, initWithOrgMapsforgeMapLayerQueueJob_, object)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerQueueQueueItem)
