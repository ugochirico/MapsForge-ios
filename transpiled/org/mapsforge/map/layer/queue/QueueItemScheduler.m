//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/queue/QueueItemScheduler.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/MapPosition.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/queue/Job.h"
#include "org/mapsforge/map/layer/queue/QueueItem.h"
#include "org/mapsforge/map/layer/queue/QueueItemScheduler.h"

@interface OrgMapsforgeMapLayerQueueQueueItemScheduler ()

+ (jdouble)calculatePriorityWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                     withOrgMapsforgeCoreModelMapPosition:(OrgMapsforgeCoreModelMapPosition *)mapPosition
                                                  withInt:(jint)tileSize;

- (instancetype)init;

@end

__attribute__((unused)) static jdouble OrgMapsforgeMapLayerQueueQueueItemScheduler_calculatePriorityWithOrgMapsforgeCoreModelTile_withOrgMapsforgeCoreModelMapPosition_withInt_(OrgMapsforgeCoreModelTile *tile, OrgMapsforgeCoreModelMapPosition *mapPosition, jint tileSize);

__attribute__((unused)) static void OrgMapsforgeMapLayerQueueQueueItemScheduler_init(OrgMapsforgeMapLayerQueueQueueItemScheduler *self);

__attribute__((unused)) static OrgMapsforgeMapLayerQueueQueueItemScheduler *new_OrgMapsforgeMapLayerQueueQueueItemScheduler_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapLayerQueueQueueItemScheduler *create_OrgMapsforgeMapLayerQueueQueueItemScheduler_init();

@implementation OrgMapsforgeMapLayerQueueQueueItemScheduler

+ (void)scheduleWithJavaUtilCollection:(id<JavaUtilCollection>)queueItems
  withOrgMapsforgeCoreModelMapPosition:(OrgMapsforgeCoreModelMapPosition *)mapPosition
                               withInt:(jint)tileSize {
  OrgMapsforgeMapLayerQueueQueueItemScheduler_scheduleWithJavaUtilCollection_withOrgMapsforgeCoreModelMapPosition_withInt_(queueItems, mapPosition, tileSize);
}

+ (jdouble)calculatePriorityWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                     withOrgMapsforgeCoreModelMapPosition:(OrgMapsforgeCoreModelMapPosition *)mapPosition
                                                  withInt:(jint)tileSize {
  return OrgMapsforgeMapLayerQueueQueueItemScheduler_calculatePriorityWithOrgMapsforgeCoreModelTile_withOrgMapsforgeCoreModelMapPosition_withInt_(tile, mapPosition, tileSize);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapLayerQueueQueueItemScheduler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, 0, 1, -1, 2, -1, -1 },
    { NULL, "D", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(scheduleWithJavaUtilCollection:withOrgMapsforgeCoreModelMapPosition:withInt:);
  methods[1].selector = @selector(calculatePriorityWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreModelMapPosition:withInt:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PENALTY_PER_ZOOM_LEVEL", "D", .constantValue.asDouble = OrgMapsforgeMapLayerQueueQueueItemScheduler_PENALTY_PER_ZOOM_LEVEL, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "schedule", "LJavaUtilCollection;LOrgMapsforgeCoreModelMapPosition;I", "<T:Lorg/mapsforge/map/layer/queue/Job;>(Ljava/util/Collection<Lorg/mapsforge/map/layer/queue/QueueItem<TT;>;>;Lorg/mapsforge/core/model/MapPosition;I)V", "calculatePriority", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreModelMapPosition;I" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerQueueQueueItemScheduler = { "QueueItemScheduler", "org.mapsforge.map.layer.queue", ptrTable, methods, fields, 7, 0x10, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerQueueQueueItemScheduler;
}

@end

void OrgMapsforgeMapLayerQueueQueueItemScheduler_scheduleWithJavaUtilCollection_withOrgMapsforgeCoreModelMapPosition_withInt_(id<JavaUtilCollection> queueItems, OrgMapsforgeCoreModelMapPosition *mapPosition, jint tileSize) {
  OrgMapsforgeMapLayerQueueQueueItemScheduler_initialize();
  for (OrgMapsforgeMapLayerQueueQueueItem * __strong queueItem in nil_chk(queueItems)) {
    [((OrgMapsforgeMapLayerQueueQueueItem *) nil_chk(queueItem)) setPriorityWithDouble:OrgMapsforgeMapLayerQueueQueueItemScheduler_calculatePriorityWithOrgMapsforgeCoreModelTile_withOrgMapsforgeCoreModelMapPosition_withInt_(((OrgMapsforgeMapLayerQueueJob *) nil_chk(queueItem->object_))->tile_, mapPosition, tileSize)];
  }
}

jdouble OrgMapsforgeMapLayerQueueQueueItemScheduler_calculatePriorityWithOrgMapsforgeCoreModelTile_withOrgMapsforgeCoreModelMapPosition_withInt_(OrgMapsforgeCoreModelTile *tile, OrgMapsforgeCoreModelMapPosition *mapPosition, jint tileSize) {
  OrgMapsforgeMapLayerQueueQueueItemScheduler_initialize();
  jdouble tileLatitude = OrgMapsforgeCoreUtilMercatorProjection_tileYToLatitudeWithLong_withByte_(((OrgMapsforgeCoreModelTile *) nil_chk(tile))->tileY_, tile->zoomLevel_);
  jdouble tileLongitude = OrgMapsforgeCoreUtilMercatorProjection_tileXToLongitudeWithLong_withByte_(tile->tileX_, tile->zoomLevel_);
  jint halfTileSize = tileSize / 2;
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(((OrgMapsforgeCoreModelMapPosition *) nil_chk(mapPosition))->zoomLevel_, tileSize);
  jdouble tilePixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(tileLongitude, mapSize) + halfTileSize;
  jdouble tilePixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(tileLatitude, mapSize) + halfTileSize;
  OrgMapsforgeCoreModelLatLong *latLong = mapPosition->latLong_;
  jdouble mapPixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, mapSize);
  jdouble mapPixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latLong->latitude_, mapSize);
  jdouble diffPixel = JavaLangMath_hypotWithDouble_withDouble_(tilePixelX - mapPixelX, tilePixelY - mapPixelY);
  jint diffZoom = JavaLangMath_absWithInt_(tile->zoomLevel_ - mapPosition->zoomLevel_);
  return diffPixel + OrgMapsforgeMapLayerQueueQueueItemScheduler_PENALTY_PER_ZOOM_LEVEL * tileSize * diffZoom;
}

void OrgMapsforgeMapLayerQueueQueueItemScheduler_init(OrgMapsforgeMapLayerQueueQueueItemScheduler *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapLayerQueueQueueItemScheduler *new_OrgMapsforgeMapLayerQueueQueueItemScheduler_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerQueueQueueItemScheduler, init)
}

OrgMapsforgeMapLayerQueueQueueItemScheduler *create_OrgMapsforgeMapLayerQueueQueueItemScheduler_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerQueueQueueItemScheduler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerQueueQueueItemScheduler)
