//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/queue/JobQueue.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collections.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "org/mapsforge/core/model/MapPosition.h"
#include "org/mapsforge/map/layer/queue/Job.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/layer/queue/QueueItem.h"
#include "org/mapsforge/map/layer/queue/QueueItemComparator.h"
#include "org/mapsforge/map/layer/queue/QueueItemScheduler.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewPosition.h"

@interface OrgMapsforgeMapLayerQueueJobQueue () {
 @public
  id<JavaUtilList> assignedJobs_;
  OrgMapsforgeMapModelDisplayModel *displayModel_;
  OrgMapsforgeMapModelMapViewPosition *mapViewPosition_;
  id<JavaUtilList> queueItems_;
  jboolean scheduleNeeded_;
}

- (void)scheduleWithInt:(jint)tileSize;

- (void)trimToSize;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerQueueJobQueue, assignedJobs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerQueueJobQueue, displayModel_, OrgMapsforgeMapModelDisplayModel *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerQueueJobQueue, mapViewPosition_, OrgMapsforgeMapModelMapViewPosition *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerQueueJobQueue, queueItems_, id<JavaUtilList>)

inline jint OrgMapsforgeMapLayerQueueJobQueue_get_QUEUE_CAPACITY();
#define OrgMapsforgeMapLayerQueueJobQueue_QUEUE_CAPACITY 128
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerQueueJobQueue, QUEUE_CAPACITY, jint)

__attribute__((unused)) static void OrgMapsforgeMapLayerQueueJobQueue_scheduleWithInt_(OrgMapsforgeMapLayerQueueJobQueue *self, jint tileSize);

__attribute__((unused)) static void OrgMapsforgeMapLayerQueueJobQueue_trimToSize(OrgMapsforgeMapLayerQueueJobQueue *self);

@implementation OrgMapsforgeMapLayerQueueJobQueue

- (instancetype)initWithOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
                       withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  OrgMapsforgeMapLayerQueueJobQueue_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_(self, mapViewPosition, displayModel);
  return self;
}

- (void)addWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)job {
  @synchronized(self) {
    if (![((id<JavaUtilList>) nil_chk(self->assignedJobs_)) containsWithId:job]) {
      OrgMapsforgeMapLayerQueueQueueItem *queueItem = create_OrgMapsforgeMapLayerQueueQueueItem_initWithOrgMapsforgeMapLayerQueueJob_(job);
      if (![((id<JavaUtilList>) nil_chk(self->queueItems_)) containsWithId:queueItem]) {
        [self->queueItems_ addWithId:queueItem];
        self->scheduleNeeded_ = true;
      }
    }
  }
}

- (OrgMapsforgeMapLayerQueueJob *)get {
  @synchronized(self) {
    while ([((id<JavaUtilList>) nil_chk(self->queueItems_)) isEmpty]) {
      [self java_wait];
    }
    if (self->scheduleNeeded_) {
      self->scheduleNeeded_ = false;
      OrgMapsforgeMapLayerQueueJobQueue_scheduleWithInt_(self, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel_)) getTileSize]);
    }
    OrgMapsforgeMapLayerQueueJob *job = ((OrgMapsforgeMapLayerQueueQueueItem *) nil_chk([self->queueItems_ removeWithInt:0]))->object_;
    [((id<JavaUtilList>) nil_chk(self->assignedJobs_)) addWithId:job];
    return job;
  }
}

- (void)notifyWorkers {
  @synchronized(self) {
    [self java_notifyAll];
  }
}

- (void)removeWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)job {
  @synchronized(self) {
    if (![((id<JavaUtilList>) nil_chk(self->assignedJobs_)) removeWithId:job]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"job not assigned: ", job));
    }
  }
}

- (jint)size {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(self->queueItems_)) size];
  }
}

- (void)scheduleWithInt:(jint)tileSize {
  OrgMapsforgeMapLayerQueueJobQueue_scheduleWithInt_(self, tileSize);
}

- (void)trimToSize {
  OrgMapsforgeMapLayerQueueJobQueue_trimToSize(self);
}

- (void)dealloc {
  RELEASE_(assignedJobs_);
  RELEASE_(displayModel_);
  RELEASE_(mapViewPosition_);
  RELEASE_(queueItems_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, 3, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerQueueJob;", 0x21, -1, -1, 4, 5, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 2, -1, 3, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeMapModelDisplayModel:);
  methods[1].selector = @selector(addWithOrgMapsforgeMapLayerQueueJob:);
  methods[2].selector = @selector(get);
  methods[3].selector = @selector(notifyWorkers);
  methods[4].selector = @selector(removeWithOrgMapsforgeMapLayerQueueJob:);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(scheduleWithInt:);
  methods[7].selector = @selector(trimToSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "QUEUE_CAPACITY", "I", .constantValue.asInt = OrgMapsforgeMapLayerQueueJobQueue_QUEUE_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "assignedJobs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapViewPosition_", "LOrgMapsforgeMapModelMapViewPosition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "queueItems_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
    { "scheduleNeeded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeMapModelDisplayModel;", "add", "LOrgMapsforgeMapLayerQueueJob;", "(TT;)V", "LJavaLangInterruptedException;", "()TT;", "remove", "schedule", "I", "Ljava/util/List<TT;>;", "Ljava/util/List<Lorg/mapsforge/map/layer/queue/QueueItem<TT;>;>;", "<T:Lorg/mapsforge/map/layer/queue/Job;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerQueueJobQueue = { "JobQueue", "org.mapsforge.map.layer.queue", ptrTable, methods, fields, 7, 0x1, 8, 6, -1, -1, -1, 11, -1 };
  return &_OrgMapsforgeMapLayerQueueJobQueue;
}

@end

void OrgMapsforgeMapLayerQueueJobQueue_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapLayerQueueJobQueue *self, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, OrgMapsforgeMapModelDisplayModel *displayModel) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->assignedJobs_, new_JavaUtilLinkedList_init());
  JreStrongAssignAndConsume(&self->queueItems_, new_JavaUtilLinkedList_init());
  JreStrongAssign(&self->mapViewPosition_, mapViewPosition);
  JreStrongAssign(&self->displayModel_, displayModel);
}

OrgMapsforgeMapLayerQueueJobQueue *new_OrgMapsforgeMapLayerQueueJobQueue_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapModelMapViewPosition *mapViewPosition, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerQueueJobQueue, initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_, mapViewPosition, displayModel)
}

OrgMapsforgeMapLayerQueueJobQueue *create_OrgMapsforgeMapLayerQueueJobQueue_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapModelMapViewPosition *mapViewPosition, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerQueueJobQueue, initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_, mapViewPosition, displayModel)
}

void OrgMapsforgeMapLayerQueueJobQueue_scheduleWithInt_(OrgMapsforgeMapLayerQueueJobQueue *self, jint tileSize) {
  OrgMapsforgeMapLayerQueueQueueItemScheduler_scheduleWithJavaUtilCollection_withOrgMapsforgeCoreModelMapPosition_withInt_(self->queueItems_, [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(self->mapViewPosition_)) getMapPosition], tileSize);
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(self->queueItems_, JreLoadStatic(OrgMapsforgeMapLayerQueueQueueItemComparator, INSTANCE));
  OrgMapsforgeMapLayerQueueJobQueue_trimToSize(self);
}

void OrgMapsforgeMapLayerQueueJobQueue_trimToSize(OrgMapsforgeMapLayerQueueJobQueue *self) {
  jint queueSize = [((id<JavaUtilList>) nil_chk(self->queueItems_)) size];
  while (queueSize > OrgMapsforgeMapLayerQueueJobQueue_QUEUE_CAPACITY) {
    [self->queueItems_ removeWithInt:--queueSize];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerQueueJobQueue)
