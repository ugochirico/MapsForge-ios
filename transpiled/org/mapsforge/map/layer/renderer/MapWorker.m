//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/MapWorker.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"
#include "java/util/concurrent/atomic/AtomicLong.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/layer/renderer/DatabaseRenderer.h"
#include "org/mapsforge/map/layer/renderer/MapWorker.h"
#include "org/mapsforge/map/layer/renderer/RendererJob.h"
#include "org/mapsforge/map/util/PausableThread.h"

@interface OrgMapsforgeMapLayerRendererMapWorker () {
 @public
  OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer_;
  OrgMapsforgeMapLayerQueueJobQueue *jobQueue_;
  OrgMapsforgeMapLayerLayer *layer_;
  id<OrgMapsforgeMapLayerCacheTileCache> tileCache_;
  JavaUtilConcurrentAtomicAtomicLong *totalExecutions_;
  JavaUtilConcurrentAtomicAtomicLong *totalTime_;
}

- (void)renderTileWithOrgMapsforgeMapLayerRendererRendererJob:(OrgMapsforgeMapLayerRendererRendererJob *)rendererJob;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, databaseRenderer_, OrgMapsforgeMapLayerRendererDatabaseRenderer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, jobQueue_, OrgMapsforgeMapLayerQueueJobQueue *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, layer_, OrgMapsforgeMapLayerLayer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, tileCache_, id<OrgMapsforgeMapLayerCacheTileCache>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, totalExecutions_, JavaUtilConcurrentAtomicAtomicLong *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererMapWorker, totalTime_, JavaUtilConcurrentAtomicAtomicLong *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerRendererMapWorker_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerRendererMapWorker_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerRendererMapWorker, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererMapWorker_renderTileWithOrgMapsforgeMapLayerRendererRendererJob_(OrgMapsforgeMapLayerRendererMapWorker *self, OrgMapsforgeMapLayerRendererRendererJob *rendererJob);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerRendererMapWorker)

jboolean OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING = false;

@implementation OrgMapsforgeMapLayerRendererMapWorker

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                     withOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue
          withOrgMapsforgeMapLayerRendererDatabaseRenderer:(OrgMapsforgeMapLayerRendererDatabaseRenderer *)databaseRenderer
                             withOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(self, tileCache, jobQueue, databaseRenderer, layer);
  return self;
}

- (void)doWork {
  OrgMapsforgeMapLayerRendererRendererJob *rendererJob = ((OrgMapsforgeMapLayerRendererRendererJob *) [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) get]);
  @try {
    if (![((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:rendererJob] || ((OrgMapsforgeMapLayerRendererRendererJob *) nil_chk(rendererJob))->labelsOnly_) {
      OrgMapsforgeMapLayerRendererMapWorker_renderTileWithOrgMapsforgeMapLayerRendererRendererJob_(self, rendererJob);
    }
  }
  @finally {
    [self->jobQueue_ removeWithOrgMapsforgeMapLayerQueueJob:rendererJob];
  }
}

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority {
  return JreLoadEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL);
}

- (jboolean)hasWork {
  return true;
}

- (void)renderTileWithOrgMapsforgeMapLayerRendererRendererJob:(OrgMapsforgeMapLayerRendererRendererJob *)rendererJob {
  OrgMapsforgeMapLayerRendererMapWorker_renderTileWithOrgMapsforgeMapLayerRendererRendererJob_(self, rendererJob);
}

- (void)dealloc {
  RELEASE_(databaseRenderer_);
  RELEASE_(jobQueue_);
  RELEASE_(layer_);
  RELEASE_(tileCache_);
  RELEASE_(totalExecutions_);
  RELEASE_(totalTime_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapLayerQueueJobQueue:withOrgMapsforgeMapLayerRendererDatabaseRenderer:withOrgMapsforgeMapLayerLayer:);
  methods[1].selector = @selector(doWork);
  methods[2].selector = @selector(getThreadPriority);
  methods[3].selector = @selector(hasWork);
  methods[4].selector = @selector(renderTileWithOrgMapsforgeMapLayerRendererRendererJob:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG_TIMING", "Z", .constantValue.asLong = 0, 0x9, -1, 5, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "databaseRenderer_", "LOrgMapsforgeMapLayerRendererDatabaseRenderer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jobQueue_", "LOrgMapsforgeMapLayerQueueJobQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "layer_", "LOrgMapsforgeMapLayerLayer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "totalExecutions_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "totalTime_", "LJavaUtilConcurrentAtomicAtomicLong;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapLayerQueueJobQueue;LOrgMapsforgeMapLayerRendererDatabaseRenderer;LOrgMapsforgeMapLayerLayer;", "(Lorg/mapsforge/map/layer/cache/TileCache;Lorg/mapsforge/map/layer/queue/JobQueue<Lorg/mapsforge/map/layer/renderer/RendererJob;>;Lorg/mapsforge/map/layer/renderer/DatabaseRenderer;Lorg/mapsforge/map/layer/Layer;)V", "LJavaLangInterruptedException;", "renderTile", "LOrgMapsforgeMapLayerRendererRendererJob;", &OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING, &OrgMapsforgeMapLayerRendererMapWorker_LOGGER, "Lorg/mapsforge/map/layer/queue/JobQueue<Lorg/mapsforge/map/layer/renderer/RendererJob;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererMapWorker = { "MapWorker", "org.mapsforge.map.layer.renderer", ptrTable, methods, fields, 7, 0x1, 5, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerRendererMapWorker;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerRendererMapWorker class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerRendererMapWorker_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerRendererMapWorker_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerRendererMapWorker)
  }
}

@end

void OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(OrgMapsforgeMapLayerRendererMapWorker *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer, OrgMapsforgeMapLayerLayer *layer) {
  OrgMapsforgeMapUtilPausableThread_init(self);
  if (OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING) {
    JreStrongAssignAndConsume(&self->totalTime_, new_JavaUtilConcurrentAtomicAtomicLong_init());
    JreStrongAssignAndConsume(&self->totalExecutions_, new_JavaUtilConcurrentAtomicAtomicLong_init());
  }
  else {
    JreStrongAssign(&self->totalTime_, nil);
    JreStrongAssign(&self->totalExecutions_, nil);
  }
  JreStrongAssign(&self->tileCache_, tileCache);
  JreStrongAssign(&self->jobQueue_, jobQueue);
  JreStrongAssign(&self->databaseRenderer_, databaseRenderer);
  JreStrongAssign(&self->layer_, layer);
}

OrgMapsforgeMapLayerRendererMapWorker *new_OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer, OrgMapsforgeMapLayerLayer *layer) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererMapWorker, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_, tileCache, jobQueue, databaseRenderer, layer)
}

OrgMapsforgeMapLayerRendererMapWorker *create_OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer, OrgMapsforgeMapLayerLayer *layer) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererMapWorker, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_, tileCache, jobQueue, databaseRenderer, layer)
}

void OrgMapsforgeMapLayerRendererMapWorker_renderTileWithOrgMapsforgeMapLayerRendererRendererJob_(OrgMapsforgeMapLayerRendererMapWorker *self, OrgMapsforgeMapLayerRendererRendererJob *rendererJob) {
  jlong start = 0;
  if (OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING) {
    start = JavaLangSystem_currentTimeMillis();
  }
  id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap = [((OrgMapsforgeMapLayerRendererDatabaseRenderer *) nil_chk(self->databaseRenderer_)) executeJobWithOrgMapsforgeMapLayerRendererRendererJob:rendererJob];
  if (![self isInterrupted] && bitmap != nil) {
    [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) putWithOrgMapsforgeMapLayerQueueJob:rendererJob withOrgMapsforgeCoreGraphicsTileBitmap:bitmap];
    [((OrgMapsforgeMapLayerLayer *) nil_chk(self->layer_)) requestRedraw];
  }
  if (bitmap != nil) {
    [bitmap decrementRefCount];
  }
  if (OrgMapsforgeMapLayerRendererMapWorker_DEBUG_TIMING) {
    jlong end = JavaLangSystem_currentTimeMillis();
    jlong te = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->totalExecutions_)) incrementAndGet];
    jlong tt = [((JavaUtilConcurrentAtomicAtomicLong *) nil_chk(self->totalTime_)) addAndGetWithLong:end - start];
    if (te % 10 == 0) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerRendererMapWorker_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, INFO) withNSString:JreStrcat("$$C$", @"TIMING ", JavaLangLong_toStringWithLong_(te), ' ', JavaLangDouble_toStringWithDouble_(tt / te))];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererMapWorker)
