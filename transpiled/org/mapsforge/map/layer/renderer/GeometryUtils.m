//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/GeometryUtils.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/map/layer/renderer/GeometryUtils.h"

@interface OrgMapsforgeMapLayerRendererGeometryUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererGeometryUtils_init(OrgMapsforgeMapLayerRendererGeometryUtils *self);

__attribute__((unused)) static OrgMapsforgeMapLayerRendererGeometryUtils *new_OrgMapsforgeMapLayerRendererGeometryUtils_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapLayerRendererGeometryUtils *create_OrgMapsforgeMapLayerRendererGeometryUtils_init();

@implementation OrgMapsforgeMapLayerRendererGeometryUtils

+ (OrgMapsforgeCoreModelPoint *)calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelPointArray:(IOSObjectArray *)coordinates {
  return OrgMapsforgeMapLayerRendererGeometryUtils_calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelPointArray_(coordinates);
}

+ (OrgMapsforgeCoreModelLatLong *)calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)coordinates {
  return OrgMapsforgeMapLayerRendererGeometryUtils_calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelLatLongArray_(coordinates);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapLayerRendererGeometryUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x8, 0, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelPointArray:);
  methods[1].selector = @selector(calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelLatLongArray:);
  methods[2].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "calculateCenterOfBoundingBox", "[LOrgMapsforgeCoreModelPoint;", "[LOrgMapsforgeCoreModelLatLong;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererGeometryUtils = { "GeometryUtils", "org.mapsforge.map.layer.renderer", ptrTable, methods, NULL, 7, 0x10, 3, 0, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerRendererGeometryUtils;
}

@end

OrgMapsforgeCoreModelPoint *OrgMapsforgeMapLayerRendererGeometryUtils_calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelPointArray_(IOSObjectArray *coordinates) {
  OrgMapsforgeMapLayerRendererGeometryUtils_initialize();
  jdouble pointXMin = ((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(nil_chk(coordinates), 0)))->x_;
  jdouble pointXMax = ((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->x_;
  jdouble pointYMin = ((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->y_;
  jdouble pointYMax = ((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->y_;
  {
    IOSObjectArray *a__ = coordinates;
    OrgMapsforgeCoreModelPoint * const *b__ = a__->buffer_;
    OrgMapsforgeCoreModelPoint * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMapsforgeCoreModelPoint *immutablePoint = *b__++;
      if (((OrgMapsforgeCoreModelPoint *) nil_chk(immutablePoint))->x_ < pointXMin) {
        pointXMin = immutablePoint->x_;
      }
      else if (immutablePoint->x_ > pointXMax) {
        pointXMax = immutablePoint->x_;
      }
      if (immutablePoint->y_ < pointYMin) {
        pointYMin = immutablePoint->y_;
      }
      else if (immutablePoint->y_ > pointYMax) {
        pointYMax = immutablePoint->y_;
      }
    }
  }
  return create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_((pointXMin + pointXMax) / 2, (pointYMax + pointYMin) / 2);
}

OrgMapsforgeCoreModelLatLong *OrgMapsforgeMapLayerRendererGeometryUtils_calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelLatLongArray_(IOSObjectArray *coordinates) {
  OrgMapsforgeMapLayerRendererGeometryUtils_initialize();
  jdouble pointXMin = ((OrgMapsforgeCoreModelLatLong *) nil_chk(IOSObjectArray_Get(nil_chk(coordinates), 0)))->longitude_;
  jdouble pointXMax = ((OrgMapsforgeCoreModelLatLong *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->longitude_;
  jdouble pointYMin = ((OrgMapsforgeCoreModelLatLong *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->latitude_;
  jdouble pointYMax = ((OrgMapsforgeCoreModelLatLong *) nil_chk(IOSObjectArray_Get(coordinates, 0)))->latitude_;
  for (jint i = 1; i < coordinates->size_; ++i) {
    OrgMapsforgeCoreModelLatLong *immutablePoint = IOSObjectArray_Get(coordinates, i);
    if (((OrgMapsforgeCoreModelLatLong *) nil_chk(immutablePoint))->longitude_ < pointXMin) {
      pointXMin = immutablePoint->longitude_;
    }
    else if (immutablePoint->longitude_ > pointXMax) {
      pointXMax = immutablePoint->longitude_;
    }
    if (immutablePoint->latitude_ < pointYMin) {
      pointYMin = immutablePoint->latitude_;
    }
    else if (immutablePoint->latitude_ > pointYMax) {
      pointYMax = immutablePoint->latitude_;
    }
  }
  return create_OrgMapsforgeCoreModelLatLong_initWithDouble_withDouble_withBoolean_((pointXMin + pointXMax) / 2, (pointYMax + pointYMin) / 2, true);
}

void OrgMapsforgeMapLayerRendererGeometryUtils_init(OrgMapsforgeMapLayerRendererGeometryUtils *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapLayerRendererGeometryUtils *new_OrgMapsforgeMapLayerRendererGeometryUtils_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererGeometryUtils, init)
}

OrgMapsforgeMapLayerRendererGeometryUtils *create_OrgMapsforgeMapLayerRendererGeometryUtils_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererGeometryUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererGeometryUtils)
