//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/PolylineContainer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/util/List.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/renderer/GeometryUtils.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/layer/renderer/ShapeType.h"
#include "org/mapsforge/map/reader/Way.h"

@interface OrgMapsforgeMapLayerRendererPolylineContainer () {
 @public
  OrgMapsforgeCoreModelPoint *center_;
  IOSObjectArray *coordinatesAbsolute_;
  IOSObjectArray *coordinatesRelativeToTile_;
  id<JavaUtilList> tags_;
  jbyte layer_;
  OrgMapsforgeCoreModelTile *tile_;
  jboolean isClosedWay_;
  OrgMapsforgeMapReaderWay *way_;
}

- (jboolean)isClosedWayWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)latLongs;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, center_, OrgMapsforgeCoreModelPoint *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, coordinatesAbsolute_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, coordinatesRelativeToTile_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, tags_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, tile_, OrgMapsforgeCoreModelTile *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererPolylineContainer, way_, OrgMapsforgeMapReaderWay *)

__attribute__((unused)) static jboolean OrgMapsforgeMapLayerRendererPolylineContainer_isClosedWayWithOrgMapsforgeCoreModelLatLongArray_(OrgMapsforgeMapLayerRendererPolylineContainer *self, IOSObjectArray *latLongs);

@implementation OrgMapsforgeMapLayerRendererPolylineContainer

- (instancetype)initWithOrgMapsforgeMapReaderWay:(OrgMapsforgeMapReaderWay *)way
                   withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_(self, way, tile);
  return self;
}

- (instancetype)initWithOrgMapsforgeCoreModelPointArray:(IOSObjectArray *)coordinates
                          withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                       withJavaUtilList:(id<JavaUtilList>)tags {
  OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_(self, coordinates, tile, tags);
  return self;
}

- (OrgMapsforgeCoreModelPoint *)getCenterAbsolute {
  if (nil == center_) {
    JreStrongAssign(&self->center_, OrgMapsforgeMapLayerRendererGeometryUtils_calculateCenterOfBoundingBoxWithOrgMapsforgeCoreModelPointArray_(IOSObjectArray_Get(nil_chk([self getCoordinatesAbsolute]), 0)));
  }
  return self->center_;
}

- (IOSObjectArray *)getCoordinatesAbsolute {
  if (coordinatesAbsolute_ == nil) {
    JreStrongAssignAndConsume(&coordinatesAbsolute_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(((OrgMapsforgeMapReaderWay *) nil_chk(way_))->latLongs_))->size_ type:IOSClass_arrayType(OrgMapsforgeCoreModelPoint_class_(), 1)]);
    for (jint i = 0; i < way_->latLongs_->size_; ++i) {
      IOSObjectArray_SetAndConsume(nil_chk(coordinatesAbsolute_), i, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(way_->latLongs_, i)))->size_ type:OrgMapsforgeCoreModelPoint_class_()]);
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(((OrgMapsforgeMapReaderWay *) nil_chk(way_))->latLongs_, i)))->size_; ++j) {
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(coordinatesAbsolute_), i)), j, OrgMapsforgeCoreUtilMercatorProjection_getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong_withLong_(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(way_->latLongs_, i)), j), ((OrgMapsforgeCoreModelTile *) nil_chk(tile_))->mapSize_));
      }
    }
    JreStrongAssign(&self->way_, nil);
  }
  return coordinatesAbsolute_;
}

- (IOSObjectArray *)getCoordinatesRelativeToTile {
  if (coordinatesRelativeToTile_ == nil) {
    OrgMapsforgeCoreModelPoint *tileOrigin = [((OrgMapsforgeCoreModelTile *) nil_chk(tile_)) getOrigin];
    JreStrongAssignAndConsume(&coordinatesRelativeToTile_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk([self getCoordinatesAbsolute]))->size_ type:IOSClass_arrayType(OrgMapsforgeCoreModelPoint_class_(), 1)]);
    for (jint i = 0; i < coordinatesRelativeToTile_->size_; ++i) {
      IOSObjectArray_SetAndConsume(coordinatesRelativeToTile_, i, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(coordinatesAbsolute_), i)))->size_ type:OrgMapsforgeCoreModelPoint_class_()]);
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(coordinatesRelativeToTile_), i)))->size_; ++j) {
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(coordinatesRelativeToTile_, i)), j, [((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(coordinatesAbsolute_), i)), j))) offsetWithDouble:-((OrgMapsforgeCoreModelPoint *) nil_chk(tileOrigin))->x_ withDouble:-tileOrigin->y_]);
      }
    }
  }
  return coordinatesRelativeToTile_;
}

- (jbyte)getLayer {
  return layer_;
}

- (OrgMapsforgeMapLayerRendererShapeType *)getShapeType {
  return JreLoadEnum(OrgMapsforgeMapLayerRendererShapeType, POLYLINE);
}

- (id<JavaUtilList>)getTags {
  return tags_;
}

- (jboolean)isClosedWay {
  return isClosedWay_;
}

- (OrgMapsforgeCoreModelTile *)getTile {
  return tile_;
}

- (jboolean)isClosedWayWithOrgMapsforgeCoreModelLatLongArray:(IOSObjectArray *)latLongs {
  return OrgMapsforgeMapLayerRendererPolylineContainer_isClosedWayWithOrgMapsforgeCoreModelLatLongArray_(self, latLongs);
}

- (void)dealloc {
  RELEASE_(center_);
  RELEASE_(coordinatesAbsolute_);
  RELEASE_(coordinatesRelativeToTile_);
  RELEASE_(tags_);
  RELEASE_(tile_);
  RELEASE_(way_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[LOrgMapsforgeCoreModelPoint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerRendererShapeType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapReaderWay:withOrgMapsforgeCoreModelTile:);
  methods[1].selector = @selector(initWithOrgMapsforgeCoreModelPointArray:withOrgMapsforgeCoreModelTile:withJavaUtilList:);
  methods[2].selector = @selector(getCenterAbsolute);
  methods[3].selector = @selector(getCoordinatesAbsolute);
  methods[4].selector = @selector(getCoordinatesRelativeToTile);
  methods[5].selector = @selector(getLayer);
  methods[6].selector = @selector(getShapeType);
  methods[7].selector = @selector(getTags);
  methods[8].selector = @selector(isClosedWay);
  methods[9].selector = @selector(getTile);
  methods[10].selector = @selector(isClosedWayWithOrgMapsforgeCoreModelLatLongArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "center_", "LOrgMapsforgeCoreModelPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "coordinatesAbsolute_", "[[LOrgMapsforgeCoreModelPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "coordinatesRelativeToTile_", "[[LOrgMapsforgeCoreModelPoint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tags_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "layer_", "B", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tile_", "LOrgMapsforgeCoreModelTile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "isClosedWay_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "way_", "LOrgMapsforgeMapReaderWay;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapReaderWay;LOrgMapsforgeCoreModelTile;", "[LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreModelTile;LJavaUtilList;", "()Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;", "isClosedWay", "[LOrgMapsforgeCoreModelLatLong;", "Ljava/util/List<Lorg/mapsforge/core/model/Tag;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererPolylineContainer = { "PolylineContainer", "org.mapsforge.map.layer.renderer", ptrTable, methods, fields, 7, 0x1, 11, 8, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerRendererPolylineContainer;
}

@end

void OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererPolylineContainer *self, OrgMapsforgeMapReaderWay *way, OrgMapsforgeCoreModelTile *tile) {
  NSObject_init(self);
  JreStrongAssign(&self->coordinatesAbsolute_, nil);
  JreStrongAssign(&self->coordinatesRelativeToTile_, nil);
  JreStrongAssign(&self->tags_, ((OrgMapsforgeMapReaderWay *) nil_chk(way))->tags_);
  JreStrongAssign(&self->tile_, tile);
  self->layer_ = way->layer_;
  JreStrongAssign(&self->way_, way);
  self->isClosedWay_ = OrgMapsforgeMapLayerRendererPolylineContainer_isClosedWayWithOrgMapsforgeCoreModelLatLongArray_(self, IOSObjectArray_Get(nil_chk(way->latLongs_), 0));
}

OrgMapsforgeMapLayerRendererPolylineContainer *new_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapReaderWay *way, OrgMapsforgeCoreModelTile *tile) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererPolylineContainer, initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_, way, tile)
}

OrgMapsforgeMapLayerRendererPolylineContainer *create_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapReaderWay *way, OrgMapsforgeCoreModelTile *tile) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererPolylineContainer, initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_, way, tile)
}

void OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_(OrgMapsforgeMapLayerRendererPolylineContainer *self, IOSObjectArray *coordinates, OrgMapsforgeCoreModelTile *tile, id<JavaUtilList> tags) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->coordinatesAbsolute_, [IOSObjectArray newArrayWithLength:1 type:IOSClass_arrayType(OrgMapsforgeCoreModelPoint_class_(), 1)]);
  JreStrongAssign(&self->coordinatesRelativeToTile_, nil);
  IOSObjectArray_SetAndConsume(self->coordinatesAbsolute_, 0, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(coordinates))->size_ type:OrgMapsforgeCoreModelPoint_class_()]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(coordinates, 0, IOSObjectArray_Get(self->coordinatesAbsolute_, 0), 0, coordinates->size_);
  JreStrongAssign(&self->tags_, tags);
  JreStrongAssign(&self->tile_, tile);
  self->layer_ = 0;
  self->isClosedWay_ = [((OrgMapsforgeCoreModelPoint *) nil_chk(IOSObjectArray_Get(coordinates, 0))) isEqual:IOSObjectArray_Get(coordinates, coordinates->size_ - 1)];
}

OrgMapsforgeMapLayerRendererPolylineContainer *new_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_(IOSObjectArray *coordinates, OrgMapsforgeCoreModelTile *tile, id<JavaUtilList> tags) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererPolylineContainer, initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_, coordinates, tile, tags)
}

OrgMapsforgeMapLayerRendererPolylineContainer *create_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_(IOSObjectArray *coordinates, OrgMapsforgeCoreModelTile *tile, id<JavaUtilList> tags) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererPolylineContainer, initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_, coordinates, tile, tags)
}

jboolean OrgMapsforgeMapLayerRendererPolylineContainer_isClosedWayWithOrgMapsforgeCoreModelLatLongArray_(OrgMapsforgeMapLayerRendererPolylineContainer *self, IOSObjectArray *latLongs) {
  return [((OrgMapsforgeCoreModelLatLong *) nil_chk(IOSObjectArray_Get(nil_chk(latLongs), 0))) distanceWithOrgMapsforgeCoreModelLatLong:IOSObjectArray_Get(latLongs, latLongs->size_ - 1)] < 0.000000001;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererPolylineContainer)
