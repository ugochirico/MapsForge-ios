//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/DatabaseRenderer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/Display.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Position.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/mapelements/MapElementContainer.h"
#include "org/mapsforge/core/mapelements/PointTextContainer.h"
#include "org/mapsforge/core/mapelements/SymbolContainer.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"
#include "org/mapsforge/core/model/Tag.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/labels/TileBasedLabelStore.h"
#include "org/mapsforge/map/layer/renderer/CanvasRasterer.h"
#include "org/mapsforge/map/layer/renderer/CircleContainer.h"
#include "org/mapsforge/map/layer/renderer/DatabaseRenderer.h"
#include "org/mapsforge/map/layer/renderer/PolylineContainer.h"
#include "org/mapsforge/map/layer/renderer/RendererJob.h"
#include "org/mapsforge/map/layer/renderer/ShapePaintContainer.h"
#include "org/mapsforge/map/layer/renderer/TileDependencies.h"
#include "org/mapsforge/map/layer/renderer/WayDecorator.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/reader/MapDataStore.h"
#include "org/mapsforge/map/reader/MapReadResult.h"
#include "org/mapsforge/map/reader/PointOfInterest.h"
#include "org/mapsforge/map/reader/Way.h"
#include "org/mapsforge/map/rendertheme/XmlRenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeFuture.h"
#include "org/mapsforge/map/util/LayerUtil.h"

@interface OrgMapsforgeMapLayerRendererDatabaseRenderer () {
 @public
  OrgMapsforgeMapLayerRendererCanvasRasterer *canvasRasterer_;
  id<JavaUtilList> currentLabels_;
  id<JavaUtilList> drawingLayers_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  OrgMapsforgeMapLayerLabelsTileBasedLabelStore *labelStore_;
  id<OrgMapsforgeMapReaderMapDataStore> mapDatabase_;
  id<OrgMapsforgeMapRenderthemeXmlRenderTheme> previousJobTheme_;
  jboolean renderLabels_;
  OrgMapsforgeMapRenderthemeRuleRenderTheme *renderTheme_;
  id<JavaUtilList> ways_;
  id<OrgMapsforgeMapLayerCacheTileCache> tileCache_;
  OrgMapsforgeMapLayerRendererTileDependencies *tileDependencies_;
}

+ (IOSObjectArray *)getTilePixelCoordinatesWithInt:(jint)tileSize;

+ (jbyte)getValidLayerWithByte:(jbyte)layer;

- (id<JavaUtilList>)createWayLists;

- (void)processReadMapDataWithJavaUtilList:(id<JavaUtilList>)ways
    withOrgMapsforgeMapReaderMapReadResult:(OrgMapsforgeMapReaderMapReadResult *)mapReadResult
             withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile;

- (void)renderPointOfInterestWithJavaUtilList:(id<JavaUtilList>)ways
     withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)pointOfInterest
                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile;

- (void)renderWaterBackgroundWithJavaUtilList:(id<JavaUtilList>)ways
                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile;

- (void)renderWayWithJavaUtilList:(id<JavaUtilList>)ways
withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way;

- (void)setScaleStrokeWidthWithByte:(jbyte)zoomLevel;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, canvasRasterer_, OrgMapsforgeMapLayerRendererCanvasRasterer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, currentLabels_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, drawingLayers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, labelStore_, OrgMapsforgeMapLayerLabelsTileBasedLabelStore *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, mapDatabase_, id<OrgMapsforgeMapReaderMapDataStore>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, previousJobTheme_, id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, renderTheme_, OrgMapsforgeMapRenderthemeRuleRenderTheme *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, ways_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, tileCache_, id<OrgMapsforgeMapLayerCacheTileCache>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererDatabaseRenderer, tileDependencies_, OrgMapsforgeMapLayerRendererTileDependencies *)

inline JavaLangByte *OrgMapsforgeMapLayerRendererDatabaseRenderer_get_DEFAULT_START_ZOOM_LEVEL();
static JavaLangByte *OrgMapsforgeMapLayerRendererDatabaseRenderer_DEFAULT_START_ZOOM_LEVEL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerRendererDatabaseRenderer, DEFAULT_START_ZOOM_LEVEL, JavaLangByte *)

inline jbyte OrgMapsforgeMapLayerRendererDatabaseRenderer_get_LAYERS();
#define OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS 11
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerRendererDatabaseRenderer, LAYERS, jbyte)

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerRendererDatabaseRenderer_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerRendererDatabaseRenderer_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerRendererDatabaseRenderer, LOGGER, JavaUtilLoggingLogger *)

inline jdouble OrgMapsforgeMapLayerRendererDatabaseRenderer_get_STROKE_INCREASE();
#define OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_INCREASE 1.5
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerRendererDatabaseRenderer, STROKE_INCREASE, jdouble)

inline jbyte OrgMapsforgeMapLayerRendererDatabaseRenderer_get_STROKE_MIN_ZOOM_LEVEL();
#define OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_MIN_ZOOM_LEVEL 12
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerRendererDatabaseRenderer, STROKE_MIN_ZOOM_LEVEL, jbyte)

inline OrgMapsforgeCoreModelTag *OrgMapsforgeMapLayerRendererDatabaseRenderer_get_TAG_NATURAL_WATER();
static OrgMapsforgeCoreModelTag *OrgMapsforgeMapLayerRendererDatabaseRenderer_TAG_NATURAL_WATER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerRendererDatabaseRenderer, TAG_NATURAL_WATER, OrgMapsforgeCoreModelTag *)

inline jbyte OrgMapsforgeMapLayerRendererDatabaseRenderer_get_ZOOM_MAX();
#define OrgMapsforgeMapLayerRendererDatabaseRenderer_ZOOM_MAX 22
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerRendererDatabaseRenderer, ZOOM_MAX, jbyte)

__attribute__((unused)) static IOSObjectArray *OrgMapsforgeMapLayerRendererDatabaseRenderer_getTilePixelCoordinatesWithInt_(jint tileSize);

__attribute__((unused)) static jbyte OrgMapsforgeMapLayerRendererDatabaseRenderer_getValidLayerWithByte_(jbyte layer);

__attribute__((unused)) static id<JavaUtilList> OrgMapsforgeMapLayerRendererDatabaseRenderer_createWayLists(OrgMapsforgeMapLayerRendererDatabaseRenderer *self);

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererDatabaseRenderer_processReadMapDataWithJavaUtilList_withOrgMapsforgeMapReaderMapReadResult_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapReaderMapReadResult *mapReadResult, OrgMapsforgeCoreModelTile *tile);

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderPointOfInterestWithJavaUtilList_withOrgMapsforgeMapReaderPointOfInterest_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapReaderPointOfInterest *pointOfInterest, OrgMapsforgeCoreModelTile *tile);

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWaterBackgroundWithJavaUtilList_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeCoreModelTile *tile);

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWayWithJavaUtilList_withOrgMapsforgeMapLayerRendererPolylineContainer_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapLayerRendererPolylineContainer *way);

__attribute__((unused)) static void OrgMapsforgeMapLayerRendererDatabaseRenderer_setScaleStrokeWidthWithByte_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, jbyte zoomLevel);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerRendererDatabaseRenderer)

@implementation OrgMapsforgeMapLayerRendererDatabaseRenderer

+ (IOSObjectArray *)getTilePixelCoordinatesWithInt:(jint)tileSize {
  return OrgMapsforgeMapLayerRendererDatabaseRenderer_getTilePixelCoordinatesWithInt_(tileSize);
}

+ (jbyte)getValidLayerWithByte:(jbyte)layer {
  return OrgMapsforgeMapLayerRendererDatabaseRenderer_getValidLayerWithByte_(layer);
}

- (instancetype)initWithOrgMapsforgeMapReaderMapDataStore:(id<OrgMapsforgeMapReaderMapDataStore>)mapDatabase
               withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
        withOrgMapsforgeMapLayerLabelsTileBasedLabelStore:(OrgMapsforgeMapLayerLabelsTileBasedLabelStore *)labelStore {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_(self, mapDatabase, graphicFactory, labelStore);
  return self;
}

- (instancetype)initWithOrgMapsforgeMapReaderMapDataStore:(id<OrgMapsforgeMapReaderMapDataStore>)mapFile
               withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                   withOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_(self, mapFile, graphicFactory, tileCache);
  return self;
}

- (void)destroy {
  [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) destroy];
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)executeJobWithOrgMapsforgeMapLayerRendererRendererJob:(OrgMapsforgeMapLayerRendererRendererJob *)rendererJob {
  jint tileSize = ((OrgMapsforgeCoreModelTile *) nil_chk(((OrgMapsforgeMapLayerRendererRendererJob *) nil_chk(rendererJob))->tile_))->tileSize_;
  jbyte zoomLevel = rendererJob->tile_->zoomLevel_;
  JreStrongAssignAndConsume(&self->currentLabels_, new_JavaUtilLinkedList_init());
  @try {
    JreStrongAssign(&self->renderTheme_, [((OrgMapsforgeMapRenderthemeRuleRenderThemeFuture *) nil_chk(rendererJob->renderThemeFuture_)) get]);
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerRendererDatabaseRenderer_LOGGER)) severeWithNSString:JreStrcat("$@", @"Error to retrieve render theme from future", e)];
    return nil;
  }
  JreStrongAssign(&self->ways_, OrgMapsforgeMapLayerRendererDatabaseRenderer_createWayLists(self));
  id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap = nil;
  if (![((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) hasMapBackgroundOutside] || [((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(self->mapDatabase_)) supportsTileWithOrgMapsforgeCoreModelTile:rendererJob->tile_]) {
    OrgMapsforgeMapLayerRendererDatabaseRenderer_setScaleStrokeWidthWithByte_(self, zoomLevel);
    [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) scaleTextSizeWithFloat:rendererJob->textScale_];
    if (self->mapDatabase_ != nil) {
      OrgMapsforgeMapReaderMapReadResult *mapReadResult = [self->mapDatabase_ readMapDataWithOrgMapsforgeCoreModelTile:rendererJob->tile_];
      OrgMapsforgeMapLayerRendererDatabaseRenderer_processReadMapDataWithJavaUtilList_withOrgMapsforgeMapReaderMapReadResult_withOrgMapsforgeCoreModelTile_(self, ways_, mapReadResult, rendererJob->tile_);
    }
    if (!rendererJob->labelsOnly_) {
      bitmap = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createTileBitmapWithInt:tileSize withBoolean:rendererJob->hasAlpha_];
      [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(bitmap)) setTimestampWithLong:[((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(rendererJob->mapDataStore_)) getDataTimestampWithOrgMapsforgeCoreModelTile:rendererJob->tile_]];
      [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) setCanvasBitmapWithOrgMapsforgeCoreGraphicsBitmap:bitmap];
      if (!rendererJob->hasAlpha_ && [((OrgMapsforgeMapModelDisplayModel *) nil_chk(rendererJob->displayModel_)) getBackgroundColor] != [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) getMapBackground]) {
        [self->canvasRasterer_ fillWithInt:[((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) getMapBackground]];
      }
      [self->canvasRasterer_ drawWaysWithJavaUtilList:ways_ withOrgMapsforgeCoreModelTile:rendererJob->tile_];
    }
    if (renderLabels_) {
      id<JavaUtilSet> labelsToDraw = create_JavaUtilHashSet_init();
      id<JavaUtilSet> neighbours = [rendererJob->tile_ getNeighbours];
      id<JavaUtilIterator> tileIterator = [((id<JavaUtilSet>) nil_chk(neighbours)) iterator];
      id<JavaUtilSet> undrawableElements = create_JavaUtilHashSet_init();
      while ([((id<JavaUtilIterator>) nil_chk(tileIterator)) hasNext]) {
        OrgMapsforgeCoreModelTile *neighbour = [tileIterator next];
        if ([((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(tileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:[rendererJob otherTileWithOrgMapsforgeCoreModelTile:neighbour]]) {
          [labelsToDraw addAllWithJavaUtilCollection:[((OrgMapsforgeMapLayerRendererTileDependencies *) nil_chk(tileDependencies_)) getOverlappingElementsWithOrgMapsforgeCoreModelTile:neighbour withOrgMapsforgeCoreModelTile:rendererJob->tile_]];
          for (OrgMapsforgeCoreMapelementsMapElementContainer * __strong current in nil_chk(currentLabels_)) {
            if ([((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(current)) intersectsWithOrgMapsforgeCoreModelRectangle:[((OrgMapsforgeCoreModelTile *) nil_chk(neighbour)) getBoundaryAbsolute]]) {
              [undrawableElements addWithId:current];
            }
          }
          [tileIterator remove];
        }
        else {
          [((OrgMapsforgeMapLayerRendererTileDependencies *) nil_chk(tileDependencies_)) removeTileDataWithOrgMapsforgeCoreModelTile:neighbour];
        }
      }
      [((id<JavaUtilList>) nil_chk(currentLabels_)) removeAllWithJavaUtilCollection:undrawableElements];
      id<JavaUtilList> currentElementsOrdered = OrgMapsforgeMapUtilLayerUtil_collisionFreeOrderedWithJavaUtilList_(currentLabels_);
      id<JavaUtilIterator> currentMapElementsIterator = [((id<JavaUtilList>) nil_chk(currentElementsOrdered)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(currentMapElementsIterator)) hasNext]) {
        OrgMapsforgeCoreMapelementsMapElementContainer *current = [currentMapElementsIterator next];
        for (OrgMapsforgeCoreMapelementsMapElementContainer * __strong label in labelsToDraw) {
          if ([((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(label)) clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:current]) {
            [currentMapElementsIterator remove];
            break;
          }
        }
      }
      [labelsToDraw addAllWithJavaUtilCollection:currentElementsOrdered];
      for (OrgMapsforgeCoreModelTile * __strong tile in neighbours) {
        [((OrgMapsforgeMapLayerRendererTileDependencies *) nil_chk(tileDependencies_)) removeTileDataWithOrgMapsforgeCoreModelTile:rendererJob->tile_ withOrgMapsforgeCoreModelTile:tile];
        for (OrgMapsforgeCoreMapelementsMapElementContainer * __strong element in labelsToDraw) {
          if ([((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(element)) intersectsWithOrgMapsforgeCoreModelRectangle:[((OrgMapsforgeCoreModelTile *) nil_chk(tile)) getBoundaryAbsolute]]) {
            [tileDependencies_ addOverlappingElementWithOrgMapsforgeCoreModelTile:rendererJob->tile_ withOrgMapsforgeCoreModelTile:tile withOrgMapsforgeCoreMapelementsMapElementContainer:element];
          }
        }
      }
      [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) drawMapElementsWithJavaUtilSet:labelsToDraw withOrgMapsforgeCoreModelTile:rendererJob->tile_];
    }
    else {
      [((OrgMapsforgeMapLayerLabelsTileBasedLabelStore *) nil_chk(self->labelStore_)) storeMapItemsWithOrgMapsforgeCoreModelTile:rendererJob->tile_ withJavaUtilList:self->currentLabels_];
    }
    for (jint i = [((id<JavaUtilList>) nil_chk(self->ways_)) size] - 1; i >= 0; --i) {
      id<JavaUtilList> innerWayList = [((id<JavaUtilList>) nil_chk(self->ways_)) getWithInt:i];
      for (jint j = [((id<JavaUtilList>) nil_chk(innerWayList)) size] - 1; j >= 0; --j) {
        [((id<JavaUtilList>) nil_chk([innerWayList getWithInt:j])) clear];
      }
    }
    if ([((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) hasMapBackgroundOutside]) {
      OrgMapsforgeCoreModelRectangle *insideArea = [((OrgMapsforgeCoreModelBoundingBox *) nil_chk([((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(self->mapDatabase_)) boundingBox])) getPositionRelativeToTileWithOrgMapsforgeCoreModelTile:rendererJob->tile_];
      if (!rendererJob->hasAlpha_) {
        [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) fillOutsideAreasWithInt:[((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) getMapBackgroundOutside] withOrgMapsforgeCoreModelRectangle:insideArea];
      }
      else {
        [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) fillOutsideAreasWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, TRANSPARENT) withOrgMapsforgeCoreModelRectangle:insideArea];
      }
    }
  }
  else {
    bitmap = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createTileBitmapWithInt:tileSize withBoolean:rendererJob->hasAlpha_];
    [((OrgMapsforgeMapLayerRendererCanvasRasterer *) nil_chk(self->canvasRasterer_)) setCanvasBitmapWithOrgMapsforgeCoreGraphicsBitmap:bitmap];
    if (!rendererJob->hasAlpha_) {
      [self->canvasRasterer_ fillWithInt:[((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) getMapBackgroundOutside]];
    }
  }
  return bitmap;
}

- (id<OrgMapsforgeMapReaderMapDataStore>)getMapDatabase {
  return self->mapDatabase_;
}

- (OrgMapsforgeCoreModelLatLong *)getStartPosition {
  if (self->mapDatabase_ != nil) {
    return [self->mapDatabase_ startPosition];
  }
  return nil;
}

- (JavaLangByte *)getStartZoomLevel {
  if (self->mapDatabase_ != nil && nil != [self->mapDatabase_ startZoomLevel]) {
    return [self->mapDatabase_ startZoomLevel];
  }
  return OrgMapsforgeMapLayerRendererDatabaseRenderer_DEFAULT_START_ZOOM_LEVEL;
}

- (jbyte)getZoomLevelMax {
  return OrgMapsforgeMapLayerRendererDatabaseRenderer_ZOOM_MAX;
}

- (void)renderAreaWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                  withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)fill
                                  withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke
                                                            withInt:(jint)level {
  id<JavaUtilList> list = [((id<JavaUtilList>) nil_chk(self->drawingLayers_)) getWithInt:level];
  [((id<JavaUtilList>) nil_chk(list)) addWithId:create_OrgMapsforgeMapLayerRendererShapePaintContainer_initWithOrgMapsforgeMapLayerRendererShapeContainer_withOrgMapsforgeCoreGraphicsPaint_(way, stroke)];
  [list addWithId:create_OrgMapsforgeMapLayerRendererShapePaintContainer_initWithOrgMapsforgeMapLayerRendererShapeContainer_withOrgMapsforgeCoreGraphicsPaint_(way, fill)];
}

- (void)renderAreaCaptionWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                       withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                                   withInt:(jint)priority
                                                              withNSString:(NSString *)caption
                                                                 withFloat:(jfloat)horizontalOffset
                                                                 withFloat:(jfloat)verticalOffset
                                         withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)fill
                                         withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke
                                      withOrgMapsforgeCoreGraphicsPosition:(OrgMapsforgeCoreGraphicsPosition *)position
                                                                   withInt:(jint)maxTextWidth {
  OrgMapsforgeCoreModelPoint *centerPoint = [((OrgMapsforgeCoreModelPoint *) nil_chk([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getCenterAbsolute])) offsetWithDouble:horizontalOffset withDouble:verticalOffset];
  [((id<JavaUtilList>) nil_chk(self->currentLabels_)) addWithId:[((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createPointTextContainerWithOrgMapsforgeCoreModelPoint:centerPoint withOrgMapsforgeCoreGraphicsDisplay:display withInt:priority withNSString:caption withOrgMapsforgeCoreGraphicsPaint:fill withOrgMapsforgeCoreGraphicsPaint:stroke withOrgMapsforgeCoreMapelementsSymbolContainer:nil withOrgMapsforgeCoreGraphicsPosition:position withInt:maxTextWidth]];
}

- (void)renderAreaSymbolWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                      withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                                  withInt:(jint)priority
                                       withOrgMapsforgeCoreGraphicsBitmap:(id<OrgMapsforgeCoreGraphicsBitmap>)symbol {
  OrgMapsforgeCoreModelPoint *centerPosition = [((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getCenterAbsolute];
  [((id<JavaUtilList>) nil_chk(self->currentLabels_)) addWithId:create_OrgMapsforgeCoreMapelementsSymbolContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_withOrgMapsforgeCoreGraphicsBitmap_(centerPosition, display, priority, symbol)];
}

- (void)renderPointOfInterestCaptionWithOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                         withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                                     withInt:(jint)priority
                                                                withNSString:(NSString *)caption
                                                                   withFloat:(jfloat)horizontalOffset
                                                                   withFloat:(jfloat)verticalOffset
                                           withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)fill
                                           withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke
                                        withOrgMapsforgeCoreGraphicsPosition:(OrgMapsforgeCoreGraphicsPosition *)position
                                                                     withInt:(jint)maxTextWidth
                                               withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeCoreModelPoint *poiPosition = OrgMapsforgeCoreUtilMercatorProjection_getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong_withLong_(((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(poi))->position_, ((OrgMapsforgeCoreModelTile *) nil_chk(tile))->mapSize_);
  [((id<JavaUtilList>) nil_chk(self->currentLabels_)) addWithId:[((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createPointTextContainerWithOrgMapsforgeCoreModelPoint:[((OrgMapsforgeCoreModelPoint *) nil_chk(poiPosition)) offsetWithDouble:horizontalOffset withDouble:verticalOffset] withOrgMapsforgeCoreGraphicsDisplay:display withInt:priority withNSString:caption withOrgMapsforgeCoreGraphicsPaint:fill withOrgMapsforgeCoreGraphicsPaint:stroke withOrgMapsforgeCoreMapelementsSymbolContainer:nil withOrgMapsforgeCoreGraphicsPosition:position withInt:maxTextWidth]];
}

- (void)renderPointOfInterestCircleWithOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                                                  withFloat:(jfloat)radius
                                          withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)fill
                                          withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke
                                                                    withInt:(jint)level
                                              withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  id<JavaUtilList> list = [((id<JavaUtilList>) nil_chk(self->drawingLayers_)) getWithInt:level];
  OrgMapsforgeCoreModelPoint *poiPosition = OrgMapsforgeCoreUtilMercatorProjection_getPixelRelativeToTileWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreModelTile_(((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(poi))->position_, tile);
  [((id<JavaUtilList>) nil_chk(list)) addWithId:create_OrgMapsforgeMapLayerRendererShapePaintContainer_initWithOrgMapsforgeMapLayerRendererShapeContainer_withOrgMapsforgeCoreGraphicsPaint_(create_OrgMapsforgeMapLayerRendererCircleContainer_initWithOrgMapsforgeCoreModelPoint_withFloat_(poiPosition, radius), stroke)];
  [list addWithId:create_OrgMapsforgeMapLayerRendererShapePaintContainer_initWithOrgMapsforgeMapLayerRendererShapeContainer_withOrgMapsforgeCoreGraphicsPaint_(create_OrgMapsforgeMapLayerRendererCircleContainer_initWithOrgMapsforgeCoreModelPoint_withFloat_(poiPosition, radius), fill)];
}

- (void)renderPointOfInterestSymbolWithOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)poi
                                        withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                                    withInt:(jint)priority
                                         withOrgMapsforgeCoreGraphicsBitmap:(id<OrgMapsforgeCoreGraphicsBitmap>)symbol
                                              withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeCoreModelPoint *poiPosition = OrgMapsforgeCoreUtilMercatorProjection_getPixelAbsoluteWithOrgMapsforgeCoreModelLatLong_withLong_(((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(poi))->position_, ((OrgMapsforgeCoreModelTile *) nil_chk(tile))->mapSize_);
  [((id<JavaUtilList>) nil_chk(self->currentLabels_)) addWithId:create_OrgMapsforgeCoreMapelementsSymbolContainer_initWithOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreGraphicsDisplay_withInt_withOrgMapsforgeCoreGraphicsBitmap_(poiPosition, display, priority, symbol)];
}

- (void)renderWayWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                 withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke
                                                         withFloat:(jfloat)dy
                                                           withInt:(jint)level {
  [((id<JavaUtilList>) nil_chk([((id<JavaUtilList>) nil_chk(self->drawingLayers_)) getWithInt:level])) addWithId:create_OrgMapsforgeMapLayerRendererShapePaintContainer_initWithOrgMapsforgeMapLayerRendererShapeContainer_withOrgMapsforgeCoreGraphicsPaint_withFloat_(way, stroke, dy)];
}

- (void)renderWaySymbolWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                     withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                                 withInt:(jint)priority
                                      withOrgMapsforgeCoreGraphicsBitmap:(id<OrgMapsforgeCoreGraphicsBitmap>)symbol
                                                               withFloat:(jfloat)dy
                                                             withBoolean:(jboolean)alignCenter
                                                             withBoolean:(jboolean)repeat
                                                               withFloat:(jfloat)repeatGap
                                                               withFloat:(jfloat)repeatStart
                                                             withBoolean:(jboolean)rotate {
  OrgMapsforgeMapLayerRendererWayDecorator_renderSymbolWithOrgMapsforgeCoreGraphicsBitmap_withOrgMapsforgeCoreGraphicsDisplay_withInt_withFloat_withBoolean_withBoolean_withFloat_withFloat_withBoolean_withOrgMapsforgeCoreModelPointArray2_withJavaUtilList_(symbol, display, priority, dy, alignCenter, repeat, repeatGap, repeatStart, rotate, [((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getCoordinatesAbsolute], self->currentLabels_);
}

- (void)renderWayTextWithOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way
                                   withOrgMapsforgeCoreGraphicsDisplay:(OrgMapsforgeCoreGraphicsDisplay *)display
                                                               withInt:(jint)priority
                                                          withNSString:(NSString *)textKey
                                                             withFloat:(jfloat)dy
                                     withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)fill
                                     withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)stroke {
  OrgMapsforgeMapLayerRendererWayDecorator_renderTextWithOrgMapsforgeCoreModelTile_withNSString_withOrgMapsforgeCoreGraphicsDisplay_withInt_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreModelPointArray2_withJavaUtilList_([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getTile], textKey, display, priority, dy, fill, stroke, [way getCoordinatesAbsolute], self->currentLabels_);
}

- (id<JavaUtilList>)createWayLists {
  return OrgMapsforgeMapLayerRendererDatabaseRenderer_createWayLists(self);
}

- (void)processReadMapDataWithJavaUtilList:(id<JavaUtilList>)ways
    withOrgMapsforgeMapReaderMapReadResult:(OrgMapsforgeMapReaderMapReadResult *)mapReadResult
             withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_processReadMapDataWithJavaUtilList_withOrgMapsforgeMapReaderMapReadResult_withOrgMapsforgeCoreModelTile_(self, ways, mapReadResult, tile);
}

- (void)renderPointOfInterestWithJavaUtilList:(id<JavaUtilList>)ways
     withOrgMapsforgeMapReaderPointOfInterest:(OrgMapsforgeMapReaderPointOfInterest *)pointOfInterest
                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_renderPointOfInterestWithJavaUtilList_withOrgMapsforgeMapReaderPointOfInterest_withOrgMapsforgeCoreModelTile_(self, ways, pointOfInterest, tile);
}

- (void)renderWaterBackgroundWithJavaUtilList:(id<JavaUtilList>)ways
                withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWaterBackgroundWithJavaUtilList_withOrgMapsforgeCoreModelTile_(self, ways, tile);
}

- (void)renderWayWithJavaUtilList:(id<JavaUtilList>)ways
withOrgMapsforgeMapLayerRendererPolylineContainer:(OrgMapsforgeMapLayerRendererPolylineContainer *)way {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWayWithJavaUtilList_withOrgMapsforgeMapLayerRendererPolylineContainer_(self, ways, way);
}

- (void)setScaleStrokeWidthWithByte:(jbyte)zoomLevel {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_setScaleStrokeWidthWithByte_(self, zoomLevel);
}

- (void)dealloc {
  RELEASE_(canvasRasterer_);
  RELEASE_(currentLabels_);
  RELEASE_(drawingLayers_);
  RELEASE_(graphicFactory_);
  RELEASE_(labelStore_);
  RELEASE_(mapDatabase_);
  RELEASE_(previousJobTheme_);
  RELEASE_(renderTheme_);
  RELEASE_(ways_);
  RELEASE_(tileCache_);
  RELEASE_(tileDependencies_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgMapsforgeCoreModelPoint;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "B", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapDataStore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangByte;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x2, -1, -1, -1, 26, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 20, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x2, 38, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTilePixelCoordinatesWithInt:);
  methods[1].selector = @selector(getValidLayerWithByte:);
  methods[2].selector = @selector(initWithOrgMapsforgeMapReaderMapDataStore:withOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapLayerLabelsTileBasedLabelStore:);
  methods[3].selector = @selector(initWithOrgMapsforgeMapReaderMapDataStore:withOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapLayerCacheTileCache:);
  methods[4].selector = @selector(destroy);
  methods[5].selector = @selector(executeJobWithOrgMapsforgeMapLayerRendererRendererJob:);
  methods[6].selector = @selector(getMapDatabase);
  methods[7].selector = @selector(getStartPosition);
  methods[8].selector = @selector(getStartZoomLevel);
  methods[9].selector = @selector(getZoomLevelMax);
  methods[10].selector = @selector(renderAreaWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withInt:);
  methods[11].selector = @selector(renderAreaCaptionWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsDisplay:withInt:withNSString:withFloat:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPosition:withInt:);
  methods[12].selector = @selector(renderAreaSymbolWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsDisplay:withInt:withOrgMapsforgeCoreGraphicsBitmap:);
  methods[13].selector = @selector(renderPointOfInterestCaptionWithOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreGraphicsDisplay:withInt:withNSString:withFloat:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPosition:withInt:withOrgMapsforgeCoreModelTile:);
  methods[14].selector = @selector(renderPointOfInterestCircleWithOrgMapsforgeMapReaderPointOfInterest:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withInt:withOrgMapsforgeCoreModelTile:);
  methods[15].selector = @selector(renderPointOfInterestSymbolWithOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreGraphicsDisplay:withInt:withOrgMapsforgeCoreGraphicsBitmap:withOrgMapsforgeCoreModelTile:);
  methods[16].selector = @selector(renderWayWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsPaint:withFloat:withInt:);
  methods[17].selector = @selector(renderWaySymbolWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsDisplay:withInt:withOrgMapsforgeCoreGraphicsBitmap:withFloat:withBoolean:withBoolean:withFloat:withFloat:withBoolean:);
  methods[18].selector = @selector(renderWayTextWithOrgMapsforgeMapLayerRendererPolylineContainer:withOrgMapsforgeCoreGraphicsDisplay:withInt:withNSString:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:);
  methods[19].selector = @selector(createWayLists);
  methods[20].selector = @selector(processReadMapDataWithJavaUtilList:withOrgMapsforgeMapReaderMapReadResult:withOrgMapsforgeCoreModelTile:);
  methods[21].selector = @selector(renderPointOfInterestWithJavaUtilList:withOrgMapsforgeMapReaderPointOfInterest:withOrgMapsforgeCoreModelTile:);
  methods[22].selector = @selector(renderWaterBackgroundWithJavaUtilList:withOrgMapsforgeCoreModelTile:);
  methods[23].selector = @selector(renderWayWithJavaUtilList:withOrgMapsforgeMapLayerRendererPolylineContainer:);
  methods[24].selector = @selector(setScaleStrokeWidthWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_START_ZOOM_LEVEL", "LJavaLangByte;", .constantValue.asLong = 0, 0x1a, -1, 39, -1, -1 },
    { "LAYERS", "B", .constantValue.asChar = OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS, 0x1a, -1, -1, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "STROKE_INCREASE", "D", .constantValue.asDouble = OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_INCREASE, 0x1a, -1, -1, -1, -1 },
    { "STROKE_MIN_ZOOM_LEVEL", "B", .constantValue.asChar = OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_MIN_ZOOM_LEVEL, 0x1a, -1, -1, -1, -1 },
    { "TAG_NATURAL_WATER", "LOrgMapsforgeCoreModelTag;", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
    { "ZOOM_MAX", "B", .constantValue.asChar = OrgMapsforgeMapLayerRendererDatabaseRenderer_ZOOM_MAX, 0x1a, -1, -1, -1, -1 },
    { "canvasRasterer_", "LOrgMapsforgeMapLayerRendererCanvasRasterer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "currentLabels_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "drawingLayers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 43, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "labelStore_", "LOrgMapsforgeMapLayerLabelsTileBasedLabelStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapDatabase_", "LOrgMapsforgeMapReaderMapDataStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "previousJobTheme_", "LOrgMapsforgeMapRenderthemeXmlRenderTheme;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "renderLabels_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "renderTheme_", "LOrgMapsforgeMapRenderthemeRuleRenderTheme;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ways_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 44, -1 },
    { "tileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tileDependencies_", "LOrgMapsforgeMapLayerRendererTileDependencies;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getTilePixelCoordinates", "I", "getValidLayer", "B", "LOrgMapsforgeMapReaderMapDataStore;LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapLayerLabelsTileBasedLabelStore;", "LOrgMapsforgeMapReaderMapDataStore;LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapLayerCacheTileCache;", "executeJob", "LOrgMapsforgeMapLayerRendererRendererJob;", "renderArea", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;I", "renderAreaCaption", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsDisplay;ILNSString;FFLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPosition;I", "renderAreaSymbol", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsDisplay;ILOrgMapsforgeCoreGraphicsBitmap;", "renderPointOfInterestCaption", "LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreGraphicsDisplay;ILNSString;FFLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPosition;ILOrgMapsforgeCoreModelTile;", "renderPointOfInterestCircle", "LOrgMapsforgeMapReaderPointOfInterest;FLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;ILOrgMapsforgeCoreModelTile;", "renderPointOfInterestSymbol", "LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreGraphicsDisplay;ILOrgMapsforgeCoreGraphicsBitmap;LOrgMapsforgeCoreModelTile;", "renderWay", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsPaint;FI", "renderWaySymbol", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsDisplay;ILOrgMapsforgeCoreGraphicsBitmap;FZZFFZ", "renderWayText", "LOrgMapsforgeMapLayerRendererPolylineContainer;LOrgMapsforgeCoreGraphicsDisplay;ILNSString;FLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;", "()Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;", "processReadMapData", "LJavaUtilList;LOrgMapsforgeMapReaderMapReadResult;LOrgMapsforgeCoreModelTile;", "(Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;Lorg/mapsforge/map/reader/MapReadResult;Lorg/mapsforge/core/model/Tile;)V", "renderPointOfInterest", "LJavaUtilList;LOrgMapsforgeMapReaderPointOfInterest;LOrgMapsforgeCoreModelTile;", "(Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;Lorg/mapsforge/map/reader/PointOfInterest;Lorg/mapsforge/core/model/Tile;)V", "renderWaterBackground", "LJavaUtilList;LOrgMapsforgeCoreModelTile;", "(Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;Lorg/mapsforge/core/model/Tile;)V", "LJavaUtilList;LOrgMapsforgeMapLayerRendererPolylineContainer;", "(Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;Lorg/mapsforge/map/layer/renderer/PolylineContainer;)V", "setScaleStrokeWidth", &OrgMapsforgeMapLayerRendererDatabaseRenderer_DEFAULT_START_ZOOM_LEVEL, &OrgMapsforgeMapLayerRendererDatabaseRenderer_LOGGER, &OrgMapsforgeMapLayerRendererDatabaseRenderer_TAG_NATURAL_WATER, "Ljava/util/List<Lorg/mapsforge/core/mapelements/MapElementContainer;>;", "Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;", "Ljava/util/List<Ljava/util/List<Ljava/util/List<Lorg/mapsforge/map/layer/renderer/ShapePaintContainer;>;>;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererDatabaseRenderer = { "DatabaseRenderer", "org.mapsforge.map.layer.renderer", ptrTable, methods, fields, 7, 0x1, 25, 19, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerRendererDatabaseRenderer;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerRendererDatabaseRenderer class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerRendererDatabaseRenderer_DEFAULT_START_ZOOM_LEVEL, JavaLangByte_valueOfWithByte_((jbyte) 12));
    JreStrongAssign(&OrgMapsforgeMapLayerRendererDatabaseRenderer_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerRendererDatabaseRenderer_class_() getName]));
    JreStrongAssignAndConsume(&OrgMapsforgeMapLayerRendererDatabaseRenderer_TAG_NATURAL_WATER, new_OrgMapsforgeCoreModelTag_initWithNSString_withNSString_(@"natural", @"water"));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerRendererDatabaseRenderer)
  }
}

@end

IOSObjectArray *OrgMapsforgeMapLayerRendererDatabaseRenderer_getTilePixelCoordinatesWithInt_(jint tileSize) {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_initialize();
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:5 type:OrgMapsforgeCoreModelPoint_class_()];
  IOSObjectArray_SetAndConsume(result, 0, new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(0, 0));
  IOSObjectArray_SetAndConsume(result, 1, new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(tileSize, 0));
  IOSObjectArray_SetAndConsume(result, 2, new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(tileSize, tileSize));
  IOSObjectArray_SetAndConsume(result, 3, new_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(0, tileSize));
  IOSObjectArray_Set(result, 4, IOSObjectArray_Get(result, 0));
  return result;
}

jbyte OrgMapsforgeMapLayerRendererDatabaseRenderer_getValidLayerWithByte_(jbyte layer) {
  OrgMapsforgeMapLayerRendererDatabaseRenderer_initialize();
  if (layer < 0) {
    return 0;
  }
  else if (layer >= OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS) {
    return OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS - 1;
  }
  else {
    return layer;
  }
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<OrgMapsforgeMapReaderMapDataStore> mapDatabase, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapLayerLabelsTileBasedLabelStore *labelStore) {
  NSObject_init(self);
  JreStrongAssign(&self->mapDatabase_, mapDatabase);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssignAndConsume(&self->canvasRasterer_, new_OrgMapsforgeMapLayerRendererCanvasRasterer_initWithOrgMapsforgeCoreGraphicsGraphicFactory_(graphicFactory));
  JreStrongAssign(&self->labelStore_, labelStore);
  self->renderLabels_ = false;
  JreStrongAssign(&self->tileCache_, nil);
  JreStrongAssign(&self->tileDependencies_, nil);
}

OrgMapsforgeMapLayerRendererDatabaseRenderer *new_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_(id<OrgMapsforgeMapReaderMapDataStore> mapDatabase, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapLayerLabelsTileBasedLabelStore *labelStore) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererDatabaseRenderer, initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_, mapDatabase, graphicFactory, labelStore)
}

OrgMapsforgeMapLayerRendererDatabaseRenderer *create_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_(id<OrgMapsforgeMapReaderMapDataStore> mapDatabase, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapLayerLabelsTileBasedLabelStore *labelStore) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererDatabaseRenderer, initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_, mapDatabase, graphicFactory, labelStore)
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<OrgMapsforgeMapReaderMapDataStore> mapFile, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, id<OrgMapsforgeMapLayerCacheTileCache> tileCache) {
  NSObject_init(self);
  JreStrongAssign(&self->mapDatabase_, mapFile);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssignAndConsume(&self->canvasRasterer_, new_OrgMapsforgeMapLayerRendererCanvasRasterer_initWithOrgMapsforgeCoreGraphicsGraphicFactory_(graphicFactory));
  JreStrongAssign(&self->labelStore_, nil);
  self->renderLabels_ = true;
  JreStrongAssign(&self->tileCache_, tileCache);
  JreStrongAssignAndConsume(&self->tileDependencies_, new_OrgMapsforgeMapLayerRendererTileDependencies_init());
}

OrgMapsforgeMapLayerRendererDatabaseRenderer *new_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapReaderMapDataStore> mapFile, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, id<OrgMapsforgeMapLayerCacheTileCache> tileCache) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererDatabaseRenderer, initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_, mapFile, graphicFactory, tileCache)
}

OrgMapsforgeMapLayerRendererDatabaseRenderer *create_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapReaderMapDataStore> mapFile, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, id<OrgMapsforgeMapLayerCacheTileCache> tileCache) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererDatabaseRenderer, initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_, mapFile, graphicFactory, tileCache)
}

id<JavaUtilList> OrgMapsforgeMapLayerRendererDatabaseRenderer_createWayLists(OrgMapsforgeMapLayerRendererDatabaseRenderer *self) {
  id<JavaUtilList> result = create_JavaUtilArrayList_initWithInt_(OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS);
  jint levels = [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) getLevels];
  for (jbyte i = OrgMapsforgeMapLayerRendererDatabaseRenderer_LAYERS - 1; i >= 0; --i) {
    id<JavaUtilList> innerWayList = create_JavaUtilArrayList_initWithInt_(levels);
    for (jint j = levels - 1; j >= 0; --j) {
      [innerWayList addWithId:create_JavaUtilArrayList_initWithInt_(0)];
    }
    [result addWithId:innerWayList];
  }
  return result;
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_processReadMapDataWithJavaUtilList_withOrgMapsforgeMapReaderMapReadResult_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapReaderMapReadResult *mapReadResult, OrgMapsforgeCoreModelTile *tile) {
  if (mapReadResult == nil) {
    return;
  }
  for (OrgMapsforgeMapReaderPointOfInterest * __strong pointOfInterest in nil_chk(mapReadResult->pointOfInterests_)) {
    OrgMapsforgeMapLayerRendererDatabaseRenderer_renderPointOfInterestWithJavaUtilList_withOrgMapsforgeMapReaderPointOfInterest_withOrgMapsforgeCoreModelTile_(self, ways, pointOfInterest, tile);
  }
  for (OrgMapsforgeMapReaderWay * __strong way in nil_chk(mapReadResult->ways_)) {
    OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWayWithJavaUtilList_withOrgMapsforgeMapLayerRendererPolylineContainer_(self, ways, create_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeMapReaderWay_withOrgMapsforgeCoreModelTile_(way, tile));
  }
  if (mapReadResult->isWater_) {
    OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWaterBackgroundWithJavaUtilList_withOrgMapsforgeCoreModelTile_(self, ways, tile);
  }
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderPointOfInterestWithJavaUtilList_withOrgMapsforgeMapReaderPointOfInterest_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapReaderPointOfInterest *pointOfInterest, OrgMapsforgeCoreModelTile *tile) {
  JreStrongAssign(&self->drawingLayers_, [((id<JavaUtilList>) nil_chk(ways)) getWithInt:OrgMapsforgeMapLayerRendererDatabaseRenderer_getValidLayerWithByte_(((OrgMapsforgeMapReaderPointOfInterest *) nil_chk(pointOfInterest))->layer_)]);
  [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) matchNodeWithOrgMapsforgeMapRenderthemeRenderCallback:self withOrgMapsforgeMapReaderPointOfInterest:pointOfInterest withOrgMapsforgeCoreModelTile:tile];
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWaterBackgroundWithJavaUtilList_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeCoreModelTile *tile) {
  JreStrongAssign(&self->drawingLayers_, [((id<JavaUtilList>) nil_chk(ways)) getWithInt:0]);
  IOSObjectArray *coordinates = OrgMapsforgeMapLayerRendererDatabaseRenderer_getTilePixelCoordinatesWithInt_(((OrgMapsforgeCoreModelTile *) nil_chk(tile))->tileSize_);
  OrgMapsforgeMapLayerRendererPolylineContainer *way = create_OrgMapsforgeMapLayerRendererPolylineContainer_initWithOrgMapsforgeCoreModelPointArray_withOrgMapsforgeCoreModelTile_withJavaUtilList_(coordinates, tile, JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ OrgMapsforgeMapLayerRendererDatabaseRenderer_TAG_NATURAL_WATER } count:1 type:OrgMapsforgeCoreModelTag_class_()]));
  [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) matchClosedWayWithOrgMapsforgeMapRenderthemeRenderCallback:self withOrgMapsforgeMapLayerRendererPolylineContainer:way];
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_renderWayWithJavaUtilList_withOrgMapsforgeMapLayerRendererPolylineContainer_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, id<JavaUtilList> ways, OrgMapsforgeMapLayerRendererPolylineContainer *way) {
  JreStrongAssign(&self->drawingLayers_, [((id<JavaUtilList>) nil_chk(ways)) getWithInt:OrgMapsforgeMapLayerRendererDatabaseRenderer_getValidLayerWithByte_([((OrgMapsforgeMapLayerRendererPolylineContainer *) nil_chk(way)) getLayer])]);
  if ([way isClosedWay]) {
    [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) matchClosedWayWithOrgMapsforgeMapRenderthemeRenderCallback:self withOrgMapsforgeMapLayerRendererPolylineContainer:way];
  }
  else {
    [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) matchLinearWayWithOrgMapsforgeMapRenderthemeRenderCallback:self withOrgMapsforgeMapLayerRendererPolylineContainer:way];
  }
}

void OrgMapsforgeMapLayerRendererDatabaseRenderer_setScaleStrokeWidthWithByte_(OrgMapsforgeMapLayerRendererDatabaseRenderer *self, jbyte zoomLevel) {
  jint zoomLevelDiff = JavaLangMath_maxWithInt_withInt_(zoomLevel - OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_MIN_ZOOM_LEVEL, 0);
  [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk(self->renderTheme_)) scaleStrokeWidthWithFloat:(jfloat) JavaLangMath_powWithDouble_withDouble_(OrgMapsforgeMapLayerRendererDatabaseRenderer_STROKE_INCREASE, zoomLevelDiff)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererDatabaseRenderer)
