//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/TileRendererLayer.java
//

#include "J2ObjC_source.h"
#include "java/lang/Exception.h"
#include "java/lang/Thread.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Matrix.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/TileLayer.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/labels/LabelStore.h"
#include "org/mapsforge/map/layer/labels/TileBasedLabelStore.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/layer/renderer/DatabaseRenderer.h"
#include "org/mapsforge/map/layer/renderer/DestroyThread.h"
#include "org/mapsforge/map/layer/renderer/MapWorker.h"
#include "org/mapsforge/map/layer/renderer/RendererJob.h"
#include "org/mapsforge/map/layer/renderer/TileRendererLayer.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewPosition.h"
#include "org/mapsforge/map/reader/MapDataStore.h"
#include "org/mapsforge/map/rendertheme/XmlRenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderTheme.h"
#include "org/mapsforge/map/rendertheme/rule/RenderThemeFuture.h"

@interface OrgMapsforgeMapLayerRendererTileRendererLayer () {
 @public
  OrgMapsforgeMapLayerRendererDatabaseRenderer *databaseRenderer_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  id<OrgMapsforgeMapReaderMapDataStore> mapDataStore_;
  OrgMapsforgeMapLayerRendererMapWorker *mapWorker_;
  OrgMapsforgeMapRenderthemeRuleRenderThemeFuture *renderThemeFuture_;
  jfloat textScale_;
  OrgMapsforgeMapLayerLabelsTileBasedLabelStore *tileBasedLabelStore_;
  id<OrgMapsforgeMapRenderthemeXmlRenderTheme> xmlRenderTheme_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, databaseRenderer_, OrgMapsforgeMapLayerRendererDatabaseRenderer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, mapDataStore_, id<OrgMapsforgeMapReaderMapDataStore>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, mapWorker_, OrgMapsforgeMapLayerRendererMapWorker *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, renderThemeFuture_, OrgMapsforgeMapRenderthemeRuleRenderThemeFuture *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, tileBasedLabelStore_, OrgMapsforgeMapLayerLabelsTileBasedLabelStore *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerRendererTileRendererLayer, xmlRenderTheme_, id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)

@implementation OrgMapsforgeMapLayerRendererTileRendererLayer

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                     withOrgMapsforgeMapReaderMapDataStore:(id<OrgMapsforgeMapReaderMapDataStore>)mapDataStore
                   withOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
                                               withBoolean:(jboolean)isTransparent
                                               withBoolean:(jboolean)renderLabels
                withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerRendererTileRendererLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, tileCache, mapDataStore, mapViewPosition, isTransparent, renderLabels, graphicFactory);
  return self;
}

- (id<OrgMapsforgeMapLayerLabelsLabelStore>)getLabelStore {
  return tileBasedLabelStore_;
}

- (id<OrgMapsforgeMapReaderMapDataStore>)getMapDataStore {
  return mapDataStore_;
}

- (jfloat)getTextScale {
  return self->textScale_;
}

- (void)onDestroy {
  [create_OrgMapsforgeMapLayerRendererDestroyThread_initWithJavaLangThread_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapLayerRendererDatabaseRenderer_(self->mapWorker_, self->mapDataStore_, self->databaseRenderer_) start];
  if (self->renderThemeFuture_ != nil) {
    if ([renderThemeFuture_ isDone]) {
      @try {
        [((OrgMapsforgeMapRenderthemeRuleRenderTheme *) nil_chk([((OrgMapsforgeMapRenderthemeRuleRenderThemeFuture *) nil_chk(renderThemeFuture_)) get])) destroy];
      }
      @catch (JavaLangException *e) {
      }
    }
    else {
      [((OrgMapsforgeMapRenderthemeRuleRenderThemeFuture *) nil_chk(renderThemeFuture_)) cancelWithBoolean:true];
    }
  }
  [super onDestroy];
}

- (void)setDisplayModelWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  @synchronized(self) {
    [super setDisplayModelWithOrgMapsforgeMapModelDisplayModel:displayModel];
    if (displayModel != nil) {
      [self compileRenderTheme];
      JreStrongAssignAndConsume(&self->mapWorker_, new_OrgMapsforgeMapLayerRendererMapWorker_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerRendererDatabaseRenderer_withOrgMapsforgeMapLayerLayer_(self->tileCache_, self->jobQueue_, self->databaseRenderer_, self));
      [self->mapWorker_ start];
    }
    else {
      if (self->mapWorker_ != nil) {
        [self->mapWorker_ interrupt];
      }
    }
  }
}

- (void)setTextScaleWithFloat:(jfloat)textScale {
  self->textScale_ = textScale;
}

- (void)setXmlRenderThemeWithOrgMapsforgeMapRenderthemeXmlRenderTheme:(id<OrgMapsforgeMapRenderthemeXmlRenderTheme>)xmlRenderTheme {
  JreStrongAssign(&self->xmlRenderTheme_, xmlRenderTheme);
  [self compileRenderTheme];
}

- (void)compileRenderTheme {
  JreStrongAssignAndConsume(&self->renderThemeFuture_, new_OrgMapsforgeMapRenderthemeRuleRenderThemeFuture_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapRenderthemeXmlRenderTheme_withOrgMapsforgeMapModelDisplayModel_(self->graphicFactory_, self->xmlRenderTheme_, self->displayModel_));
  [create_JavaLangThread_initWithJavaLangRunnable_(self->renderThemeFuture_) run];
}

- (OrgMapsforgeMapLayerRendererRendererJob *)createJobWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  return create_OrgMapsforgeMapLayerRendererRendererJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapRenderthemeRuleRenderThemeFuture_withOrgMapsforgeMapModelDisplayModel_withFloat_withBoolean_withBoolean_(tile, self->mapDataStore_, self->renderThemeFuture_, self->displayModel_, self->textScale_, self->isTransparent_, false);
}

- (jboolean)isTileStaleWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
              withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  return [((id<OrgMapsforgeMapReaderMapDataStore>) nil_chk(self->mapDataStore_)) getDataTimestampWithOrgMapsforgeCoreModelTile:tile] > [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(bitmap)) getTimestamp];
}

- (void)onAdd {
  [((OrgMapsforgeMapLayerRendererMapWorker *) nil_chk(self->mapWorker_)) proceed];
  [super onAdd];
}

- (void)onRemove {
  [((OrgMapsforgeMapLayerRendererMapWorker *) nil_chk(self->mapWorker_)) pause];
  [super onRemove];
}

- (void)retrieveLabelsOnlyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerRendererRendererJob *)job {
  if (self->hasJobQueue_ && self->tileBasedLabelStore_ != nil && [self->tileBasedLabelStore_ requiresTileWithOrgMapsforgeCoreModelTile:((OrgMapsforgeMapLayerRendererRendererJob *) nil_chk(job))->tile_]) {
    [((OrgMapsforgeMapLayerRendererRendererJob *) nil_chk(job)) setRetrieveLabelsOnly];
    [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) addWithOrgMapsforgeMapLayerQueueJob:job];
  }
}

- (void)dealloc {
  RELEASE_(databaseRenderer_);
  RELEASE_(graphicFactory_);
  RELEASE_(mapDataStore_);
  RELEASE_(mapWorker_);
  RELEASE_(renderThemeFuture_);
  RELEASE_(tileBasedLabelStore_);
  RELEASE_(xmlRenderTheme_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerLabelsLabelStore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapReaderMapDataStore;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerRendererRendererJob;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapReaderMapDataStore:withOrgMapsforgeMapModelMapViewPosition:withBoolean:withBoolean:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[1].selector = @selector(getLabelStore);
  methods[2].selector = @selector(getMapDataStore);
  methods[3].selector = @selector(getTextScale);
  methods[4].selector = @selector(onDestroy);
  methods[5].selector = @selector(setDisplayModelWithOrgMapsforgeMapModelDisplayModel:);
  methods[6].selector = @selector(setTextScaleWithFloat:);
  methods[7].selector = @selector(setXmlRenderThemeWithOrgMapsforgeMapRenderthemeXmlRenderTheme:);
  methods[8].selector = @selector(compileRenderTheme);
  methods[9].selector = @selector(createJobWithOrgMapsforgeCoreModelTile:);
  methods[10].selector = @selector(isTileStaleWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[11].selector = @selector(onAdd);
  methods[12].selector = @selector(onRemove);
  methods[13].selector = @selector(retrieveLabelsOnlyWithOrgMapsforgeMapLayerQueueJob:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "databaseRenderer_", "LOrgMapsforgeMapLayerRendererDatabaseRenderer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapDataStore_", "LOrgMapsforgeMapReaderMapDataStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapWorker_", "LOrgMapsforgeMapLayerRendererMapWorker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "renderThemeFuture_", "LOrgMapsforgeMapRenderthemeRuleRenderThemeFuture;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textScale_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileBasedLabelStore_", "LOrgMapsforgeMapLayerLabelsTileBasedLabelStore;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "xmlRenderTheme_", "LOrgMapsforgeMapRenderthemeXmlRenderTheme;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapReaderMapDataStore;LOrgMapsforgeMapModelMapViewPosition;ZZLOrgMapsforgeCoreGraphicsGraphicFactory;", "setDisplayModel", "LOrgMapsforgeMapModelDisplayModel;", "setTextScale", "F", "setXmlRenderTheme", "LOrgMapsforgeMapRenderthemeXmlRenderTheme;", "createJob", "LOrgMapsforgeCoreModelTile;", "isTileStale", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreGraphicsTileBitmap;", "retrieveLabelsOnly", "LOrgMapsforgeMapLayerRendererRendererJob;", "Lorg/mapsforge/map/layer/TileLayer<Lorg/mapsforge/map/layer/renderer/RendererJob;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererTileRendererLayer = { "TileRendererLayer", "org.mapsforge.map.layer.renderer", ptrTable, methods, fields, 7, 0x1, 14, 8, -1, -1, -1, 13, -1 };
  return &_OrgMapsforgeMapLayerRendererTileRendererLayer;
}

@end

void OrgMapsforgeMapLayerRendererTileRendererLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerRendererTileRendererLayer *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, id<OrgMapsforgeMapReaderMapDataStore> mapDataStore, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, jboolean isTransparent, jboolean renderLabels, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_(self, tileCache, mapViewPosition, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createMatrix], isTransparent);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssign(&self->mapDataStore_, mapDataStore);
  if (renderLabels) {
    JreStrongAssign(&self->tileBasedLabelStore_, nil);
    JreStrongAssignAndConsume(&self->databaseRenderer_, new_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerCacheTileCache_(self->mapDataStore_, graphicFactory, tileCache));
  }
  else {
    JreStrongAssignAndConsume(&self->tileBasedLabelStore_, new_OrgMapsforgeMapLayerLabelsTileBasedLabelStore_initWithInt_([((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(tileCache)) getCapacityFirstLevel]));
    JreStrongAssignAndConsume(&self->databaseRenderer_, new_OrgMapsforgeMapLayerRendererDatabaseRenderer_initWithOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapLayerLabelsTileBasedLabelStore_(self->mapDataStore_, graphicFactory, self->tileBasedLabelStore_));
  }
  self->textScale_ = 1;
}

OrgMapsforgeMapLayerRendererTileRendererLayer *new_OrgMapsforgeMapLayerRendererTileRendererLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, id<OrgMapsforgeMapReaderMapDataStore> mapDataStore, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, jboolean isTransparent, jboolean renderLabels, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererTileRendererLayer, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_, tileCache, mapDataStore, mapViewPosition, isTransparent, renderLabels, graphicFactory)
}

OrgMapsforgeMapLayerRendererTileRendererLayer *create_OrgMapsforgeMapLayerRendererTileRendererLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, id<OrgMapsforgeMapReaderMapDataStore> mapDataStore, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, jboolean isTransparent, jboolean renderLabels, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererTileRendererLayer, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapReaderMapDataStore_withOrgMapsforgeMapModelMapViewPosition_withBoolean_withBoolean_withOrgMapsforgeCoreGraphicsGraphicFactory_, tileCache, mapDataStore, mapViewPosition, isTransparent, renderLabels, graphicFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererTileRendererLayer)
