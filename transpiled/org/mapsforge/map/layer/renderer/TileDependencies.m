//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/renderer/TileDependencies.java
//

#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/mapsforge/core/mapelements/MapElementContainer.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/renderer/TileDependencies.h"

@implementation OrgMapsforgeMapLayerRendererTileDependencies

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapLayerRendererTileDependencies_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addOverlappingElementWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)from
                             withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)to
        withOrgMapsforgeCoreMapelementsMapElementContainer:(OrgMapsforgeCoreMapelementsMapElementContainer *)element {
  if (![((id<JavaUtilMap>) nil_chk(overlapData_)) containsKeyWithId:from]) {
    [((id<JavaUtilMap>) nil_chk(overlapData_)) putWithId:from withId:create_JavaUtilHashMap_init()];
  }
  if (![((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) containsKeyWithId:to]) {
    [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) putWithId:to withId:create_JavaUtilHashSet_init()];
  }
  [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) getWithId:to])) addWithId:element];
}

- (id<JavaUtilSet>)getOverlappingElementsWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)from
                                         withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)to {
  if ([((id<JavaUtilMap>) nil_chk(overlapData_)) containsKeyWithId:from] && [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) containsKeyWithId:to]) {
    return [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) getWithId:to];
  }
  return create_JavaUtilHashSet_initWithInt_(0);
}

- (void)removeTileDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)from {
  [((id<JavaUtilMap>) nil_chk(overlapData_)) removeWithId:from];
}

- (void)removeTileDataWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)from
                      withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)to {
  if ([((id<JavaUtilMap>) nil_chk(overlapData_)) containsKeyWithId:from]) {
    [((id<JavaUtilMap>) nil_chk([((id<JavaUtilMap>) nil_chk(overlapData_)) getWithId:from])) removeWithId:to];
  }
}

- (void)dealloc {
  RELEASE_(overlapData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x0, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addOverlappingElementWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreMapelementsMapElementContainer:);
  methods[2].selector = @selector(getOverlappingElementsWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreModelTile:);
  methods[3].selector = @selector(removeTileDataWithOrgMapsforgeCoreModelTile:);
  methods[4].selector = @selector(removeTileDataWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreModelTile:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "overlapData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "addOverlappingElement", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreMapelementsMapElementContainer;", "getOverlappingElements", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreModelTile;", "(Lorg/mapsforge/core/model/Tile;Lorg/mapsforge/core/model/Tile;)Ljava/util/Set<Lorg/mapsforge/core/mapelements/MapElementContainer;>;", "removeTileData", "LOrgMapsforgeCoreModelTile;", "Ljava/util/Map<Lorg/mapsforge/core/model/Tile;Ljava/util/Map<Lorg/mapsforge/core/model/Tile;Ljava/util/Set<Lorg/mapsforge/core/mapelements/MapElementContainer;>;>;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerRendererTileDependencies = { "TileDependencies", "org.mapsforge.map.layer.renderer", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerRendererTileDependencies;
}

@end

void OrgMapsforgeMapLayerRendererTileDependencies_init(OrgMapsforgeMapLayerRendererTileDependencies *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->overlapData_, new_JavaUtilHashMap_init());
}

OrgMapsforgeMapLayerRendererTileDependencies *new_OrgMapsforgeMapLayerRendererTileDependencies_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerRendererTileDependencies, init)
}

OrgMapsforgeMapLayerRendererTileDependencies *create_OrgMapsforgeMapLayerRendererTileDependencies_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerRendererTileDependencies, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerRendererTileDependencies)
