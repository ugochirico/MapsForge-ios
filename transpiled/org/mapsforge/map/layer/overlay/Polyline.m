//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/overlay/Polyline.java
//

#include "J2ObjC_source.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Path.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/overlay/Polyline.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerOverlayPolyline () {
 @public
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  jboolean keepAligned_;
  id<JavaUtilList> latLongs_;
  id<OrgMapsforgeCoreGraphicsPaint> paintStroke_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayPolyline, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayPolyline, latLongs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayPolyline, paintStroke_, id<OrgMapsforgeCoreGraphicsPaint>)

@implementation OrgMapsforgeMapLayerOverlayPolyline

- (instancetype)initWithOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke
           withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, paintStroke, graphicFactory);
  return self;
}

- (instancetype)initWithOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke
           withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                          withBoolean:(jboolean)keepAligned {
  OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_(self, paintStroke, graphicFactory, keepAligned);
  return self;
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  @synchronized(self) {
    if ([((id<JavaUtilList>) nil_chk(self->latLongs_)) isEmpty] || self->paintStroke_ == nil) {
      return;
    }
    id<JavaUtilIterator> iterator = [self->latLongs_ iterator];
    if (![((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      return;
    }
    OrgMapsforgeCoreModelLatLong *latLong = [iterator next];
    jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel_)) getTileSize]);
    jfloat x = (jfloat) (OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, mapSize) - ((OrgMapsforgeCoreModelPoint *) nil_chk(topLeftPoint))->x_);
    jfloat y = (jfloat) (OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latLong->latitude_, mapSize) - topLeftPoint->y_);
    id<OrgMapsforgeCoreGraphicsPath> path = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createPath];
    [((id<OrgMapsforgeCoreGraphicsPath>) nil_chk(path)) moveToWithFloat:x withFloat:y];
    while ([iterator hasNext]) {
      latLong = [iterator next];
      x = (jfloat) (OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(latLong))->longitude_, mapSize) - topLeftPoint->x_);
      y = (jfloat) (OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latLong->latitude_, mapSize) - topLeftPoint->y_);
      [path lineToWithFloat:x withFloat:y];
    }
    if (self->keepAligned_) {
      [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(self->paintStroke_)) setBitmapShaderShiftWithOrgMapsforgeCoreModelPoint:topLeftPoint];
    }
    [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) drawPathWithOrgMapsforgeCoreGraphicsPath:path withOrgMapsforgeCoreGraphicsPaint:self->paintStroke_];
  }
}

- (id<JavaUtilList>)getLatLongs {
  return self->latLongs_;
}

- (id<OrgMapsforgeCoreGraphicsPaint>)getPaintStroke {
  @synchronized(self) {
    return self->paintStroke_;
  }
}

- (void)setPaintStrokeWithOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke {
  @synchronized(self) {
    JreStrongAssign(&self->paintStroke_, paintStroke);
  }
}

- (void)dealloc {
  RELEASE_(graphicFactory_);
  RELEASE_(latLongs_);
  RELEASE_(paintStroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[1].selector = @selector(initWithOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsGraphicFactory:withBoolean:);
  methods[2].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[3].selector = @selector(getLatLongs);
  methods[4].selector = @selector(getPaintStroke);
  methods[5].selector = @selector(setPaintStrokeWithOrgMapsforgeCoreGraphicsPaint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "keepAligned_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "latLongs_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "paintStroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsGraphicFactory;", "LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsGraphicFactory;Z", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "()Ljava/util/List<Lorg/mapsforge/core/model/LatLong;>;", "setPaintStroke", "LOrgMapsforgeCoreGraphicsPaint;", "Ljava/util/List<Lorg/mapsforge/core/model/LatLong;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerOverlayPolyline = { "Polyline", "org.mapsforge.map.layer.overlay", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerOverlayPolyline;
}

@end

void OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerOverlayPolyline *self, id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_(self, paintStroke, graphicFactory, false);
}

OrgMapsforgeMapLayerOverlayPolyline *new_OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayPolyline, initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_, paintStroke, graphicFactory)
}

OrgMapsforgeMapLayerOverlayPolyline *create_OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayPolyline, initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_, paintStroke, graphicFactory)
}

void OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_(OrgMapsforgeMapLayerOverlayPolyline *self, id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean keepAligned) {
  OrgMapsforgeMapLayerLayer_init(self);
  JreStrongAssignAndConsume(&self->latLongs_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  self->keepAligned_ = keepAligned;
  JreStrongAssign(&self->paintStroke_, paintStroke);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
}

OrgMapsforgeMapLayerOverlayPolyline *new_OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_(id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean keepAligned) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayPolyline, initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_, paintStroke, graphicFactory, keepAligned)
}

OrgMapsforgeMapLayerOverlayPolyline *create_OrgMapsforgeMapLayerOverlayPolyline_initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_(id<OrgMapsforgeCoreGraphicsPaint> paintStroke, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean keepAligned) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayPolyline, initWithOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_, paintStroke, graphicFactory, keepAligned)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerOverlayPolyline)
