//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/overlay/Grid.java
//

#include "J2ObjC_source.h"
#include "java/lang/Byte.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/Map.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/Color.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/graphics/Style.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/overlay/Grid.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerOverlayGrid () {
 @public
  id<OrgMapsforgeCoreGraphicsPaint> lineFront_;
  id<OrgMapsforgeCoreGraphicsPaint> lineBack_;
  id<JavaUtilMap> spacingConfig_;
}

+ (id<OrgMapsforgeCoreGraphicsPaint>)createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel;

+ (id<OrgMapsforgeCoreGraphicsPaint>)createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                         withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayGrid, lineFront_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayGrid, lineBack_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayGrid, spacingConfig_, id<JavaUtilMap>)

__attribute__((unused)) static id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapLayerOverlayGrid_createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

__attribute__((unused)) static id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapLayerOverlayGrid_createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel);

@implementation OrgMapsforgeMapLayerOverlayGrid

+ (id<OrgMapsforgeCoreGraphicsPaint>)createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  return OrgMapsforgeMapLayerOverlayGrid_createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel);
}

+ (id<OrgMapsforgeCoreGraphicsPaint>)createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                         withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  return OrgMapsforgeMapLayerOverlayGrid_createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel);
}

- (instancetype)initWithOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                          withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                               withJavaUtilMap:(id<JavaUtilMap>)spacingConfig {
  OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_(self, graphicFactory, displayModel, spacingConfig);
  return self;
}

- (instancetype)initWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                                         withJavaUtilMap:(id<JavaUtilMap>)spacingConfig
                       withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)lineBack
                       withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)lineFront {
  OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(self, displayModel, spacingConfig, lineBack, lineFront);
  return self;
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  if ([((id<JavaUtilMap>) nil_chk(spacingConfig_)) containsKeyWithId:JavaLangByte_valueOfWithByte_(zoomLevel)]) {
    jdouble spacing = [((JavaLangDouble *) nil_chk([spacingConfig_ getWithId:JavaLangByte_valueOfWithByte_(zoomLevel)])) doubleValue];
    jdouble minLongitude = spacing * (JavaLangMath_floorWithDouble_(((OrgMapsforgeCoreModelBoundingBox *) nil_chk(boundingBox))->minLongitude_ / spacing));
    jdouble maxLongitude = spacing * (JavaLangMath_ceilWithDouble_(boundingBox->maxLongitude_ / spacing));
    jdouble minLatitude = spacing * (JavaLangMath_floorWithDouble_(boundingBox->minLatitude_ / spacing));
    jdouble maxLatitude = spacing * (JavaLangMath_ceilWithDouble_(boundingBox->maxLatitude_ / spacing));
    jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize]);
    jint bottom = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(minLatitude, mapSize) - ((OrgMapsforgeCoreModelPoint *) nil_chk(topLeftPoint))->y_));
    jint top = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(maxLatitude, mapSize) - topLeftPoint->y_));
    jint left = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(minLongitude, mapSize) - topLeftPoint->x_));
    jint right = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(maxLongitude, mapSize) - topLeftPoint->x_));
    for (jdouble latitude = minLatitude; latitude <= maxLatitude; JrePlusAssignDoubleD(&latitude, spacing)) {
      jint pixelY = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latitude, mapSize) - topLeftPoint->y_));
      [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) drawLineWithInt:left withInt:pixelY withInt:right withInt:pixelY withOrgMapsforgeCoreGraphicsPaint:self->lineBack_];
    }
    for (jdouble longitude = minLongitude; longitude <= maxLongitude; JrePlusAssignDoubleD(&longitude, spacing)) {
      jint pixelX = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(longitude, mapSize) - topLeftPoint->x_));
      [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) drawLineWithInt:pixelX withInt:bottom withInt:pixelX withInt:top withOrgMapsforgeCoreGraphicsPaint:self->lineBack_];
    }
    for (jdouble latitude = minLatitude; latitude <= maxLatitude; JrePlusAssignDoubleD(&latitude, spacing)) {
      jint pixelY = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latitude, mapSize) - topLeftPoint->y_));
      [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) drawLineWithInt:left withInt:pixelY withInt:right withInt:pixelY withOrgMapsforgeCoreGraphicsPaint:self->lineFront_];
    }
    for (jdouble longitude = minLongitude; longitude <= maxLongitude; JrePlusAssignDoubleD(&longitude, spacing)) {
      jint pixelX = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(longitude, mapSize) - topLeftPoint->x_));
      [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) drawLineWithInt:pixelX withInt:bottom withInt:pixelX withInt:top withOrgMapsforgeCoreGraphicsPaint:self->lineFront_];
    }
  }
}

- (void)dealloc {
  RELEASE_(lineFront_);
  RELEASE_(lineBack_);
  RELEASE_(spacingConfig_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[1].selector = @selector(createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[2].selector = @selector(initWithOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:withJavaUtilMap:);
  methods[3].selector = @selector(initWithOrgMapsforgeMapModelDisplayModel:withJavaUtilMap:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:);
  methods[4].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "lineFront_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lineBack_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "spacingConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "createLineFront", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;", "createLineBack", "LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;LJavaUtilMap;", "(Lorg/mapsforge/core/graphics/GraphicFactory;Lorg/mapsforge/map/model/DisplayModel;Ljava/util/Map<Ljava/lang/Byte;Ljava/lang/Double;>;)V", "LOrgMapsforgeMapModelDisplayModel;LJavaUtilMap;LOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;", "(Lorg/mapsforge/map/model/DisplayModel;Ljava/util/Map<Ljava/lang/Byte;Ljava/lang/Double;>;Lorg/mapsforge/core/graphics/Paint;Lorg/mapsforge/core/graphics/Paint;)V", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "Ljava/util/Map<Ljava/lang/Byte;Ljava/lang/Double;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerOverlayGrid = { "Grid", "org.mapsforge.map.layer.overlay", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerOverlayGrid;
}

@end

id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapLayerOverlayGrid_createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  OrgMapsforgeMapLayerOverlayGrid_initialize();
  id<OrgMapsforgeCoreGraphicsPaint> paint = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(paint)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, BLACK)];
  [paint setStrokeWidthWithFloat:2 * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor]];
  [paint setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  return paint;
}

id<OrgMapsforgeCoreGraphicsPaint> OrgMapsforgeMapLayerOverlayGrid_createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  OrgMapsforgeMapLayerOverlayGrid_initialize();
  id<OrgMapsforgeCoreGraphicsPaint> paint = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createPaint];
  [((id<OrgMapsforgeCoreGraphicsPaint>) nil_chk(paint)) setColorWithOrgMapsforgeCoreGraphicsColor:JreLoadEnum(OrgMapsforgeCoreGraphicsColor, WHITE)];
  [paint setStrokeWidthWithFloat:4 * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel)) getScaleFactor]];
  [paint setStyleWithOrgMapsforgeCoreGraphicsStyle:JreLoadEnum(OrgMapsforgeCoreGraphicsStyle, STROKE)];
  return paint;
}

void OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_(OrgMapsforgeMapLayerOverlayGrid *self, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig) {
  OrgMapsforgeMapLayerLayer_init(self);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->lineFront_, OrgMapsforgeMapLayerOverlayGrid_createLineFrontWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel));
  JreStrongAssign(&self->lineBack_, OrgMapsforgeMapLayerOverlayGrid_createLineBackWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(graphicFactory, displayModel));
  JreStrongAssign(&self->spacingConfig_, spacingConfig);
}

OrgMapsforgeMapLayerOverlayGrid *new_OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayGrid, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_, graphicFactory, displayModel, spacingConfig)
}

OrgMapsforgeMapLayerOverlayGrid *create_OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_(id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayGrid, initWithOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_, graphicFactory, displayModel, spacingConfig)
}

void OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapLayerOverlayGrid *self, OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig, id<OrgMapsforgeCoreGraphicsPaint> lineBack, id<OrgMapsforgeCoreGraphicsPaint> lineFront) {
  OrgMapsforgeMapLayerLayer_init(self);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->lineFront_, lineFront);
  JreStrongAssign(&self->lineBack_, lineBack);
  JreStrongAssign(&self->spacingConfig_, spacingConfig);
}

OrgMapsforgeMapLayerOverlayGrid *new_OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig, id<OrgMapsforgeCoreGraphicsPaint> lineBack, id<OrgMapsforgeCoreGraphicsPaint> lineFront) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayGrid, initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, displayModel, spacingConfig, lineBack, lineFront)
}

OrgMapsforgeMapLayerOverlayGrid *create_OrgMapsforgeMapLayerOverlayGrid_initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapModelDisplayModel *displayModel, id<JavaUtilMap> spacingConfig, id<OrgMapsforgeCoreGraphicsPaint> lineBack, id<OrgMapsforgeCoreGraphicsPaint> lineFront) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayGrid, initWithOrgMapsforgeMapModelDisplayModel_withJavaUtilMap_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, displayModel, spacingConfig, lineBack, lineFront)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerOverlayGrid)
