//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/overlay/Circle.java
//

#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/Paint.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/overlay/Circle.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerOverlayCircle () {
 @public
  jboolean keepAligned_;
  OrgMapsforgeCoreModelLatLong *latLong_;
  id<OrgMapsforgeCoreGraphicsPaint> paintFill_;
  id<OrgMapsforgeCoreGraphicsPaint> paintStroke_;
  jfloat radius_;
}

- (void)setRadiusInternalWithFloat:(jfloat)radius;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayCircle, latLong_, OrgMapsforgeCoreModelLatLong *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayCircle, paintFill_, id<OrgMapsforgeCoreGraphicsPaint>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayCircle, paintStroke_, id<OrgMapsforgeCoreGraphicsPaint>)

__attribute__((unused)) static void OrgMapsforgeMapLayerOverlayCircle_setRadiusInternalWithFloat_(OrgMapsforgeMapLayerOverlayCircle *self, jfloat radius);

@implementation OrgMapsforgeMapLayerOverlayCircle

- (instancetype)initWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                           withFloat:(jfloat)radius
                   withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintFill
                   withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke {
  OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(self, latLong, radius, paintFill, paintStroke);
  return self;
}

- (instancetype)initWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                                           withFloat:(jfloat)radius
                   withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintFill
                   withOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke
                                         withBoolean:(jboolean)keepAligned {
  OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_(self, latLong, radius, paintFill, paintStroke, keepAligned);
  return self;
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  @synchronized(self) {
    if (self->latLong_ == nil || (self->paintStroke_ == nil && self->paintFill_ == nil)) {
      return;
    }
    jdouble latitude = self->latLong_->latitude_;
    jdouble longitude = self->latLong_->longitude_;
    jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel_)) getTileSize]);
    jint pixelX = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(longitude, mapSize) - ((OrgMapsforgeCoreModelPoint *) nil_chk(topLeftPoint))->x_));
    jint pixelY = JreFpToInt((OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(latitude, mapSize) - topLeftPoint->y_));
    jint radiusInPixel = [self getRadiusInPixelsWithDouble:latitude withByte:zoomLevel];
    OrgMapsforgeCoreModelRectangle *canvasRectangle = create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(0, 0, [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) getWidth], [canvas getHeight]);
    if (![canvasRectangle intersectsCircleWithDouble:pixelX withDouble:pixelY withDouble:radiusInPixel]) {
      return;
    }
    if (self->paintStroke_ != nil) {
      if (self->keepAligned_) {
        [self->paintStroke_ setBitmapShaderShiftWithOrgMapsforgeCoreModelPoint:topLeftPoint];
      }
      [canvas drawCircleWithInt:pixelX withInt:pixelY withInt:radiusInPixel withOrgMapsforgeCoreGraphicsPaint:self->paintStroke_];
    }
    if (self->paintFill_ != nil) {
      if (self->keepAligned_) {
        [self->paintFill_ setBitmapShaderShiftWithOrgMapsforgeCoreModelPoint:topLeftPoint];
      }
      [canvas drawCircleWithInt:pixelX withInt:pixelY withInt:radiusInPixel withOrgMapsforgeCoreGraphicsPaint:self->paintFill_];
    }
  }
}

- (id<OrgMapsforgeCoreGraphicsPaint>)getPaintFill {
  @synchronized(self) {
    return self->paintFill_;
  }
}

- (id<OrgMapsforgeCoreGraphicsPaint>)getPaintStroke {
  @synchronized(self) {
    return self->paintStroke_;
  }
}

- (OrgMapsforgeCoreModelLatLong *)getPosition {
  @synchronized(self) {
    return self->latLong_;
  }
}

- (jfloat)getRadius {
  @synchronized(self) {
    return self->radius_;
  }
}

- (void)setLatLongWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong {
  @synchronized(self) {
    JreStrongAssign(&self->latLong_, latLong);
  }
}

- (void)setPaintFillWithOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintFill {
  @synchronized(self) {
    JreStrongAssign(&self->paintFill_, paintFill);
  }
}

- (void)setPaintStrokeWithOrgMapsforgeCoreGraphicsPaint:(id<OrgMapsforgeCoreGraphicsPaint>)paintStroke {
  @synchronized(self) {
    JreStrongAssign(&self->paintStroke_, paintStroke);
  }
}

- (void)setRadiusWithFloat:(jfloat)radius {
  @synchronized(self) {
    OrgMapsforgeMapLayerOverlayCircle_setRadiusInternalWithFloat_(self, radius);
  }
}

- (jint)getRadiusInPixelsWithDouble:(jdouble)latitude
                           withByte:(jbyte)zoomLevel {
  return JreFpToInt(OrgMapsforgeCoreUtilMercatorProjection_metersToPixelsWithFloat_withDouble_withLong_(self->radius_, latitude, OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(displayModel_)) getTileSize])));
}

- (void)setRadiusInternalWithFloat:(jfloat)radius {
  OrgMapsforgeMapLayerOverlayCircle_setRadiusInternalWithFloat_(self, radius);
}

- (void)dealloc {
  RELEASE_(latLong_);
  RELEASE_(paintFill_);
  RELEASE_(paintStroke_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 2, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsPaint;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreModelLatLong:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:);
  methods[1].selector = @selector(initWithOrgMapsforgeCoreModelLatLong:withFloat:withOrgMapsforgeCoreGraphicsPaint:withOrgMapsforgeCoreGraphicsPaint:withBoolean:);
  methods[2].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[3].selector = @selector(getPaintFill);
  methods[4].selector = @selector(getPaintStroke);
  methods[5].selector = @selector(getPosition);
  methods[6].selector = @selector(getRadius);
  methods[7].selector = @selector(setLatLongWithOrgMapsforgeCoreModelLatLong:);
  methods[8].selector = @selector(setPaintFillWithOrgMapsforgeCoreGraphicsPaint:);
  methods[9].selector = @selector(setPaintStrokeWithOrgMapsforgeCoreGraphicsPaint:);
  methods[10].selector = @selector(setRadiusWithFloat:);
  methods[11].selector = @selector(getRadiusInPixelsWithDouble:withByte:);
  methods[12].selector = @selector(setRadiusInternalWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keepAligned_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "latLong_", "LOrgMapsforgeCoreModelLatLong;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paintFill_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paintStroke_", "LOrgMapsforgeCoreGraphicsPaint;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "radius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreModelLatLong;FLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;", "LOrgMapsforgeCoreModelLatLong;FLOrgMapsforgeCoreGraphicsPaint;LOrgMapsforgeCoreGraphicsPaint;Z", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "setLatLong", "LOrgMapsforgeCoreModelLatLong;", "setPaintFill", "LOrgMapsforgeCoreGraphicsPaint;", "setPaintStroke", "setRadius", "F", "getRadiusInPixels", "DB", "setRadiusInternal" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerOverlayCircle = { "Circle", "org.mapsforge.map.layer.overlay", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerOverlayCircle;
}

@end

void OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeMapLayerOverlayCircle *self, OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke) {
  OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_(self, latLong, radius, paintFill, paintStroke, false);
}

OrgMapsforgeMapLayerOverlayCircle *new_OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayCircle, initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, latLong, radius, paintFill, paintStroke)
}

OrgMapsforgeMapLayerOverlayCircle *create_OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_(OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayCircle, initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_, latLong, radius, paintFill, paintStroke)
}

void OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_(OrgMapsforgeMapLayerOverlayCircle *self, OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke, jboolean keepAligned) {
  OrgMapsforgeMapLayerLayer_init(self);
  self->keepAligned_ = keepAligned;
  JreStrongAssign(&self->latLong_, latLong);
  OrgMapsforgeMapLayerOverlayCircle_setRadiusInternalWithFloat_(self, radius);
  JreStrongAssign(&self->paintFill_, paintFill);
  JreStrongAssign(&self->paintStroke_, paintStroke);
}

OrgMapsforgeMapLayerOverlayCircle *new_OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_(OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke, jboolean keepAligned) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayCircle, initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_, latLong, radius, paintFill, paintStroke, keepAligned)
}

OrgMapsforgeMapLayerOverlayCircle *create_OrgMapsforgeMapLayerOverlayCircle_initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_(OrgMapsforgeCoreModelLatLong *latLong, jfloat radius, id<OrgMapsforgeCoreGraphicsPaint> paintFill, id<OrgMapsforgeCoreGraphicsPaint> paintStroke, jboolean keepAligned) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayCircle, initWithOrgMapsforgeCoreModelLatLong_withFloat_withOrgMapsforgeCoreGraphicsPaint_withOrgMapsforgeCoreGraphicsPaint_withBoolean_, latLong, radius, paintFill, paintStroke, keepAligned)
}

void OrgMapsforgeMapLayerOverlayCircle_setRadiusInternalWithFloat_(OrgMapsforgeMapLayerOverlayCircle *self, jfloat radius) {
  if (radius < 0 || JavaLangFloat_isNaNWithFloat_(radius)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F", @"invalid radius: ", radius));
  }
  self->radius_ = radius;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerOverlayCircle)
