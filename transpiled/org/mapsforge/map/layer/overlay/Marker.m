//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/overlay/Marker.java
//

#include "J2ObjC_source.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Rectangle.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/overlay/Marker.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerOverlayMarker () {
 @public
  id<OrgMapsforgeCoreGraphicsBitmap> bitmap_;
  jint horizontalOffset_;
  OrgMapsforgeCoreModelLatLong *latLong_;
  jint verticalOffset_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayMarker, bitmap_, id<OrgMapsforgeCoreGraphicsBitmap>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerOverlayMarker, latLong_, OrgMapsforgeCoreModelLatLong *)

@implementation OrgMapsforgeMapLayerOverlayMarker

- (instancetype)initWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong
                  withOrgMapsforgeCoreGraphicsBitmap:(id<OrgMapsforgeCoreGraphicsBitmap>)bitmap
                                             withInt:(jint)horizontalOffset
                                             withInt:(jint)verticalOffset {
  OrgMapsforgeMapLayerOverlayMarker_initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_(self, latLong, bitmap, horizontalOffset, verticalOffset);
  return self;
}

- (jboolean)containsWithOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)center
                    withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point {
  @synchronized(self) {
    OrgMapsforgeCoreModelRectangle *r = create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(((OrgMapsforgeCoreModelPoint *) nil_chk(center))->x_ - (jfloat) [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(bitmap_)) getWidth] / 2 + self->horizontalOffset_, center->y_ - (jfloat) [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(bitmap_)) getHeight] / 2 + self->verticalOffset_, center->x_ + (jfloat) [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(bitmap_)) getWidth] / 2 + self->horizontalOffset_, center->y_ + (jfloat) [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(bitmap_)) getHeight] / 2 + self->verticalOffset_);
    return [r containsWithOrgMapsforgeCoreModelPoint:point];
  }
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  @synchronized(self) {
    if (self->latLong_ == nil || self->bitmap_ == nil) {
      return;
    }
    jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(zoomLevel, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize]);
    jdouble pixelX = OrgMapsforgeCoreUtilMercatorProjection_longitudeToPixelXWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(self->latLong_))->longitude_, mapSize);
    jdouble pixelY = OrgMapsforgeCoreUtilMercatorProjection_latitudeToPixelYWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(self->latLong_))->latitude_, mapSize);
    jint halfBitmapWidth = [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getWidth] / 2;
    jint halfBitmapHeight = [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getHeight] / 2;
    jint left = JreFpToInt((pixelX - ((OrgMapsforgeCoreModelPoint *) nil_chk(topLeftPoint))->x_ - halfBitmapWidth + self->horizontalOffset_));
    jint top = JreFpToInt((pixelY - topLeftPoint->y_ - halfBitmapHeight + self->verticalOffset_));
    jint right = left + [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getWidth];
    jint bottom = top + [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->bitmap_)) getHeight];
    OrgMapsforgeCoreModelRectangle *bitmapRectangle = create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(left, top, right, bottom);
    OrgMapsforgeCoreModelRectangle *canvasRectangle = create_OrgMapsforgeCoreModelRectangle_initWithDouble_withDouble_withDouble_withDouble_(0, 0, [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) getWidth], [canvas getHeight]);
    if (![canvasRectangle intersectsWithOrgMapsforgeCoreModelRectangle:bitmapRectangle]) {
      return;
    }
    [canvas drawBitmapWithOrgMapsforgeCoreGraphicsBitmap:self->bitmap_ withInt:left withInt:top];
  }
}

- (id<OrgMapsforgeCoreGraphicsBitmap>)getBitmap {
  @synchronized(self) {
    return self->bitmap_;
  }
}

- (jint)getHorizontalOffset {
  @synchronized(self) {
    return self->horizontalOffset_;
  }
}

- (OrgMapsforgeCoreModelLatLong *)getLatLong {
  @synchronized(self) {
    return self->latLong_;
  }
}

- (OrgMapsforgeCoreModelLatLong *)getPosition {
  @synchronized(self) {
    return self->latLong_;
  }
}

- (jint)getVerticalOffset {
  @synchronized(self) {
    return self->verticalOffset_;
  }
}

- (void)onDestroy {
  @synchronized(self) {
    if (self->bitmap_ != nil) {
      [self->bitmap_ decrementRefCount];
    }
  }
}

- (void)setBitmapWithOrgMapsforgeCoreGraphicsBitmap:(id<OrgMapsforgeCoreGraphicsBitmap>)bitmap {
  @synchronized(self) {
    if (self->bitmap_ != nil && [self->bitmap_ isEqual:bitmap]) {
      return;
    }
    if (self->bitmap_ != nil) {
      [self->bitmap_ decrementRefCount];
    }
    JreStrongAssign(&self->bitmap_, bitmap);
  }
}

- (void)setHorizontalOffsetWithInt:(jint)horizontalOffset {
  @synchronized(self) {
    self->horizontalOffset_ = horizontalOffset;
  }
}

- (void)setLatLongWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)latLong {
  @synchronized(self) {
    JreStrongAssign(&self->latLong_, latLong);
  }
}

- (void)setVerticalOffsetWithInt:(jint)verticalOffset {
  @synchronized(self) {
    self->verticalOffset_ = verticalOffset;
  }
}

- (void)dealloc {
  RELEASE_(bitmap_);
  RELEASE_(latLong_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsBitmap;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 11, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreModelLatLong:withOrgMapsforgeCoreGraphicsBitmap:withInt:withInt:);
  methods[1].selector = @selector(containsWithOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreModelPoint:);
  methods[2].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[3].selector = @selector(getBitmap);
  methods[4].selector = @selector(getHorizontalOffset);
  methods[5].selector = @selector(getLatLong);
  methods[6].selector = @selector(getPosition);
  methods[7].selector = @selector(getVerticalOffset);
  methods[8].selector = @selector(onDestroy);
  methods[9].selector = @selector(setBitmapWithOrgMapsforgeCoreGraphicsBitmap:);
  methods[10].selector = @selector(setHorizontalOffsetWithInt:);
  methods[11].selector = @selector(setLatLongWithOrgMapsforgeCoreModelLatLong:);
  methods[12].selector = @selector(setVerticalOffsetWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bitmap_", "LOrgMapsforgeCoreGraphicsBitmap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "latLong_", "LOrgMapsforgeCoreModelLatLong;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreModelLatLong;LOrgMapsforgeCoreGraphicsBitmap;II", "contains", "LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreModelPoint;", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "setBitmap", "LOrgMapsforgeCoreGraphicsBitmap;", "setHorizontalOffset", "I", "setLatLong", "LOrgMapsforgeCoreModelLatLong;", "setVerticalOffset" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerOverlayMarker = { "Marker", "org.mapsforge.map.layer.overlay", ptrTable, methods, fields, 7, 0x1, 13, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerOverlayMarker;
}

@end

void OrgMapsforgeMapLayerOverlayMarker_initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_(OrgMapsforgeMapLayerOverlayMarker *self, OrgMapsforgeCoreModelLatLong *latLong, id<OrgMapsforgeCoreGraphicsBitmap> bitmap, jint horizontalOffset, jint verticalOffset) {
  OrgMapsforgeMapLayerLayer_init(self);
  JreStrongAssign(&self->latLong_, latLong);
  JreStrongAssign(&self->bitmap_, bitmap);
  self->horizontalOffset_ = horizontalOffset;
  self->verticalOffset_ = verticalOffset;
}

OrgMapsforgeMapLayerOverlayMarker *new_OrgMapsforgeMapLayerOverlayMarker_initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_(OrgMapsforgeCoreModelLatLong *latLong, id<OrgMapsforgeCoreGraphicsBitmap> bitmap, jint horizontalOffset, jint verticalOffset) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerOverlayMarker, initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_, latLong, bitmap, horizontalOffset, verticalOffset)
}

OrgMapsforgeMapLayerOverlayMarker *create_OrgMapsforgeMapLayerOverlayMarker_initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_(OrgMapsforgeCoreModelLatLong *latLong, id<OrgMapsforgeCoreGraphicsBitmap> bitmap, jint horizontalOffset, jint verticalOffset) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerOverlayMarker, initWithOrgMapsforgeCoreModelLatLong_withOrgMapsforgeCoreGraphicsBitmap_withInt_withInt_, latLong, bitmap, horizontalOffset, verticalOffset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerOverlayMarker)
