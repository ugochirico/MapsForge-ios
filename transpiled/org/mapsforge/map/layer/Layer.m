//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/Layer.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/Redrawer.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerLayer () {
 @public
  id<OrgMapsforgeMapLayerRedrawer> assignedRedrawer_;
  jboolean visible_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayer, assignedRedrawer_, id<OrgMapsforgeMapLayerRedrawer>)

@implementation OrgMapsforgeMapLayerLayer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapLayerLayer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgMapsforgeCoreModelLatLong *)getPosition {
  return nil;
}

- (jboolean)isVisible {
  return self->visible_;
}

- (void)onDestroy {
}

- (jboolean)onLongPressWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)tapLatLong
                         withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)layerXY
                         withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)tapXY {
  return false;
}

- (jboolean)onTapWithOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)tapLatLong
                   withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)layerXY
                   withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)tapXY {
  return false;
}

- (void)requestRedraw {
  @synchronized(self) {
    if (self->assignedRedrawer_ != nil) {
      [self->assignedRedrawer_ redrawLayers];
    }
  }
}

- (void)setDisplayModelWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  @synchronized(self) {
    JreStrongAssign(&self->displayModel_, displayModel);
  }
}

- (void)setVisibleWithBoolean:(jboolean)visible {
  self->visible_ = visible;
}

- (void)onAdd {
}

- (void)onRemove {
}

- (void)assignWithOrgMapsforgeMapLayerRedrawer:(id<OrgMapsforgeMapLayerRedrawer>)redrawer {
  @synchronized(self) {
    if (self->assignedRedrawer_ != nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"layer already assigned");
    }
    JreStrongAssign(&self->assignedRedrawer_, redrawer);
    [self onAdd];
  }
}

- (void)unassign {
  @synchronized(self) {
    if (self->assignedRedrawer_ == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"layer is not assigned");
    }
    JreStrongAssign(&self->assignedRedrawer_, nil);
    [self onRemove];
  }
}

- (void)dealloc {
  RELEASE_(displayModel_);
  RELEASE_(assignedRedrawer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelLatLong;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x30, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x30, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[2].selector = @selector(getPosition);
  methods[3].selector = @selector(isVisible);
  methods[4].selector = @selector(onDestroy);
  methods[5].selector = @selector(onLongPressWithOrgMapsforgeCoreModelLatLong:withOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreModelPoint:);
  methods[6].selector = @selector(onTapWithOrgMapsforgeCoreModelLatLong:withOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreModelPoint:);
  methods[7].selector = @selector(requestRedraw);
  methods[8].selector = @selector(setDisplayModelWithOrgMapsforgeMapModelDisplayModel:);
  methods[9].selector = @selector(setVisibleWithBoolean:);
  methods[10].selector = @selector(onAdd);
  methods[11].selector = @selector(onRemove);
  methods[12].selector = @selector(assignWithOrgMapsforgeMapLayerRedrawer:);
  methods[13].selector = @selector(unassign);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "assignedRedrawer_", "LOrgMapsforgeMapLayerRedrawer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "visible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "onLongPress", "LOrgMapsforgeCoreModelLatLong;LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreModelPoint;", "onTap", "setDisplayModel", "LOrgMapsforgeMapModelDisplayModel;", "setVisible", "Z", "assign", "LOrgMapsforgeMapLayerRedrawer;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerLayer = { "Layer", "org.mapsforge.map.layer", ptrTable, methods, fields, 7, 0x401, 14, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerLayer;
}

@end

void OrgMapsforgeMapLayerLayer_init(OrgMapsforgeMapLayerLayer *self) {
  NSObject_init(self);
  self->visible_ = true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerLayer)
