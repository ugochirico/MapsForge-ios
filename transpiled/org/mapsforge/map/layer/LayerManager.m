//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/LayerManager.java
//

#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Dimension.h"
#include "org/mapsforge/core/model/MapPosition.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/LayerManager.h"
#include "org/mapsforge/map/layer/Layers.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewPosition.h"
#include "org/mapsforge/map/model/Model.h"
#include "org/mapsforge/map/util/MapPositionUtil.h"
#include "org/mapsforge/map/util/PausableThread.h"
#include "org/mapsforge/map/view/FrameBuffer.h"
#include "org/mapsforge/map/view/MapView.h"

@interface OrgMapsforgeMapLayerLayerManager () {
 @public
  id<OrgMapsforgeCoreGraphicsCanvas> drawingCanvas_;
  OrgMapsforgeMapLayerLayers *layers_;
  id<OrgMapsforgeMapViewMapView> mapView_;
  OrgMapsforgeMapModelMapViewPosition *mapViewPosition_;
  jboolean redrawNeeded_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayerManager, drawingCanvas_, id<OrgMapsforgeCoreGraphicsCanvas>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayerManager, layers_, OrgMapsforgeMapLayerLayers *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayerManager, mapView_, id<OrgMapsforgeMapViewMapView>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayerManager, mapViewPosition_, OrgMapsforgeMapModelMapViewPosition *)

inline jint OrgMapsforgeMapLayerLayerManager_get_MILLISECONDS_PER_FRAME();
#define OrgMapsforgeMapLayerLayerManager_MILLISECONDS_PER_FRAME 30
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerLayerManager, MILLISECONDS_PER_FRAME, jint)

@implementation OrgMapsforgeMapLayerLayerManager

- (instancetype)initWithOrgMapsforgeMapViewMapView:(id<OrgMapsforgeMapViewMapView>)mapView
           withOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
        withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerLayerManager_initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, mapView, mapViewPosition, graphicFactory);
  return self;
}

- (OrgMapsforgeMapLayerLayers *)getLayers {
  return self->layers_;
}

- (void)redrawLayers {
  self->redrawNeeded_ = true;
  @synchronized(self) {
    [self java_notify];
  }
}

- (void)afterRun {
  for (OrgMapsforgeMapLayerLayer * __strong layer in nil_chk(self->layers_)) {
    [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) onDestroy];
  }
  [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(self->drawingCanvas_)) destroy];
}

- (void)doWork {
  jlong startTime = JavaLangSystem_nanoTime();
  self->redrawNeeded_ = false;
  OrgMapsforgeMapViewFrameBuffer *frameBuffer = [((id<OrgMapsforgeMapViewMapView>) nil_chk(self->mapView_)) getFrameBuffer];
  id<OrgMapsforgeCoreGraphicsBitmap> bitmap = [((OrgMapsforgeMapViewFrameBuffer *) nil_chk(frameBuffer)) getDrawingBitmap];
  if (bitmap != nil) {
    [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(self->drawingCanvas_)) setBitmapWithOrgMapsforgeCoreGraphicsBitmap:bitmap];
    OrgMapsforgeCoreModelMapPosition *mapPosition = [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(self->mapViewPosition_)) getMapPosition];
    OrgMapsforgeCoreModelDimension *canvasDimension = [self->drawingCanvas_ getDimension];
    jint tileSize = [((OrgMapsforgeMapModelDisplayModel *) nil_chk(((OrgMapsforgeMapModelModel *) nil_chk([self->mapView_ getModel]))->displayModel_)) getTileSize];
    OrgMapsforgeCoreModelBoundingBox *boundingBox = OrgMapsforgeMapUtilMapPositionUtil_getBoundingBoxWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withInt_(mapPosition, canvasDimension, tileSize);
    OrgMapsforgeCoreModelPoint *topLeftPoint = OrgMapsforgeMapUtilMapPositionUtil_getTopLeftPointWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withInt_(mapPosition, canvasDimension, tileSize);
    for (OrgMapsforgeMapLayerLayer * __strong layer in nil_chk(self->layers_)) {
      if ([((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) isVisible]) {
        [layer drawWithOrgMapsforgeCoreModelBoundingBox:boundingBox withByte:((OrgMapsforgeCoreModelMapPosition *) nil_chk(mapPosition))->zoomLevel_ withOrgMapsforgeCoreGraphicsCanvas:self->drawingCanvas_ withOrgMapsforgeCoreModelPoint:topLeftPoint];
      }
    }
    if (![mapViewPosition_ animationInProgress]) {
      [frameBuffer frameFinishedWithOrgMapsforgeCoreModelMapPosition:mapPosition];
      [self->mapView_ repaint];
    }
    else {
      self->redrawNeeded_ = true;
    }
  }
  jlong elapsedMilliseconds = (JavaLangSystem_nanoTime() - startTime) / 1000000;
  jlong timeSleep = OrgMapsforgeMapLayerLayerManager_MILLISECONDS_PER_FRAME - elapsedMilliseconds;
  if (timeSleep > 1 && ![self isInterrupted]) {
    JavaLangThread_sleepWithLong_(timeSleep);
  }
}

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority {
  return JreLoadEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, NORMAL);
}

- (jboolean)hasWork {
  return self->redrawNeeded_;
}

- (void)dealloc {
  RELEASE_(drawingCanvas_);
  RELEASE_(layers_);
  RELEASE_(mapView_);
  RELEASE_(mapViewPosition_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerLayers;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapViewMapView:withOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[1].selector = @selector(getLayers);
  methods[2].selector = @selector(redrawLayers);
  methods[3].selector = @selector(afterRun);
  methods[4].selector = @selector(doWork);
  methods[5].selector = @selector(getThreadPriority);
  methods[6].selector = @selector(hasWork);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MILLISECONDS_PER_FRAME", "I", .constantValue.asInt = OrgMapsforgeMapLayerLayerManager_MILLISECONDS_PER_FRAME, 0x1a, -1, -1, -1, -1 },
    { "drawingCanvas_", "LOrgMapsforgeCoreGraphicsCanvas;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "layers_", "LOrgMapsforgeMapLayerLayers;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapView_", "LOrgMapsforgeMapViewMapView;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mapViewPosition_", "LOrgMapsforgeMapModelMapViewPosition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "redrawNeeded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapViewMapView;LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeCoreGraphicsGraphicFactory;", "LJavaLangInterruptedException;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerLayerManager = { "LayerManager", "org.mapsforge.map.layer", ptrTable, methods, fields, 7, 0x1, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerLayerManager;
}

@end

void OrgMapsforgeMapLayerLayerManager_initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerLayerManager *self, id<OrgMapsforgeMapViewMapView> mapView, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  OrgMapsforgeMapUtilPausableThread_init(self);
  JreStrongAssign(&self->mapView_, mapView);
  JreStrongAssign(&self->mapViewPosition_, mapViewPosition);
  JreStrongAssign(&self->drawingCanvas_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createCanvas]);
  JreStrongAssignAndConsume(&self->layers_, new_OrgMapsforgeMapLayerLayers_initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_(self, ((OrgMapsforgeMapModelModel *) nil_chk([((id<OrgMapsforgeMapViewMapView>) nil_chk(mapView)) getModel]))->displayModel_));
}

OrgMapsforgeMapLayerLayerManager *new_OrgMapsforgeMapLayerLayerManager_initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapViewMapView> mapView, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerLayerManager, initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_, mapView, mapViewPosition, graphicFactory)
}

OrgMapsforgeMapLayerLayerManager *create_OrgMapsforgeMapLayerLayerManager_initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapViewMapView> mapView, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerLayerManager, initWithOrgMapsforgeMapViewMapView_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsGraphicFactory_, mapView, mapViewPosition, graphicFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerLayerManager)
