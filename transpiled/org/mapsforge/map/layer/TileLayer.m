//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/TileLayer.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/Matrix.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/TileLayer.h"
#include "org/mapsforge/map/layer/TilePosition.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/queue/Job.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewPosition.h"
#include "org/mapsforge/map/util/LayerUtil.h"

@interface OrgMapsforgeMapLayerTileLayer () {
 @public
  OrgMapsforgeMapModelMapViewPosition *mapViewPosition_;
  id<OrgMapsforgeCoreGraphicsMatrix> matrix_;
}

- (void)drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                                withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile;

- (OrgMapsforgeCoreModelTile *)getCachedParentTileWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                                                        withInt:(jint)level;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerTileLayer, mapViewPosition_, OrgMapsforgeMapModelMapViewPosition *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerTileLayer, matrix_, id<OrgMapsforgeCoreGraphicsMatrix>)

__attribute__((unused)) static void OrgMapsforgeMapLayerTileLayer_drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas_withOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerTileLayer *self, id<OrgMapsforgeCoreGraphicsCanvas> canvas, OrgMapsforgeCoreModelPoint *point, OrgMapsforgeCoreModelTile *tile);

__attribute__((unused)) static OrgMapsforgeCoreModelTile *OrgMapsforgeMapLayerTileLayer_getCachedParentTileWithOrgMapsforgeCoreModelTile_withInt_(OrgMapsforgeMapLayerTileLayer *self, OrgMapsforgeCoreModelTile *tile, jint level);

@implementation OrgMapsforgeMapLayerTileLayer

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                   withOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
                        withOrgMapsforgeCoreGraphicsMatrix:(id<OrgMapsforgeCoreGraphicsMatrix>)matrix
                                               withBoolean:(jboolean)isTransparent {
  OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_(self, tileCache, mapViewPosition, matrix, isTransparent);
  return self;
}

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                   withOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
                        withOrgMapsforgeCoreGraphicsMatrix:(id<OrgMapsforgeCoreGraphicsMatrix>)matrix
                                               withBoolean:(jboolean)isTransparent
                                               withBoolean:(jboolean)hasJobQueue {
  OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_withBoolean_(self, tileCache, mapViewPosition, matrix, isTransparent, hasJobQueue);
  return self;
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  id<JavaUtilList> tilePositions = OrgMapsforgeMapUtilLayerUtil_getTilePositionsWithOrgMapsforgeCoreModelBoundingBox_withByte_withOrgMapsforgeCoreModelPoint_withInt_(boundingBox, zoomLevel, topLeftPoint, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize]);
  [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) resetClip];
  if (!isTransparent_) {
    [canvas fillColorWithInt:[((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getBackgroundColor]];
  }
  id<JavaUtilSet> jobs = create_JavaUtilHashSet_init();
  for (OrgMapsforgeMapLayerTilePosition * __strong tilePosition in nil_chk(tilePositions)) {
    [jobs addWithId:[self createJobWithOrgMapsforgeCoreModelTile:((OrgMapsforgeMapLayerTilePosition *) nil_chk(tilePosition))->tile_]];
  }
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) setWorkingSetWithJavaUtilSet:jobs];
  jboolean waitingForCachedTiles = false;
  for (jint i = [tilePositions size] - 1; i >= 0; --i) {
    OrgMapsforgeMapLayerTilePosition *tilePosition = [tilePositions getWithInt:i];
    OrgMapsforgeCoreModelPoint *point = ((OrgMapsforgeMapLayerTilePosition *) nil_chk(tilePosition))->point_;
    OrgMapsforgeCoreModelTile *tile = tilePosition->tile_;
    OrgMapsforgeMapLayerQueueJob *job = [self createJobWithOrgMapsforgeCoreModelTile:tile];
    id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap = [self->tileCache_ getImmediatelyWithOrgMapsforgeMapLayerQueueJob:job];
    if (bitmap == nil) {
      if (self->hasJobQueue_ && ![self->tileCache_ containsKeyWithOrgMapsforgeMapLayerQueueJob:job]) {
        [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) addWithOrgMapsforgeMapLayerQueueJob:job];
      }
      else {
        waitingForCachedTiles = true;
      }
      OrgMapsforgeMapLayerTileLayer_drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas_withOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreModelTile_(self, canvas, point, tile);
    }
    else {
      if ([self isTileStaleWithOrgMapsforgeCoreModelTile:tile withOrgMapsforgeCoreGraphicsTileBitmap:bitmap] && self->hasJobQueue_ && ![self->tileCache_ containsKeyWithOrgMapsforgeMapLayerQueueJob:job]) {
        [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) addWithOrgMapsforgeMapLayerQueueJob:job];
      }
      [self retrieveLabelsOnlyWithOrgMapsforgeMapLayerQueueJob:job];
      [canvas drawBitmapWithOrgMapsforgeCoreGraphicsBitmap:bitmap withInt:(jint) JavaLangMath_roundWithDouble_(((OrgMapsforgeCoreModelPoint *) nil_chk(point))->x_) withInt:(jint) JavaLangMath_roundWithDouble_(point->y_)];
      [bitmap decrementRefCount];
    }
  }
  if (self->hasJobQueue_) {
    [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) notifyWorkers];
  }
  if (waitingForCachedTiles) {
    [self requestRedraw];
  }
}

- (void)setDisplayModelWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  @synchronized(self) {
    [super setDisplayModelWithOrgMapsforgeMapModelDisplayModel:displayModel];
    if (displayModel != nil && self->hasJobQueue_) {
      JreStrongAssignAndConsume(&self->jobQueue_, new_OrgMapsforgeMapLayerQueueJobQueue_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelDisplayModel_(self->mapViewPosition_, self->displayModel_));
    }
    else {
      JreStrongAssign(&self->jobQueue_, nil);
    }
  }
}

- (OrgMapsforgeMapLayerQueueJob *)createJobWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isTileStaleWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
              withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)retrieveLabelsOnlyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)job {
}

- (void)drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                                withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)point
                                 withOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  OrgMapsforgeMapLayerTileLayer_drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas_withOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreModelTile_(self, canvas, point, tile);
}

- (OrgMapsforgeCoreModelTile *)getCachedParentTileWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
                                                                        withInt:(jint)level {
  return OrgMapsforgeMapLayerTileLayer_getCachedParentTileWithOrgMapsforgeCoreModelTile_withInt_(self, tile, level);
}

- (void)dealloc {
  RELEASE_(jobQueue_);
  RELEASE_(tileCache_);
  RELEASE_(mapViewPosition_);
  RELEASE_(matrix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 4, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerQueueJob;", 0x404, 6, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x404, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 11, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelTile;", 0x2, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeCoreGraphicsMatrix:withBoolean:);
  methods[1].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeCoreGraphicsMatrix:withBoolean:withBoolean:);
  methods[2].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[3].selector = @selector(setDisplayModelWithOrgMapsforgeMapModelDisplayModel:);
  methods[4].selector = @selector(createJobWithOrgMapsforgeCoreModelTile:);
  methods[5].selector = @selector(isTileStaleWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[6].selector = @selector(retrieveLabelsOnlyWithOrgMapsforgeMapLayerQueueJob:);
  methods[7].selector = @selector(drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:withOrgMapsforgeCoreModelTile:);
  methods[8].selector = @selector(getCachedParentTileWithOrgMapsforgeCoreModelTile:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "hasJobQueue_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "isTransparent_", "Z", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "jobQueue_", "LOrgMapsforgeMapLayerQueueJobQueue;", .constantValue.asLong = 0, 0x4, -1, -1, 18, -1 },
    { "tileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "mapViewPosition_", "LOrgMapsforgeMapModelMapViewPosition;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "matrix_", "LOrgMapsforgeCoreGraphicsMatrix;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeCoreGraphicsMatrix;Z", "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeCoreGraphicsMatrix;ZZ", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "setDisplayModel", "LOrgMapsforgeMapModelDisplayModel;", "createJob", "LOrgMapsforgeCoreModelTile;", "(Lorg/mapsforge/core/model/Tile;)TT;", "isTileStale", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreGraphicsTileBitmap;", "retrieveLabelsOnly", "LOrgMapsforgeMapLayerQueueJob;", "(TT;)V", "drawParentTileBitmap", "LOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;LOrgMapsforgeCoreModelTile;", "getCachedParentTile", "LOrgMapsforgeCoreModelTile;I", "Lorg/mapsforge/map/layer/queue/JobQueue<TT;>;", "<T:Lorg/mapsforge/map/layer/queue/Job;>Lorg/mapsforge/map/layer/Layer;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerTileLayer = { "TileLayer", "org.mapsforge.map.layer", ptrTable, methods, fields, 7, 0x401, 9, 6, -1, -1, -1, 19, -1 };
  return &_OrgMapsforgeMapLayerTileLayer;
}

@end

void OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_(OrgMapsforgeMapLayerTileLayer *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeCoreGraphicsMatrix> matrix, jboolean isTransparent) {
  OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_withBoolean_(self, tileCache, mapViewPosition, matrix, isTransparent, true);
}

void OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_withBoolean_(OrgMapsforgeMapLayerTileLayer *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeCoreGraphicsMatrix> matrix, jboolean isTransparent, jboolean hasJobQueue) {
  OrgMapsforgeMapLayerLayer_init(self);
  if (tileCache == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"tileCache must not be null");
  }
  else if (mapViewPosition == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"mapViewPosition must not be null");
  }
  self->hasJobQueue_ = hasJobQueue;
  JreStrongAssign(&self->tileCache_, tileCache);
  JreStrongAssign(&self->mapViewPosition_, mapViewPosition);
  JreStrongAssign(&self->matrix_, matrix);
  self->isTransparent_ = isTransparent;
}

void OrgMapsforgeMapLayerTileLayer_drawParentTileBitmapWithOrgMapsforgeCoreGraphicsCanvas_withOrgMapsforgeCoreModelPoint_withOrgMapsforgeCoreModelTile_(OrgMapsforgeMapLayerTileLayer *self, id<OrgMapsforgeCoreGraphicsCanvas> canvas, OrgMapsforgeCoreModelPoint *point, OrgMapsforgeCoreModelTile *tile) {
  OrgMapsforgeCoreModelTile *cachedParentTile = OrgMapsforgeMapLayerTileLayer_getCachedParentTileWithOrgMapsforgeCoreModelTile_withInt_(self, tile, 4);
  if (cachedParentTile != nil) {
    id<OrgMapsforgeCoreGraphicsBitmap> bitmap = [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) getImmediatelyWithOrgMapsforgeMapLayerQueueJob:[self createJobWithOrgMapsforgeCoreModelTile:cachedParentTile]];
    if (bitmap != nil) {
      jint tileSize = [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize];
      jlong translateX = [((OrgMapsforgeCoreModelTile *) nil_chk(tile)) getShiftXWithOrgMapsforgeCoreModelTile:cachedParentTile] * tileSize;
      jlong translateY = [tile getShiftYWithOrgMapsforgeCoreModelTile:cachedParentTile] * tileSize;
      jbyte zoomLevelDiff = (jbyte) (tile->zoomLevel_ - cachedParentTile->zoomLevel_);
      jfloat scaleFactor = (jfloat) JavaLangMath_powWithDouble_withDouble_(2, zoomLevelDiff);
      jint x = (jint) JavaLangMath_roundWithDouble_(((OrgMapsforgeCoreModelPoint *) nil_chk(point))->x_);
      jint y = (jint) JavaLangMath_roundWithDouble_(point->y_);
      [((id<OrgMapsforgeCoreGraphicsMatrix>) nil_chk(self->matrix_)) reset];
      [self->matrix_ translateWithFloat:x - translateX withFloat:y - translateY];
      [self->matrix_ scale__WithFloat:scaleFactor withFloat:scaleFactor];
      [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(canvas)) setClipWithInt:x withInt:y withInt:[((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize] withInt:[((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize]];
      [canvas drawBitmapWithOrgMapsforgeCoreGraphicsBitmap:bitmap withOrgMapsforgeCoreGraphicsMatrix:self->matrix_];
      [canvas resetClip];
      [bitmap decrementRefCount];
    }
  }
}

OrgMapsforgeCoreModelTile *OrgMapsforgeMapLayerTileLayer_getCachedParentTileWithOrgMapsforgeCoreModelTile_withInt_(OrgMapsforgeMapLayerTileLayer *self, OrgMapsforgeCoreModelTile *tile, jint level) {
  if (level == 0) {
    return nil;
  }
  OrgMapsforgeCoreModelTile *parentTile = [((OrgMapsforgeCoreModelTile *) nil_chk(tile)) getParent];
  if (parentTile == nil) {
    return nil;
  }
  else if ([((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:[self createJobWithOrgMapsforgeCoreModelTile:parentTile]]) {
    return parentTile;
  }
  return OrgMapsforgeMapLayerTileLayer_getCachedParentTileWithOrgMapsforgeCoreModelTile_withInt_(self, parentTile, level - 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerTileLayer)
