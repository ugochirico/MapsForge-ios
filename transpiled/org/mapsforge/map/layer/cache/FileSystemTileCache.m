//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/FileSystemTileCache.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/OutputStream.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Thread.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/atomic/AtomicInteger.h"
#include "java/util/concurrent/locks/ReentrantReadWriteLock.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/graphics/CorruptedInputStreamException.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/IOUtils.h"
#include "org/mapsforge/map/layer/cache/FileSystemTileCache.h"
#include "org/mapsforge/map/layer/cache/FileWorkingSetCache.h"
#include "org/mapsforge/map/layer/queue/Job.h"
#include "org/mapsforge/map/util/PausableThread.h"

@interface OrgMapsforgeMapLayerCacheFileSystemTileCache () {
 @public
  JavaIoFile *cacheDirectory_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  JavaUtilConcurrentAtomicAtomicInteger *jobs_;
  OrgMapsforgeMapLayerCacheFileWorkingSetCache *lruCache_;
  JavaUtilConcurrentLocksReentrantReadWriteLock *lock_;
  jboolean persistent_;
  jboolean threaded_;
  JavaUtilConcurrentLinkedBlockingQueue *storageJobs_;
}

+ (jboolean)isValidCacheDirectoryWithJavaIoFile:(JavaIoFile *)file;

+ (jboolean)isValidFileWithJavaIoFile:(JavaIoFile *)file;

+ (jboolean)deleteDirectoryWithJavaIoFile:(JavaIoFile *)dir;

- (JavaIoFile *)getOutputFileWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)job;

- (void)removeWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key;

- (void)storeDataWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
           withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, cacheDirectory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, jobs_, JavaUtilConcurrentAtomicAtomicInteger *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, lruCache_, OrgMapsforgeMapLayerCacheFileWorkingSetCache *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, lock_, JavaUtilConcurrentLocksReentrantReadWriteLock *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheFileSystemTileCache, storageJobs_, JavaUtilConcurrentLinkedBlockingQueue *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheFileSystemTileCache_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerCacheFileSystemTileCache, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidCacheDirectoryWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidFileWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_deleteDirectoryWithJavaIoFile_(JavaIoFile *dir);

__attribute__((unused)) static JavaIoFile *OrgMapsforgeMapLayerCacheFileSystemTileCache_getOutputFileWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *job);

__attribute__((unused)) static void OrgMapsforgeMapLayerCacheFileSystemTileCache_removeWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *key);

__attribute__((unused)) static void OrgMapsforgeMapLayerCacheFileSystemTileCache_storeDataWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *key, id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap);

@interface OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader () {
 @public
  OrgMapsforgeMapLayerCacheFileSystemTileCache *this$0_;
}

@end

@implementation OrgMapsforgeMapLayerCacheStorageJob

- (instancetype)initWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
              withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  OrgMapsforgeMapLayerCacheStorageJob_initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(self, key, bitmap);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeMapLayerCacheStorageJob class]])) {
    return false;
  }
  OrgMapsforgeMapLayerCacheStorageJob *other = (OrgMapsforgeMapLayerCacheStorageJob *) cast_chk(obj, [OrgMapsforgeMapLayerCacheStorageJob class]);
  return [((OrgMapsforgeMapLayerQueueJob *) nil_chk(key_)) isEqual:((OrgMapsforgeMapLayerCacheStorageJob *) nil_chk(other))->key_];
}

- (NSUInteger)hash {
  return ((jint) [((OrgMapsforgeMapLayerQueueJob *) nil_chk(self->key_)) hash]);
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(bitmap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerQueueJob:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LOrgMapsforgeMapLayerQueueJob;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bitmap_", "LOrgMapsforgeCoreGraphicsTileBitmap;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerQueueJob;LOrgMapsforgeCoreGraphicsTileBitmap;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheStorageJob = { "StorageJob", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x0, 3, 2, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheStorageJob;
}

@end

void OrgMapsforgeMapLayerCacheStorageJob_initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(OrgMapsforgeMapLayerCacheStorageJob *self, OrgMapsforgeMapLayerQueueJob *key, id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap) {
  NSObject_init(self);
  JreStrongAssign(&self->key_, key);
  JreStrongAssign(&self->bitmap_, bitmap);
}

OrgMapsforgeMapLayerCacheStorageJob *new_OrgMapsforgeMapLayerCacheStorageJob_initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(OrgMapsforgeMapLayerQueueJob *key, id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheStorageJob, initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_, key, bitmap)
}

OrgMapsforgeMapLayerCacheStorageJob *create_OrgMapsforgeMapLayerCacheStorageJob_initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(OrgMapsforgeMapLayerQueueJob *key, id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheStorageJob, initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_, key, bitmap)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheStorageJob)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerCacheFileSystemTileCache)

NSString *OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION = @".tile";

@implementation OrgMapsforgeMapLayerCacheFileSystemTileCache

+ (jboolean)isValidCacheDirectoryWithJavaIoFile:(JavaIoFile *)file {
  return OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidCacheDirectoryWithJavaIoFile_(file);
}

+ (jboolean)isValidFileWithJavaIoFile:(JavaIoFile *)file {
  return OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidFileWithJavaIoFile_(file);
}

+ (jboolean)deleteDirectoryWithJavaIoFile:(JavaIoFile *)dir {
  return OrgMapsforgeMapLayerCacheFileSystemTileCache_deleteDirectoryWithJavaIoFile_(dir);
}

- (instancetype)initWithInt:(jint)capacity
             withJavaIoFile:(JavaIoFile *)cacheDirectory
withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, capacity, cacheDirectory, graphicFactory);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
             withJavaIoFile:(JavaIoFile *)cacheDirectory
withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                withBoolean:(jboolean)threaded
                    withInt:(jint)queueSize {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_(self, capacity, cacheDirectory, graphicFactory, threaded, queueSize);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
             withJavaIoFile:(JavaIoFile *)cacheDirectory
withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                withBoolean:(jboolean)threaded
                    withInt:(jint)queueSize
                withBoolean:(jboolean)persistent {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(self, capacity, cacheDirectory, graphicFactory, threaded, queueSize, persistent);
  return self;
}

- (jboolean)containsKeyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(lock_)) readLock])) lock];
    return ([((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) containsKeyWithId:[((OrgMapsforgeMapLayerQueueJob *) nil_chk(key)) getKey]] || (threaded_ && [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(storageJobs_)) containsWithId:key]));
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([lock_ readLock])) unlock];
  }
}

- (void)destroy {
  if (!self->persistent_) [self purge];
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  JavaIoFile *file;
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(lock_)) readLock])) lock];
    file = [((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) getWithId:[((OrgMapsforgeMapLayerQueueJob *) nil_chk(key)) getKey]];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([lock_ readLock])) unlock];
  }
  if (file == nil) {
    return nil;
  }
  JavaIoInputStream *inputStream = nil;
  @try {
    inputStream = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
    id<OrgMapsforgeCoreGraphicsTileBitmap> result = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createTileBitmapWithJavaIoInputStream:inputStream withInt:((OrgMapsforgeCoreModelTile *) nil_chk(((OrgMapsforgeMapLayerQueueJob *) nil_chk(key))->tile_))->tileSize_ withBoolean:key->hasAlpha_];
    [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(result)) setTimestampWithLong:[file lastModified]];
    return result;
  }
  @catch (OrgMapsforgeCoreGraphicsCorruptedInputStreamException *e) {
    OrgMapsforgeMapLayerCacheFileSystemTileCache_removeWithOrgMapsforgeMapLayerQueueJob_(self, key);
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, WARNING) withNSString:JreStrcat("$$CJ", @"input stream from file system cache invalid ", [((OrgMapsforgeMapLayerQueueJob *) nil_chk(key)) getKey], ' ', [file length]) withNSException:e];
    return nil;
  }
  @catch (JavaIoIOException *e) {
    OrgMapsforgeMapLayerCacheFileSystemTileCache_removeWithOrgMapsforgeMapLayerQueueJob_(self, key);
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:nil withNSException:e];
    return nil;
  }
  @finally {
    OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(inputStream);
  }
}

- (jint)getCapacity {
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(lock_)) readLock])) lock];
    return ((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_))->capacity_;
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_ReadLock *) nil_chk([lock_ readLock])) unlock];
  }
}

- (jint)getCapacityFirstLevel {
  return [self getCapacity];
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getImmediatelyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  return [self getWithOrgMapsforgeMapLayerQueueJob:key];
}

- (jboolean)isPersistent {
  return self->persistent_;
}

- (void)purge {
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->lock_)) writeLock])) lock];
    [((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) clear];
    if (self->threaded_) {
      [self interrupt];
    }
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([self->lock_ writeLock])) unlock];
  }
  OrgMapsforgeMapLayerCacheFileSystemTileCache_deleteDirectoryWithJavaIoFile_(self->cacheDirectory_);
}

- (jint)getQueueLength {
  return [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(jobs_)) get];
}

- (void)putWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
     withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  if (key == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"key must not be null");
  }
  else if (bitmap == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"bitmap must not be null");
  }
  if ([self getCapacity] == 0) {
    return;
  }
  [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(jobs_)) incrementAndGet];
  if (self->threaded_) {
    [bitmap incrementRefCount];
    [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(storageJobs_)) offerWithId:create_OrgMapsforgeMapLayerCacheStorageJob_initWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(key, bitmap)];
  }
  else {
    OrgMapsforgeMapLayerCacheFileSystemTileCache_storeDataWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(self, key, bitmap);
  }
}

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)workingSet {
  id<JavaUtilSet> workingSetInteger = create_JavaUtilHashSet_init();
  for (OrgMapsforgeMapLayerQueueJob * __strong job in nil_chk(workingSet)) {
    [workingSetInteger addWithId:[((OrgMapsforgeMapLayerQueueJob *) nil_chk(job)) getKey]];
  }
  [((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) setWorkingSetWithJavaUtilSet:workingSetInteger];
}

- (JavaIoFile *)getOutputFileWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)job {
  return OrgMapsforgeMapLayerCacheFileSystemTileCache_getOutputFileWithOrgMapsforgeMapLayerQueueJob_(self, job);
}

- (void)removeWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_removeWithOrgMapsforgeMapLayerQueueJob_(self, key);
}

- (void)doWork {
  OrgMapsforgeMapLayerCacheStorageJob *x = [((JavaUtilConcurrentLinkedBlockingQueue *) nil_chk(storageJobs_)) take];
  OrgMapsforgeMapLayerCacheFileSystemTileCache_storeDataWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(self, ((OrgMapsforgeMapLayerCacheStorageJob *) nil_chk(x))->key_, x->bitmap_);
}

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority {
  return JreLoadEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL);
}

- (jboolean)hasWork {
  return true;
}

- (void)storeDataWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
           withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_storeDataWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(self, key, bitmap);
}

- (void)dealloc {
  RELEASE_(cacheDirectory_);
  RELEASE_(graphicFactory_);
  RELEASE_(jobs_);
  RELEASE_(lruCache_);
  RELEASE_(lock_);
  RELEASE_(storageJobs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, 15, -1, -1 },
    { NULL, "LJavaIoFile;", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 18, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(isValidCacheDirectoryWithJavaIoFile:);
  methods[1].selector = @selector(isValidFileWithJavaIoFile:);
  methods[2].selector = @selector(deleteDirectoryWithJavaIoFile:);
  methods[3].selector = @selector(initWithInt:withJavaIoFile:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[4].selector = @selector(initWithInt:withJavaIoFile:withOrgMapsforgeCoreGraphicsGraphicFactory:withBoolean:withInt:);
  methods[5].selector = @selector(initWithInt:withJavaIoFile:withOrgMapsforgeCoreGraphicsGraphicFactory:withBoolean:withInt:withBoolean:);
  methods[6].selector = @selector(containsKeyWithOrgMapsforgeMapLayerQueueJob:);
  methods[7].selector = @selector(destroy);
  methods[8].selector = @selector(getWithOrgMapsforgeMapLayerQueueJob:);
  methods[9].selector = @selector(getCapacity);
  methods[10].selector = @selector(getCapacityFirstLevel);
  methods[11].selector = @selector(getImmediatelyWithOrgMapsforgeMapLayerQueueJob:);
  methods[12].selector = @selector(isPersistent);
  methods[13].selector = @selector(purge);
  methods[14].selector = @selector(getQueueLength);
  methods[15].selector = @selector(putWithOrgMapsforgeMapLayerQueueJob:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[16].selector = @selector(setWorkingSetWithJavaUtilSet:);
  methods[17].selector = @selector(getOutputFileWithOrgMapsforgeMapLayerQueueJob:);
  methods[18].selector = @selector(removeWithOrgMapsforgeMapLayerQueueJob:);
  methods[19].selector = @selector(doWork);
  methods[20].selector = @selector(getThreadPriority);
  methods[21].selector = @selector(hasWork);
  methods[22].selector = @selector(storeDataWithOrgMapsforgeMapLayerQueueJob:withOrgMapsforgeCoreGraphicsTileBitmap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FILE_EXTENSION", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 20, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 21, -1, -1 },
    { "cacheDirectory_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jobs_", "LJavaUtilConcurrentAtomicAtomicInteger;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lruCache_", "LOrgMapsforgeMapLayerCacheFileWorkingSetCache;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "lock_", "LJavaUtilConcurrentLocksReentrantReadWriteLock;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "persistent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "threaded_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "storageJobs_", "LJavaUtilConcurrentLinkedBlockingQueue;", .constantValue.asLong = 0, 0x12, -1, -1, 23, -1 },
  };
  static const void *ptrTable[] = { "isValidCacheDirectory", "LJavaIoFile;", "isValidFile", "deleteDirectory", "ILJavaIoFile;LOrgMapsforgeCoreGraphicsGraphicFactory;", "ILJavaIoFile;LOrgMapsforgeCoreGraphicsGraphicFactory;ZI", "ILJavaIoFile;LOrgMapsforgeCoreGraphicsGraphicFactory;ZIZ", "containsKey", "LOrgMapsforgeMapLayerQueueJob;", "get", "getImmediately", "put", "LOrgMapsforgeMapLayerQueueJob;LOrgMapsforgeCoreGraphicsTileBitmap;", "setWorkingSet", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/mapsforge/map/layer/queue/Job;>;)V", "getOutputFile", "remove", "LJavaLangInterruptedException;", "storeData", &OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION, &OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER, "Lorg/mapsforge/map/layer/cache/FileWorkingSetCache<Ljava/lang/String;>;", "Ljava/util/concurrent/LinkedBlockingQueue<Lorg/mapsforge/map/layer/cache/StorageJob;>;", "LOrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheFileSystemTileCache = { "FileSystemTileCache", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x1, 23, 10, -1, 24, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheFileSystemTileCache;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerCacheFileSystemTileCache class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerCacheFileSystemTileCache_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerCacheFileSystemTileCache)
  }
}

@end

jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidCacheDirectoryWithJavaIoFile_(JavaIoFile *file) {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initialize();
  if ((file == nil) || (![((JavaIoFile *) nil_chk(file)) exists] && ![file mkdirs]) || ![file isDirectory] || ![file canRead] || ![file canWrite]) {
    return false;
  }
  return true;
}

jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidFileWithJavaIoFile_(JavaIoFile *file) {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initialize();
  return file != nil && [file isFile] && [file canRead];
}

jboolean OrgMapsforgeMapLayerCacheFileSystemTileCache_deleteDirectoryWithJavaIoFile_(JavaIoFile *dir) {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initialize();
  if (dir == nil) {
    return false;
  }
  if ([dir isDirectory]) {
    IOSObjectArray *children = [dir list];
    if (children != nil) {
      for (jint i = 0; i < children->size_; i++) {
        jboolean success = OrgMapsforgeMapLayerCacheFileSystemTileCache_deleteDirectoryWithJavaIoFile_(create_JavaIoFile_initWithJavaIoFile_withNSString_(dir, IOSObjectArray_Get(children, i)));
        if (!success) {
          return false;
        }
      }
    }
  }
  return [dir delete__];
}

void OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(self, capacity, cacheDirectory, graphicFactory, false, 0, false);
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *new_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_, capacity, cacheDirectory, graphicFactory)
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *create_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_, capacity, cacheDirectory, graphicFactory)
}

void OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize) {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(self, capacity, cacheDirectory, graphicFactory, threaded, queueSize, false);
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *new_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_, capacity, cacheDirectory, graphicFactory, threaded, queueSize)
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *create_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_, capacity, cacheDirectory, graphicFactory, threaded, queueSize)
}

void OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize, jboolean persistent) {
  OrgMapsforgeMapUtilPausableThread_init(self);
  JreStrongAssignAndConsume(&self->jobs_, new_JavaUtilConcurrentAtomicAtomicInteger_initWithInt_(0));
  self->persistent_ = persistent;
  self->threaded_ = threaded;
  if (threaded) {
    JreStrongAssignAndConsume(&self->storageJobs_, new_JavaUtilConcurrentLinkedBlockingQueue_initWithInt_(queueSize));
  }
  else {
    JreStrongAssign(&self->storageJobs_, nil);
  }
  JreStrongAssignAndConsume(&self->lruCache_, new_OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(capacity));
  JreStrongAssignAndConsume(&self->lock_, new_JavaUtilConcurrentLocksReentrantReadWriteLock_init());
  if (OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidCacheDirectoryWithJavaIoFile_(cacheDirectory)) {
    JreStrongAssign(&self->cacheDirectory_, cacheDirectory);
    if (self->persistent_) {
      [create_JavaLangThread_initWithJavaLangRunnable_(create_OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader_initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_(self)) start];
    }
  }
  else {
    JreStrongAssign(&self->cacheDirectory_, nil);
  }
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  if (self->threaded_) {
    [self start];
  }
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *new_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize, jboolean persistent) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_, capacity, cacheDirectory, graphicFactory, threaded, queueSize, persistent)
}

OrgMapsforgeMapLayerCacheFileSystemTileCache *create_OrgMapsforgeMapLayerCacheFileSystemTileCache_initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_(jint capacity, JavaIoFile *cacheDirectory, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jboolean threaded, jint queueSize, jboolean persistent) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache, initWithInt_withJavaIoFile_withOrgMapsforgeCoreGraphicsGraphicFactory_withBoolean_withInt_withBoolean_, capacity, cacheDirectory, graphicFactory, threaded, queueSize, persistent)
}

JavaIoFile *OrgMapsforgeMapLayerCacheFileSystemTileCache_getOutputFileWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *job) {
  NSString *file = JreStrcat("@$$", self->cacheDirectory_, JreLoadStatic(JavaIoFile, separator), [((OrgMapsforgeMapLayerQueueJob *) nil_chk(job)) getKey]);
  NSString *dir = [file java_substring:0 endIndex:[file java_lastIndexOf:JreLoadStatic(JavaIoFile, separatorChar)]];
  if (OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidCacheDirectoryWithJavaIoFile_(create_JavaIoFile_initWithNSString_(dir))) {
    return create_JavaIoFile_initWithNSString_(JreStrcat("$$", file, OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION));
  }
  return nil;
}

void OrgMapsforgeMapLayerCacheFileSystemTileCache_removeWithOrgMapsforgeMapLayerQueueJob_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *key) {
  @try {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->lock_)) writeLock])) lock];
    [((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) removeWithId:[((OrgMapsforgeMapLayerQueueJob *) nil_chk(key)) getKey]];
  }
  @finally {
    [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([self->lock_ writeLock])) unlock];
  }
}

void OrgMapsforgeMapLayerCacheFileSystemTileCache_storeDataWithOrgMapsforgeMapLayerQueueJob_withOrgMapsforgeCoreGraphicsTileBitmap_(OrgMapsforgeMapLayerCacheFileSystemTileCache *self, OrgMapsforgeMapLayerQueueJob *key, id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap) {
  JavaIoOutputStream *outputStream = nil;
  @try {
    JavaIoFile *file = OrgMapsforgeMapLayerCacheFileSystemTileCache_getOutputFileWithOrgMapsforgeMapLayerQueueJob_(self, key);
    if (file == nil) {
      return;
    }
    outputStream = create_JavaIoFileOutputStream_initWithJavaIoFile_(file);
    [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(bitmap)) compressWithJavaIoOutputStream:outputStream];
    @try {
      [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->lock_)) writeLock])) lock];
      if ([((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(self->lruCache_)) putWithId:[((OrgMapsforgeMapLayerQueueJob *) nil_chk(key)) getKey] withId:file] != nil) {
        [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER)) warningWithNSString:JreStrcat("$$", @"overwriting cached entry: ", [key getKey])];
      }
    }
    @finally {
      [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([self->lock_ writeLock])) unlock];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheFileSystemTileCache_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:@"Disabling filesystem cache" withNSException:e];
    [self destroy];
    @try {
      [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(self->lock_)) writeLock])) lock];
      JreStrongAssignAndConsume(&self->lruCache_, new_OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(0));
    }
    @finally {
      [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([self->lock_ writeLock])) unlock];
    }
  }
  @finally {
    OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(outputStream);
    if (self->threaded_) {
      [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(bitmap)) decrementRefCount];
    }
    [((JavaUtilConcurrentAtomicAtomicInteger *) nil_chk(self->jobs_)) decrementAndGet];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheFileSystemTileCache)

@implementation OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader

- (instancetype)initWithOrgMapsforgeMapLayerCacheFileSystemTileCache:(OrgMapsforgeMapLayerCacheFileSystemTileCache *)outer$ {
  OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader_initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_(self, outer$);
  return self;
}

- (void)run {
  IOSObjectArray *zFiles = [((JavaIoFile *) nil_chk(this$0_->cacheDirectory_)) listFiles];
  if (zFiles != nil) {
    {
      IOSObjectArray *a__ = zFiles;
      JavaIoFile * const *b__ = a__->buffer_;
      JavaIoFile * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaIoFile *z = *b__++;
        IOSObjectArray *xFiles = [((JavaIoFile *) nil_chk(z)) listFiles];
        if (xFiles != nil) {
          {
            IOSObjectArray *a__ = xFiles;
            JavaIoFile * const *b__ = a__->buffer_;
            JavaIoFile * const *e__ = b__ + a__->size_;
            while (b__ < e__) {
              JavaIoFile *x = *b__++;
              IOSObjectArray *yFiles = [((JavaIoFile *) nil_chk(x)) listFiles];
              if (yFiles != nil) {
                {
                  IOSObjectArray *a__ = yFiles;
                  JavaIoFile * const *b__ = a__->buffer_;
                  JavaIoFile * const *e__ = b__ + a__->size_;
                  while (b__ < e__) {
                    JavaIoFile *y = *b__++;
                    if (OrgMapsforgeMapLayerCacheFileSystemTileCache_isValidFileWithJavaIoFile_(y) && [((NSString *) nil_chk([((JavaIoFile *) nil_chk(y)) getName])) java_hasSuffix:OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION]) {
                      jint index = [((NSString *) nil_chk([((JavaIoFile *) nil_chk(y)) getName])) java_lastIndexOfString:OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION];
                      NSString *key = OrgMapsforgeMapLayerQueueJob_composeKeyWithNSString_withNSString_withNSString_([z getName], [x getName], [((NSString *) nil_chk([y getName])) java_substring:0 endIndex:index]);
                      @try {
                        [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([((JavaUtilConcurrentLocksReentrantReadWriteLock *) nil_chk(this$0_->lock_)) writeLock])) lock];
                        if ([((OrgMapsforgeMapLayerCacheFileWorkingSetCache *) nil_chk(this$0_->lruCache_)) putWithId:key withId:y] != nil) {
                          [((JavaUtilLoggingLogger *) nil_chk(JreLoadStatic(OrgMapsforgeMapLayerCacheFileSystemTileCache, LOGGER))) warningWithNSString:JreStrcat("$$", @"overwriting cached entry: ", key)];
                        }
                      }
                      @finally {
                        [((JavaUtilConcurrentLocksReentrantReadWriteLock_WriteLock *) nil_chk([this$0_->lock_ writeLock])) unlock];
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheFileSystemTileCache:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LOrgMapsforgeMapLayerCacheFileSystemTileCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheFileSystemTileCache;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader = { "CacheDirectoryReader", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x0, 2, 1, 0, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader;
}

@end

void OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader_initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_(OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader *self, OrgMapsforgeMapLayerCacheFileSystemTileCache *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader *new_OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader_initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_(OrgMapsforgeMapLayerCacheFileSystemTileCache *outer$) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader, initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_, outer$)
}

OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader *create_OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader_initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_(OrgMapsforgeMapLayerCacheFileSystemTileCache *outer$) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader, initWithOrgMapsforgeMapLayerCacheFileSystemTileCache_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheFileSystemTileCache_CacheDirectoryReader)
