//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/TileStore.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Byte.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/Set.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/graphics/CorruptedInputStreamException.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/IOUtils.h"
#include "org/mapsforge/map/layer/cache/TileStore.h"
#include "org/mapsforge/map/layer/queue/Job.h"

@interface OrgMapsforgeMapLayerCacheTileStore () {
 @public
  JavaIoFile *rootDirectory_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  NSString *suffix_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTileStore, rootDirectory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTileStore, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTileStore, suffix_, NSString *)

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheTileStore_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheTileStore_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerCacheTileStore, LOGGER, JavaUtilLoggingLogger *)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerCacheTileStore)

@implementation OrgMapsforgeMapLayerCacheTileStore

- (instancetype)initWithJavaIoFile:(JavaIoFile *)rootDirectory
                      withNSString:(NSString *)suffix
withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerCacheTileStore_initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, rootDirectory, suffix, graphicFactory);
  return self;
}

- (jboolean)containsKeyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  @synchronized(self) {
    return [self findFileWithOrgMapsforgeMapLayerQueueJob:key] != nil;
  }
}

- (void)destroy {
  @synchronized(self) {
  }
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  @synchronized(self) {
    JavaIoFile *file = [self findFileWithOrgMapsforgeMapLayerQueueJob:key];
    if (file == nil) {
      return nil;
    }
    JavaIoInputStream *inputStream = nil;
    @try {
      inputStream = create_JavaIoFileInputStream_initWithJavaIoFile_(file);
      return [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createTileBitmapWithJavaIoInputStream:inputStream withInt:((OrgMapsforgeCoreModelTile *) nil_chk(((OrgMapsforgeMapLayerQueueJob *) nil_chk(key))->tile_))->tileSize_ withBoolean:key->hasAlpha_];
    }
    @catch (OrgMapsforgeCoreGraphicsCorruptedInputStreamException *e) {
      return nil;
    }
    @catch (JavaIoIOException *e) {
      return nil;
    }
    @finally {
      OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(inputStream);
    }
  }
}

- (jint)getCapacity {
  @synchronized(self) {
    return JavaLangInteger_MAX_VALUE;
  }
}

- (jint)getCapacityFirstLevel {
  @synchronized(self) {
    return [self getCapacity];
  }
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getImmediatelyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  return [self getWithOrgMapsforgeMapLayerQueueJob:key];
}

- (void)purge {
  @synchronized(self) {
  }
}

- (void)putWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
     withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  @synchronized(self) {
  }
}

- (JavaIoFile *)findFileWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  JavaIoFile *l1 = create_JavaIoFile_initWithJavaIoFile_withNSString_(self->rootDirectory_, JavaLangByte_toStringWithByte_(((OrgMapsforgeCoreModelTile *) nil_chk(((OrgMapsforgeMapLayerQueueJob *) nil_chk(key))->tile_))->zoomLevel_));
  if (l1 == nil || ![l1 isDirectory] || ![l1 canRead]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheTileStore_LOGGER)) infoWithNSString:JreStrcat("$$", @"Failed to find directory ", [l1 getAbsolutePath])];
    return nil;
  }
  JavaIoFile *l2 = create_JavaIoFile_initWithJavaIoFile_withNSString_(l1, JavaLangLong_toStringWithLong_(key->tile_->tileX_));
  if (l2 == nil || ![l2 isDirectory] || ![l2 canRead]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheTileStore_LOGGER)) infoWithNSString:JreStrcat("$$", @"Failed to find directory ", [l2 getAbsolutePath])];
    return nil;
  }
  JavaIoFile *l3 = create_JavaIoFile_initWithJavaIoFile_withNSString_(l2, JreStrcat("$$", JavaLangLong_toStringWithLong_(key->tile_->tileY_), self->suffix_));
  if (l3 == nil || ![l3 isFile] || ![l3 canRead]) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheTileStore_LOGGER)) infoWithNSString:JreStrcat("$$", @"Failed to find file ", [l3 getAbsolutePath])];
    return nil;
  }
  [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheTileStore_LOGGER)) infoWithNSString:JreStrcat("$$", @"Found file ", [l3 getAbsolutePath])];
  return l3;
}

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)key {
}

- (void)dealloc {
  RELEASE_(rootDirectory_);
  RELEASE_(graphicFactory_);
  RELEASE_(suffix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x21, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x4, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithJavaIoFile:withNSString:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[1].selector = @selector(containsKeyWithOrgMapsforgeMapLayerQueueJob:);
  methods[2].selector = @selector(destroy);
  methods[3].selector = @selector(getWithOrgMapsforgeMapLayerQueueJob:);
  methods[4].selector = @selector(getCapacity);
  methods[5].selector = @selector(getCapacityFirstLevel);
  methods[6].selector = @selector(getImmediatelyWithOrgMapsforgeMapLayerQueueJob:);
  methods[7].selector = @selector(purge);
  methods[8].selector = @selector(putWithOrgMapsforgeMapLayerQueueJob:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[9].selector = @selector(findFileWithOrgMapsforgeMapLayerQueueJob:);
  methods[10].selector = @selector(setWorkingSetWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rootDirectory_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "suffix_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaIoFile;LNSString;LOrgMapsforgeCoreGraphicsGraphicFactory;", "containsKey", "LOrgMapsforgeMapLayerQueueJob;", "get", "getImmediately", "put", "LOrgMapsforgeMapLayerQueueJob;LOrgMapsforgeCoreGraphicsTileBitmap;", "findFile", "setWorkingSet", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/mapsforge/map/layer/queue/Job;>;)V", &OrgMapsforgeMapLayerCacheTileStore_LOGGER };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheTileStore = { "TileStore", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x1, 11, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheTileStore;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerCacheTileStore class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerCacheTileStore_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerCacheTileStore_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerCacheTileStore)
  }
}

@end

void OrgMapsforgeMapLayerCacheTileStore_initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerCacheTileStore *self, JavaIoFile *rootDirectory, NSString *suffix, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  NSObject_init(self);
  JreStrongAssign(&self->rootDirectory_, rootDirectory);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssign(&self->suffix_, suffix);
  if (self->rootDirectory_ == nil || ![self->rootDirectory_ isDirectory] || ![self->rootDirectory_ canRead]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Root directory must be readable");
  }
}

OrgMapsforgeMapLayerCacheTileStore *new_OrgMapsforgeMapLayerCacheTileStore_initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_(JavaIoFile *rootDirectory, NSString *suffix, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheTileStore, initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_, rootDirectory, suffix, graphicFactory)
}

OrgMapsforgeMapLayerCacheTileStore *create_OrgMapsforgeMapLayerCacheTileStore_initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_(JavaIoFile *rootDirectory, NSString *suffix, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheTileStore, initWithJavaIoFile_withNSString_withOrgMapsforgeCoreGraphicsGraphicFactory_, rootDirectory, suffix, graphicFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheTileStore)
