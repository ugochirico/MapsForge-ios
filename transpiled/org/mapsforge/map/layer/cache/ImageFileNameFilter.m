//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/ImageFileNameFilter.java
//

#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/io/FilenameFilter.h"
#include "org/mapsforge/map/layer/cache/FileSystemTileCache.h"
#include "org/mapsforge/map/layer/cache/ImageFileNameFilter.h"

@interface OrgMapsforgeMapLayerCacheImageFileNameFilter ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapLayerCacheImageFileNameFilter_init(OrgMapsforgeMapLayerCacheImageFileNameFilter *self);

__attribute__((unused)) static OrgMapsforgeMapLayerCacheImageFileNameFilter *new_OrgMapsforgeMapLayerCacheImageFileNameFilter_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapLayerCacheImageFileNameFilter *create_OrgMapsforgeMapLayerCacheImageFileNameFilter_init();

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerCacheImageFileNameFilter)

id<JavaIoFilenameFilter> OrgMapsforgeMapLayerCacheImageFileNameFilter_INSTANCE;

@implementation OrgMapsforgeMapLayerCacheImageFileNameFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapLayerCacheImageFileNameFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptWithJavaIoFile:(JavaIoFile *)directory
                    withNSString:(NSString *)fileName {
  return [((NSString *) nil_chk(fileName)) java_hasSuffix:OrgMapsforgeMapLayerCacheFileSystemTileCache_FILE_EXTENSION];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptWithJavaIoFile:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LJavaIoFilenameFilter;", .constantValue.asLong = 0, 0x18, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "accept", "LJavaIoFile;LNSString;", &OrgMapsforgeMapLayerCacheImageFileNameFilter_INSTANCE };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheImageFileNameFilter = { "ImageFileNameFilter", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x10, 2, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheImageFileNameFilter;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerCacheImageFileNameFilter class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeMapLayerCacheImageFileNameFilter_INSTANCE, new_OrgMapsforgeMapLayerCacheImageFileNameFilter_init());
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerCacheImageFileNameFilter)
  }
}

@end

void OrgMapsforgeMapLayerCacheImageFileNameFilter_init(OrgMapsforgeMapLayerCacheImageFileNameFilter *self) {
  NSObject_init(self);
}

OrgMapsforgeMapLayerCacheImageFileNameFilter *new_OrgMapsforgeMapLayerCacheImageFileNameFilter_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheImageFileNameFilter, init)
}

OrgMapsforgeMapLayerCacheImageFileNameFilter *create_OrgMapsforgeMapLayerCacheImageFileNameFilter_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheImageFileNameFilter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheImageFileNameFilter)
