//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/FileWorkingSetCache.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/File.h"
#include "java/util/Map.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/util/WorkingSetCache.h"
#include "org/mapsforge/map/layer/cache/FileWorkingSetCache.h"

#pragma clang diagnostic ignored "-Wincomplete-implementation"

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheFileWorkingSetCache_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerCacheFileWorkingSetCache_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerCacheFileWorkingSetCache, LOGGER, JavaUtilLoggingLogger *)

inline jlong OrgMapsforgeMapLayerCacheFileWorkingSetCache_get_serialVersionUID();
#define OrgMapsforgeMapLayerCacheFileWorkingSetCache_serialVersionUID 1LL
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerCacheFileWorkingSetCache, serialVersionUID, jlong)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerCacheFileWorkingSetCache)

@implementation OrgMapsforgeMapLayerCacheFileWorkingSetCache

- (instancetype)initWithInt:(jint)capacity {
  OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(self, capacity);
  return self;
}

- (jboolean)removeEldestEntryWithJavaUtilMap_Entry:(id<JavaUtilMap_Entry>)eldest {
  if ([self size] > self->capacity_) {
    JavaIoFile *file = [((id<JavaUtilMap_Entry>) nil_chk(eldest)) getValue];
    if (file != nil && [file exists] && ![file delete__]) {
      [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerCacheFileWorkingSetCache_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:JreStrcat("$@", @"could not delete file: ", file)];
    }
    return true;
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(removeEldestEntryWithJavaUtilMap_Entry:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 4, -1, -1 },
    { "serialVersionUID", "J", .constantValue.asLong = OrgMapsforgeMapLayerCacheFileWorkingSetCache_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "removeEldestEntry", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TT;Ljava/io/File;>;)Z", &OrgMapsforgeMapLayerCacheFileWorkingSetCache_LOGGER, "<T:Ljava/lang/Object;>Lorg/mapsforge/core/util/WorkingSetCache<TT;Ljava/io/File;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheFileWorkingSetCache = { "FileWorkingSetCache", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x0, 2, 2, -1, -1, -1, 5, -1 };
  return &_OrgMapsforgeMapLayerCacheFileWorkingSetCache;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerCacheFileWorkingSetCache class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerCacheFileWorkingSetCache_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerCacheFileWorkingSetCache_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerCacheFileWorkingSetCache)
  }
}

@end

void OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(OrgMapsforgeMapLayerCacheFileWorkingSetCache *self, jint capacity) {
  OrgMapsforgeCoreUtilWorkingSetCache_initWithInt_(self, capacity);
}

OrgMapsforgeMapLayerCacheFileWorkingSetCache *new_OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(jint capacity) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheFileWorkingSetCache, initWithInt_, capacity)
}

OrgMapsforgeMapLayerCacheFileWorkingSetCache *create_OrgMapsforgeMapLayerCacheFileWorkingSetCache_initWithInt_(jint capacity) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheFileWorkingSetCache, initWithInt_, capacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheFileWorkingSetCache)
