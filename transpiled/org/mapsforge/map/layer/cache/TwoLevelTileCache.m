//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/cache/TwoLevelTileCache.java
//

#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/util/Collections.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/cache/TwoLevelTileCache.h"
#include "org/mapsforge/map/layer/queue/Job.h"

@interface OrgMapsforgeMapLayerCacheTwoLevelTileCache () {
 @public
  id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache_;
  id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache_;
  id<JavaUtilSet> workingSet_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTwoLevelTileCache, firstLevelTileCache_, id<OrgMapsforgeMapLayerCacheTileCache>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTwoLevelTileCache, secondLevelTileCache_, id<OrgMapsforgeMapLayerCacheTileCache>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerCacheTwoLevelTileCache, workingSet_, id<JavaUtilSet>)

@implementation OrgMapsforgeMapLayerCacheTwoLevelTileCache

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)firstLevelTileCache
                    withOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)secondLevelTileCache {
  OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(self, firstLevelTileCache, secondLevelTileCache);
  return self;
}

- (jboolean)containsKeyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  if ([((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:key]) {
    return true;
  }
  return [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:key];
}

- (void)destroy {
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) destroy];
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) destroy];
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  id<OrgMapsforgeCoreGraphicsTileBitmap> returnBitmap = [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) getWithOrgMapsforgeMapLayerQueueJob:key];
  if (returnBitmap != nil) {
    return returnBitmap;
  }
  returnBitmap = [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) getWithOrgMapsforgeMapLayerQueueJob:key];
  if (returnBitmap != nil) {
    [self->firstLevelTileCache_ putWithOrgMapsforgeMapLayerQueueJob:key withOrgMapsforgeCoreGraphicsTileBitmap:returnBitmap];
    return returnBitmap;
  }
  return nil;
}

- (jint)getCapacity {
  return JavaLangMath_maxWithInt_withInt_([((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) getCapacity], [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) getCapacity]);
}

- (jint)getCapacityFirstLevel {
  return [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) getCapacity];
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)getImmediatelyWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key {
  return [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(firstLevelTileCache_)) getWithOrgMapsforgeMapLayerQueueJob:key];
}

- (void)purge {
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) purge];
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) purge];
}

- (void)putWithOrgMapsforgeMapLayerQueueJob:(OrgMapsforgeMapLayerQueueJob *)key
     withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  if ([((id<JavaUtilSet>) nil_chk(self->workingSet_)) containsWithId:key]) {
    [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) putWithOrgMapsforgeMapLayerQueueJob:key withOrgMapsforgeCoreGraphicsTileBitmap:bitmap];
  }
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) putWithOrgMapsforgeMapLayerQueueJob:key withOrgMapsforgeCoreGraphicsTileBitmap:bitmap];
}

- (void)setWorkingSetWithJavaUtilSet:(id<JavaUtilSet>)newWorkingSet {
  [((id<JavaUtilSet>) nil_chk(self->workingSet_)) clear];
  [self->workingSet_ addAllWithJavaUtilCollection:newWorkingSet];
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->firstLevelTileCache_)) setWorkingSetWithJavaUtilSet:self->workingSet_];
  [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->secondLevelTileCache_)) setWorkingSetWithJavaUtilSet:self->workingSet_];
  for (OrgMapsforgeMapLayerQueueJob * __strong job in workingSet_) {
    if (![firstLevelTileCache_ containsKeyWithOrgMapsforgeMapLayerQueueJob:job] && [secondLevelTileCache_ containsKeyWithOrgMapsforgeMapLayerQueueJob:job]) {
      id<OrgMapsforgeCoreGraphicsTileBitmap> tileBitmap = [secondLevelTileCache_ getWithOrgMapsforgeMapLayerQueueJob:job];
      if (tileBitmap != nil) {
        [firstLevelTileCache_ putWithOrgMapsforgeMapLayerQueueJob:job withOrgMapsforgeCoreGraphicsTileBitmap:tileBitmap];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(firstLevelTileCache_);
  RELEASE_(secondLevelTileCache_);
  RELEASE_(workingSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapLayerCacheTileCache:);
  methods[1].selector = @selector(containsKeyWithOrgMapsforgeMapLayerQueueJob:);
  methods[2].selector = @selector(destroy);
  methods[3].selector = @selector(getWithOrgMapsforgeMapLayerQueueJob:);
  methods[4].selector = @selector(getCapacity);
  methods[5].selector = @selector(getCapacityFirstLevel);
  methods[6].selector = @selector(getImmediatelyWithOrgMapsforgeMapLayerQueueJob:);
  methods[7].selector = @selector(purge);
  methods[8].selector = @selector(putWithOrgMapsforgeMapLayerQueueJob:withOrgMapsforgeCoreGraphicsTileBitmap:);
  methods[9].selector = @selector(setWorkingSetWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "firstLevelTileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "secondLevelTileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "workingSet_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x12, -1, -1, 10, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapLayerCacheTileCache;", "containsKey", "LOrgMapsforgeMapLayerQueueJob;", "get", "getImmediately", "put", "LOrgMapsforgeMapLayerQueueJob;LOrgMapsforgeCoreGraphicsTileBitmap;", "setWorkingSet", "LJavaUtilSet;", "(Ljava/util/Set<Lorg/mapsforge/map/layer/queue/Job;>;)V", "Ljava/util/Set<Lorg/mapsforge/map/layer/queue/Job;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerCacheTwoLevelTileCache = { "TwoLevelTileCache", "org.mapsforge.map.layer.cache", ptrTable, methods, fields, 7, 0x1, 10, 3, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerCacheTwoLevelTileCache;
}

@end

void OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(OrgMapsforgeMapLayerCacheTwoLevelTileCache *self, id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache) {
  NSObject_init(self);
  JreStrongAssign(&self->firstLevelTileCache_, firstLevelTileCache);
  JreStrongAssign(&self->secondLevelTileCache_, secondLevelTileCache);
  JreStrongAssign(&self->workingSet_, JavaUtilCollections_synchronizedSetWithJavaUtilSet_(create_JavaUtilHashSet_init()));
}

OrgMapsforgeMapLayerCacheTwoLevelTileCache *new_OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerCacheTwoLevelTileCache, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_, firstLevelTileCache, secondLevelTileCache)
}

OrgMapsforgeMapLayerCacheTwoLevelTileCache *create_OrgMapsforgeMapLayerCacheTwoLevelTileCache_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_(id<OrgMapsforgeMapLayerCacheTileCache> firstLevelTileCache, id<OrgMapsforgeMapLayerCacheTileCache> secondLevelTileCache) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerCacheTwoLevelTileCache, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerCacheTileCache_, firstLevelTileCache, secondLevelTileCache)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerCacheTwoLevelTileCache)
