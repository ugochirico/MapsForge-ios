//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/Layers.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Iterable.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Spliterator.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"
#include "java/util/function/Consumer.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/Layers.h"
#include "org/mapsforge/map/layer/Redrawer.h"
#include "org/mapsforge/map/model/DisplayModel.h"

@interface OrgMapsforgeMapLayerLayers () {
 @public
  OrgMapsforgeMapModelDisplayModel *displayModel_;
  id<JavaUtilList> layersList_;
  id<OrgMapsforgeMapLayerRedrawer> redrawer_;
}

+ (void)checkIsNullWithJavaUtilCollection:(id<JavaUtilCollection>)layers;

+ (void)checkIsNullWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayers, displayModel_, OrgMapsforgeMapModelDisplayModel *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayers, layersList_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerLayers, redrawer_, id<OrgMapsforgeMapLayerRedrawer>)

__attribute__((unused)) static void OrgMapsforgeMapLayerLayers_checkIsNullWithJavaUtilCollection_(id<JavaUtilCollection> layers);

__attribute__((unused)) static void OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(OrgMapsforgeMapLayerLayer *layer);

@implementation OrgMapsforgeMapLayerLayers

+ (void)checkIsNullWithJavaUtilCollection:(id<JavaUtilCollection>)layers {
  OrgMapsforgeMapLayerLayers_checkIsNullWithJavaUtilCollection_(layers);
}

+ (void)checkIsNullWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
}

- (instancetype)initWithOrgMapsforgeMapLayerRedrawer:(id<OrgMapsforgeMapLayerRedrawer>)redrawer
                withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  OrgMapsforgeMapLayerLayers_initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_(self, redrawer, displayModel);
  return self;
}

- (void)addWithInt:(jint)index
withOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
    [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) setDisplayModelWithOrgMapsforgeMapModelDisplayModel:self->displayModel_];
    [((id<JavaUtilList>) nil_chk(self->layersList_)) addWithInt:index withId:layer];
    [layer assignWithOrgMapsforgeMapLayerRedrawer:self->redrawer_];
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
  }
}

- (void)addWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
    [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) setDisplayModelWithOrgMapsforgeMapModelDisplayModel:self->displayModel_];
    [((id<JavaUtilList>) nil_chk(self->layersList_)) addWithId:layer];
    [layer assignWithOrgMapsforgeMapLayerRedrawer:self->redrawer_];
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
  }
}

- (void)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)layers {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithJavaUtilCollection_(layers);
    for (OrgMapsforgeMapLayerLayer * __strong layer in nil_chk(layers)) {
      [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) setDisplayModelWithOrgMapsforgeMapModelDisplayModel:self->displayModel_];
    }
    [((id<JavaUtilList>) nil_chk(self->layersList_)) addAllWithJavaUtilCollection:layers];
    for (OrgMapsforgeMapLayerLayer * __strong layer in layers) {
      [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) assignWithOrgMapsforgeMapLayerRedrawer:self->redrawer_];
    }
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
  }
}

- (void)addAllWithInt:(jint)index
withJavaUtilCollection:(id<JavaUtilCollection>)layers {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithJavaUtilCollection_(layers);
    [((id<JavaUtilList>) nil_chk(self->layersList_)) addAllWithInt:index withJavaUtilCollection:layers];
    for (OrgMapsforgeMapLayerLayer * __strong layer in nil_chk(layers)) {
      [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) setDisplayModelWithOrgMapsforgeMapModelDisplayModel:self->displayModel_];
      [layer assignWithOrgMapsforgeMapLayerRedrawer:self->redrawer_];
    }
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
  }
}

- (void)clear {
  @synchronized(self) {
    for (OrgMapsforgeMapLayerLayer * __strong layer in nil_chk(self->layersList_)) {
      [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) unassign];
    }
    [self->layersList_ clear];
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
  }
}

- (jboolean)containsWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) containsWithId:layer];
  }
}

- (OrgMapsforgeMapLayerLayer *)getWithInt:(jint)index {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) getWithInt:index];
  }
}

- (jint)indexOfWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) indexOfWithId:layer];
  }
}

- (jboolean)isEmpty {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) isEmpty];
  }
}

- (id<JavaUtilIterator>)iterator {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) iterator];
  }
}

- (OrgMapsforgeMapLayerLayer *)removeWithInt:(jint)index {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayer *layer = [((id<JavaUtilList>) nil_chk(self->layersList_)) removeWithInt:index];
    [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) unassign];
    [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
    return layer;
  }
}

- (jboolean)removeWithOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer {
  @synchronized(self) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
    if ([((id<JavaUtilList>) nil_chk(self->layersList_)) removeWithId:layer]) {
      [((OrgMapsforgeMapLayerLayer *) nil_chk(layer)) unassign];
      [((id<OrgMapsforgeMapLayerRedrawer>) nil_chk(self->redrawer_)) redrawLayers];
      return true;
    }
    return false;
  }
}

- (jint)size {
  @synchronized(self) {
    return [((id<JavaUtilList>) nil_chk(self->layersList_)) size];
  }
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

- (void)dealloc {
  RELEASE_(displayModel_);
  RELEASE_(layersList_);
  RELEASE_(redrawer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0xa, 0, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 7, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x21, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 10, 3, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerLayer;", 0x21, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x21, 13, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x21, -1, -1, -1, 14, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerLayer;", 0x21, 15, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 15, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x21, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(checkIsNullWithJavaUtilCollection:);
  methods[1].selector = @selector(checkIsNullWithOrgMapsforgeMapLayerLayer:);
  methods[2].selector = @selector(initWithOrgMapsforgeMapLayerRedrawer:withOrgMapsforgeMapModelDisplayModel:);
  methods[3].selector = @selector(addWithInt:withOrgMapsforgeMapLayerLayer:);
  methods[4].selector = @selector(addWithOrgMapsforgeMapLayerLayer:);
  methods[5].selector = @selector(addAllWithJavaUtilCollection:);
  methods[6].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[7].selector = @selector(clear);
  methods[8].selector = @selector(containsWithOrgMapsforgeMapLayerLayer:);
  methods[9].selector = @selector(getWithInt:);
  methods[10].selector = @selector(indexOfWithOrgMapsforgeMapLayerLayer:);
  methods[11].selector = @selector(isEmpty);
  methods[12].selector = @selector(iterator);
  methods[13].selector = @selector(removeWithInt:);
  methods[14].selector = @selector(removeWithOrgMapsforgeMapLayerLayer:);
  methods[15].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "layersList_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 16, -1 },
    { "redrawer_", "LOrgMapsforgeMapLayerRedrawer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "checkIsNull", "LJavaUtilCollection;", "(Ljava/util/Collection<Lorg/mapsforge/map/layer/Layer;>;)V", "LOrgMapsforgeMapLayerLayer;", "LOrgMapsforgeMapLayerRedrawer;LOrgMapsforgeMapModelDisplayModel;", "add", "ILOrgMapsforgeMapLayerLayer;", "addAll", "ILJavaUtilCollection;", "(ILjava/util/Collection<Lorg/mapsforge/map/layer/Layer;>;)V", "contains", "get", "I", "indexOf", "()Ljava/util/Iterator<Lorg/mapsforge/map/layer/Layer;>;", "remove", "Ljava/util/List<Lorg/mapsforge/map/layer/Layer;>;", "Ljava/lang/Object;Ljava/lang/Iterable<Lorg/mapsforge/map/layer/Layer;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerLayers = { "Layers", "org.mapsforge.map.layer", ptrTable, methods, fields, 7, 0x1, 16, 3, -1, -1, -1, 17, -1 };
  return &_OrgMapsforgeMapLayerLayers;
}

@end

void OrgMapsforgeMapLayerLayers_checkIsNullWithJavaUtilCollection_(id<JavaUtilCollection> layers) {
  OrgMapsforgeMapLayerLayers_initialize();
  if (layers == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"layers must not be null");
  }
  for (OrgMapsforgeMapLayerLayer * __strong layer in layers) {
    OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(layer);
  }
}

void OrgMapsforgeMapLayerLayers_checkIsNullWithOrgMapsforgeMapLayerLayer_(OrgMapsforgeMapLayerLayer *layer) {
  OrgMapsforgeMapLayerLayers_initialize();
  if (layer == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"layer must not be null");
  }
}

void OrgMapsforgeMapLayerLayers_initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapLayerLayers *self, id<OrgMapsforgeMapLayerRedrawer> redrawer, OrgMapsforgeMapModelDisplayModel *displayModel) {
  NSObject_init(self);
  JreStrongAssign(&self->redrawer_, redrawer);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssignAndConsume(&self->layersList_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
}

OrgMapsforgeMapLayerLayers *new_OrgMapsforgeMapLayerLayers_initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerRedrawer> redrawer, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerLayers, initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_, redrawer, displayModel)
}

OrgMapsforgeMapLayerLayers *create_OrgMapsforgeMapLayerLayers_initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerRedrawer> redrawer, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerLayers, initWithOrgMapsforgeMapLayerRedrawer_withOrgMapsforgeMapModelDisplayModel_, redrawer, displayModel)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerLayers)
