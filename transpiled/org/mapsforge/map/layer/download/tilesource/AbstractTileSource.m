//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/tilesource/AbstractTileSource.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Arrays.h"
#include "java/util/Random.h"
#include "org/mapsforge/map/layer/download/tilesource/AbstractTileSource.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource

- (instancetype)initWithNSStringArray:(IOSObjectArray *)hostNames
                              withInt:(jint)port {
  OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource_initWithNSStringArray_withInt_(self, hostNames, port);
  return self;
}

- (NSString *)getHostName {
  return IOSObjectArray_Get(self->hostNames_, [((JavaUtilRandom *) nil_chk(random_)) nextIntWithInt:((IOSObjectArray *) nil_chk(self->hostNames_))->size_]);
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource class]])) {
    return false;
  }
  OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource *other = (OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource *) cast_chk(obj, [OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource class]);
  if (!JavaUtilArrays_equalsWithNSObjectArray_withNSObjectArray_(self->hostNames_, ((OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource *) nil_chk(other))->hostNames_)) {
    return false;
  }
  else if (self->port_ != other->port_) {
    return false;
  }
  return true;
}

- (jlong)getDefaultTimeToLive {
  return defaultTimeToLive_;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  result = prime * result + JavaUtilArrays_hashCodeWithNSObjectArray_(self->hostNames_);
  result = prime * result + self->port_;
  return result;
}

- (void)dealloc {
  RELEASE_(hostNames_);
  RELEASE_(random_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getHostName);
  methods[2].selector = @selector(isEqual:);
  methods[3].selector = @selector(getDefaultTimeToLive);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "defaultTimeToLive_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "hostNames_", "[LNSString;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "random_", "LJavaUtilRandom;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource = { "AbstractTileSource", "org.mapsforge.map.layer.download.tilesource", ptrTable, methods, fields, 7, 0x401, 5, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource;
}

@end

void OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource_initWithNSStringArray_withInt_(OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource *self, IOSObjectArray *hostNames, jint port) {
  NSObject_init(self);
  self->defaultTimeToLive_ = 86400000;
  JreStrongAssignAndConsume(&self->random_, new_JavaUtilRandom_init());
  if (hostNames == nil || hostNames->size_ == 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"no host names specified");
  }
  if (port < 0 || port > 65535) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid port number: ", port));
  }
  {
    IOSObjectArray *a__ = hostNames;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *hostname = *b__++;
      if ([((NSString *) nil_chk(hostname)) java_isEmpty]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"empty host name in host name list");
      }
    }
  }
  JreStrongAssign(&self->hostNames_, hostNames);
  self->port_ = port;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource)
