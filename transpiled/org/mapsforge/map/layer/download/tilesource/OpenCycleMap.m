//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/tilesource/OpenCycleMap.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/download/tilesource/AbstractTileSource.h"
#include "org/mapsforge/map/layer/download/tilesource/OpenCycleMap.h"

inline jint OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_get_PARALLEL_REQUESTS_LIMIT();
#define OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PARALLEL_REQUESTS_LIMIT 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, PARALLEL_REQUESTS_LIMIT, jint)

inline NSString *OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_get_PROTOCOL();
static NSString *OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PROTOCOL = @"http";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, PROTOCOL, NSString *)

inline jint OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_get_ZOOM_LEVEL_MAX();
#define OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MAX 18
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, ZOOM_LEVEL_MAX, jint)

inline jint OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_get_ZOOM_LEVEL_MIN();
#define OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MIN 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, ZOOM_LEVEL_MIN, jint)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap)

OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap *OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_INSTANCE;

@implementation OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap

- (instancetype)initWithNSStringArray:(IOSObjectArray *)hostNames
                              withInt:(jint)port {
  OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_initWithNSStringArray_withInt_(self, hostNames, port);
  return self;
}

- (jint)getParallelRequestsLimit {
  return OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PARALLEL_REQUESTS_LIMIT;
}

- (JavaNetURL *)getTileUrlWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_initWithInt_(32);
  [stringBuilder appendWithNSString:@"/cycle/"];
  [stringBuilder appendWithInt:((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_];
  [stringBuilder appendWithChar:'/'];
  [stringBuilder appendWithInt:tile->tileX_];
  [stringBuilder appendWithChar:'/'];
  [stringBuilder appendWithInt:tile->tileY_];
  [stringBuilder appendWithNSString:@".png"];
  return create_JavaNetURL_initWithNSString_withNSString_withInt_withNSString_(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PROTOCOL, [self getHostName], self->port_, [stringBuilder description]);
}

- (jbyte)getZoomLevelMax {
  return OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MAX;
}

- (jbyte)getZoomLevelMin {
  return OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MIN;
}

- (jboolean)hasAlpha {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getParallelRequestsLimit);
  methods[2].selector = @selector(getTileUrlWithOrgMapsforgeCoreModelTile:);
  methods[3].selector = @selector(getZoomLevelMax);
  methods[4].selector = @selector(getZoomLevelMin);
  methods[5].selector = @selector(hasAlpha);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "PARALLEL_REQUESTS_LIMIT", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PARALLEL_REQUESTS_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "PROTOCOL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "ZOOM_LEVEL_MAX", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MAX, 0x1a, -1, -1, -1, -1 },
    { "ZOOM_LEVEL_MIN", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_ZOOM_LEVEL_MIN, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "getTileUrl", "LOrgMapsforgeCoreModelTile;", "LJavaNetMalformedURLException;", &OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_INSTANCE, &OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_PROTOCOL };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap = { "OpenCycleMap", "org.mapsforge.map.layer.download.tilesource", ptrTable, methods, fields, 7, 0x1, 6, 5, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap class]) {
    JreStrongAssignAndConsume(&OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_INSTANCE, new_OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_initWithNSStringArray_withInt_([IOSObjectArray arrayWithObjects:(id[]){ @"a.tile.opencyclemap.org", @"b.tile.opencyclemap.org", @"c.tile.opencyclemap.org" } count:3 type:NSString_class_()], 80));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap)
  }
}

@end

void OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_initWithNSStringArray_withInt_(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap *self, IOSObjectArray *hostNames, jint port) {
  OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource_initWithNSStringArray_withInt_(self, hostNames, port);
}

OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap *new_OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_initWithNSStringArray_withInt_(IOSObjectArray *hostNames, jint port) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, initWithNSStringArray_withInt_, hostNames, port)
}

OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap *create_OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap_initWithNSStringArray_withInt_(IOSObjectArray *hostNames, jint port) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap, initWithNSStringArray_withInt_, hostNames, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTilesourceOpenCycleMap)
