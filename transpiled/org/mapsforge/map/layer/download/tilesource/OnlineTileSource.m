//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/tilesource/OnlineTileSource.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URL.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/download/tilesource/AbstractTileSource.h"
#include "org/mapsforge/map/layer/download/tilesource/OnlineTileSource.h"

@interface OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource () {
 @public
  jboolean alpha_;
  NSString *baseUrl_;
  NSString *extension_;
  NSString *name_;
  jint parallelRequestsLimit_;
  NSString *protocol_;
  jint tileSize_;
  jbyte zoomLevelMax_;
  jbyte zoomLevelMin_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, baseUrl_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, extension_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, name_, NSString *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, protocol_, NSString *)

@implementation OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource

- (instancetype)initWithNSStringArray:(IOSObjectArray *)hostNames
                              withInt:(jint)port {
  OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource_initWithNSStringArray_withInt_(self, hostNames, port);
  return self;
}

- (NSString *)getName {
  return name_;
}

- (jint)getParallelRequestsLimit {
  return parallelRequestsLimit_;
}

- (jint)getTileSize {
  return tileSize_;
}

- (JavaNetURL *)getTileUrlWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_initWithInt_(32);
  [stringBuilder appendWithNSString:baseUrl_];
  [stringBuilder appendWithInt:((OrgMapsforgeCoreModelTile *) nil_chk(tile))->zoomLevel_];
  [stringBuilder appendWithChar:'/'];
  [stringBuilder appendWithInt:tile->tileX_];
  [stringBuilder appendWithChar:'/'];
  [stringBuilder appendWithInt:tile->tileY_];
  [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithChar:'.'])) appendWithNSString:extension_];
  return create_JavaNetURL_initWithNSString_withNSString_withInt_withNSString_(self->protocol_, [self getHostName], self->port_, [stringBuilder description]);
}

- (jbyte)getZoomLevelMax {
  return zoomLevelMax_;
}

- (jbyte)getZoomLevelMin {
  return zoomLevelMin_;
}

- (jboolean)hasAlpha {
  return alpha_;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setAlphaWithBoolean:(jboolean)alpha {
  self->alpha_ = alpha;
  return self;
}

- (NSString *)getBaseUrl {
  return baseUrl_;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setBaseUrlWithNSString:(NSString *)baseUrl {
  JreStrongAssign(&self->baseUrl_, baseUrl);
  return self;
}

- (NSString *)getExtension {
  return extension_;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setExtensionWithNSString:(NSString *)extension {
  JreStrongAssign(&self->extension_, extension);
  return self;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setNameWithNSString:(NSString *)name {
  JreStrongAssign(&self->name_, name);
  return self;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setParallelRequestsLimitWithInt:(jint)parallelRequestsLimit {
  self->parallelRequestsLimit_ = parallelRequestsLimit;
  return self;
}

- (NSString *)getProtocol {
  return protocol_;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setProtocolWithNSString:(NSString *)protocol {
  JreStrongAssign(&self->protocol_, protocol);
  return self;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setTileSizeWithInt:(jint)tileSize {
  self->tileSize_ = tileSize;
  return self;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setZoomLevelMaxWithByte:(jbyte)zoomLevelMax {
  self->zoomLevelMax_ = zoomLevelMax;
  return self;
}

- (OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *)setZoomLevelMinWithByte:(jbyte)zoomLevelMin {
  self->zoomLevelMin_ = zoomLevelMin;
  return self;
}

- (void)dealloc {
  RELEASE_(baseUrl_);
  RELEASE_(extension_);
  RELEASE_(name_);
  RELEASE_(protocol_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURL;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "B", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;", 0x1, 16, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(getParallelRequestsLimit);
  methods[3].selector = @selector(getTileSize);
  methods[4].selector = @selector(getTileUrlWithOrgMapsforgeCoreModelTile:);
  methods[5].selector = @selector(getZoomLevelMax);
  methods[6].selector = @selector(getZoomLevelMin);
  methods[7].selector = @selector(hasAlpha);
  methods[8].selector = @selector(setAlphaWithBoolean:);
  methods[9].selector = @selector(getBaseUrl);
  methods[10].selector = @selector(setBaseUrlWithNSString:);
  methods[11].selector = @selector(getExtension);
  methods[12].selector = @selector(setExtensionWithNSString:);
  methods[13].selector = @selector(setNameWithNSString:);
  methods[14].selector = @selector(setParallelRequestsLimitWithInt:);
  methods[15].selector = @selector(getProtocol);
  methods[16].selector = @selector(setProtocolWithNSString:);
  methods[17].selector = @selector(setTileSizeWithInt:);
  methods[18].selector = @selector(setZoomLevelMaxWithByte:);
  methods[19].selector = @selector(setZoomLevelMinWithByte:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "alpha_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "baseUrl_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extension_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parallelRequestsLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "protocol_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zoomLevelMax_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zoomLevelMin_", "B", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "getTileUrl", "LOrgMapsforgeCoreModelTile;", "LJavaNetMalformedURLException;", "setAlpha", "Z", "setBaseUrl", "LNSString;", "setExtension", "setName", "setParallelRequestsLimit", "I", "setProtocol", "setTileSize", "setZoomLevelMax", "B", "setZoomLevelMin" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource = { "OnlineTileSource", "org.mapsforge.map.layer.download.tilesource", ptrTable, methods, fields, 7, 0x1, 20, 9, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource;
}

@end

void OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource_initWithNSStringArray_withInt_(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *self, IOSObjectArray *hostNames, jint port) {
  OrgMapsforgeMapLayerDownloadTilesourceAbstractTileSource_initWithNSStringArray_withInt_(self, hostNames, port);
  self->alpha_ = false;
  JreStrongAssign(&self->baseUrl_, @"/");
  JreStrongAssign(&self->extension_, @"png");
  self->parallelRequestsLimit_ = 8;
  JreStrongAssign(&self->protocol_, @"http");
  self->tileSize_ = 256;
  self->zoomLevelMax_ = 18;
  self->zoomLevelMin_ = 0;
}

OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *new_OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource_initWithNSStringArray_withInt_(IOSObjectArray *hostNames, jint port) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, initWithNSStringArray_withInt_, hostNames, port)
}

OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource *create_OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource_initWithNSStringArray_withInt_(IOSObjectArray *hostNames, jint port) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource, initWithNSStringArray_withInt_, hostNames, port)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTilesourceOnlineTileSource)
