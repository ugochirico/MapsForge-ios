//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/TileDownloader.java
//

#include "J2ObjC_source.h"
#include "java/io/InputStream.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/zip/GZIPInputStream.h"
#include "org/mapsforge/core/graphics/CorruptedInputStreamException.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/IOUtils.h"
#include "org/mapsforge/map/layer/download/DownloadJob.h"
#include "org/mapsforge/map/layer/download/TileDownloader.h"
#include "org/mapsforge/map/layer/download/tilesource/TileSource.h"

@interface OrgMapsforgeMapLayerDownloadTileDownloader () {
 @public
  OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
}

+ (JavaIoInputStream *)getInputStreamWithJavaNetURLConnection:(JavaNetURLConnection *)urlConnection;

+ (JavaNetURLConnection *)getURLConnectionWithJavaNetURL:(JavaNetURL *)url;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloader, downloadJob_, OrgMapsforgeMapLayerDownloadDownloadJob *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloader, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)

inline jint OrgMapsforgeMapLayerDownloadTileDownloader_get_TIMEOUT_CONNECT();
#define OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_CONNECT 5000
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTileDownloader, TIMEOUT_CONNECT, jint)

inline jint OrgMapsforgeMapLayerDownloadTileDownloader_get_TIMEOUT_READ();
#define OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_READ 10000
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTileDownloader, TIMEOUT_READ, jint)

__attribute__((unused)) static JavaIoInputStream *OrgMapsforgeMapLayerDownloadTileDownloader_getInputStreamWithJavaNetURLConnection_(JavaNetURLConnection *urlConnection);

__attribute__((unused)) static JavaNetURLConnection *OrgMapsforgeMapLayerDownloadTileDownloader_getURLConnectionWithJavaNetURL_(JavaNetURL *url);

@implementation OrgMapsforgeMapLayerDownloadTileDownloader

+ (JavaIoInputStream *)getInputStreamWithJavaNetURLConnection:(JavaNetURLConnection *)urlConnection {
  return OrgMapsforgeMapLayerDownloadTileDownloader_getInputStreamWithJavaNetURLConnection_(urlConnection);
}

+ (JavaNetURLConnection *)getURLConnectionWithJavaNetURL:(JavaNetURL *)url {
  return OrgMapsforgeMapLayerDownloadTileDownloader_getURLConnectionWithJavaNetURL_(url);
}

- (instancetype)initWithOrgMapsforgeMapLayerDownloadDownloadJob:(OrgMapsforgeMapLayerDownloadDownloadJob *)downloadJob
                     withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerDownloadTileDownloader_initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, downloadJob, graphicFactory);
  return self;
}

- (id<OrgMapsforgeCoreGraphicsTileBitmap>)downloadImage {
  JavaNetURL *url = [((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(((OrgMapsforgeMapLayerDownloadDownloadJob *) nil_chk(self->downloadJob_))->tileSource_)) getTileUrlWithOrgMapsforgeCoreModelTile:self->downloadJob_->tile_];
  JavaNetURLConnection *urlConnection = OrgMapsforgeMapLayerDownloadTileDownloader_getURLConnectionWithJavaNetURL_(url);
  JavaIoInputStream *inputStream = OrgMapsforgeMapLayerDownloadTileDownloader_getInputStreamWithJavaNetURLConnection_(urlConnection);
  @try {
    id<OrgMapsforgeCoreGraphicsTileBitmap> result = [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(self->graphicFactory_)) createTileBitmapWithJavaIoInputStream:inputStream withInt:((OrgMapsforgeCoreModelTile *) nil_chk(self->downloadJob_->tile_))->tileSize_ withBoolean:self->downloadJob_->hasAlpha_];
    [((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(result)) setExpirationWithLong:[((JavaNetURLConnection *) nil_chk(urlConnection)) getExpiration]];
    return result;
  }
  @catch (OrgMapsforgeCoreGraphicsCorruptedInputStreamException *e) {
    return nil;
  }
  @finally {
    OrgMapsforgeCoreUtilIOUtils_closeQuietlyWithJavaIoCloseable_(inputStream);
  }
}

- (void)dealloc {
  RELEASE_(downloadJob_);
  RELEASE_(graphicFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaIoInputStream;", 0xa, 0, 1, 2, -1, -1, -1 },
    { NULL, "LJavaNetURLConnection;", 0xa, 3, 4, 2, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 5, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreGraphicsTileBitmap;", 0x0, -1, -1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getInputStreamWithJavaNetURLConnection:);
  methods[1].selector = @selector(getURLConnectionWithJavaNetURL:);
  methods[2].selector = @selector(initWithOrgMapsforgeMapLayerDownloadDownloadJob:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[3].selector = @selector(downloadImage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TIMEOUT_CONNECT", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_CONNECT, 0x1a, -1, -1, -1, -1 },
    { "TIMEOUT_READ", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_READ, 0x1a, -1, -1, -1, -1 },
    { "downloadJob_", "LOrgMapsforgeMapLayerDownloadDownloadJob;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInputStream", "LJavaNetURLConnection;", "LJavaIoIOException;", "getURLConnection", "LJavaNetURL;", "LOrgMapsforgeMapLayerDownloadDownloadJob;LOrgMapsforgeCoreGraphicsGraphicFactory;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTileDownloader = { "TileDownloader", "org.mapsforge.map.layer.download", ptrTable, methods, fields, 7, 0x0, 4, 4, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadTileDownloader;
}

@end

JavaIoInputStream *OrgMapsforgeMapLayerDownloadTileDownloader_getInputStreamWithJavaNetURLConnection_(JavaNetURLConnection *urlConnection) {
  OrgMapsforgeMapLayerDownloadTileDownloader_initialize();
  if ([@"gzip" isEqual:[((JavaNetURLConnection *) nil_chk(urlConnection)) getContentEncoding]]) {
    return create_JavaUtilZipGZIPInputStream_initWithJavaIoInputStream_([urlConnection getInputStream]);
  }
  return [urlConnection getInputStream];
}

JavaNetURLConnection *OrgMapsforgeMapLayerDownloadTileDownloader_getURLConnectionWithJavaNetURL_(JavaNetURL *url) {
  OrgMapsforgeMapLayerDownloadTileDownloader_initialize();
  JavaNetURLConnection *urlConnection = [((JavaNetURL *) nil_chk(url)) openConnection];
  [((JavaNetURLConnection *) nil_chk(urlConnection)) setConnectTimeoutWithInt:OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_CONNECT];
  [urlConnection setReadTimeoutWithInt:OrgMapsforgeMapLayerDownloadTileDownloader_TIMEOUT_READ];
  return urlConnection;
}

void OrgMapsforgeMapLayerDownloadTileDownloader_initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerDownloadTileDownloader *self, OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  NSObject_init(self);
  if (downloadJob == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"downloadJob must not be null");
  }
  else if (graphicFactory == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"graphicFactory must not be null");
  }
  JreStrongAssign(&self->downloadJob_, downloadJob);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
}

OrgMapsforgeMapLayerDownloadTileDownloader *new_OrgMapsforgeMapLayerDownloadTileDownloader_initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadTileDownloader, initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_, downloadJob, graphicFactory)
}

OrgMapsforgeMapLayerDownloadTileDownloader *create_OrgMapsforgeMapLayerDownloadTileDownloader_initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadTileDownloader, initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_, downloadJob, graphicFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTileDownloader)
