//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/TileDownloadLayer.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/Matrix.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/TileLayer.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/download/DownloadJob.h"
#include "org/mapsforge/map/layer/download/TileDownloadLayer.h"
#include "org/mapsforge/map/layer/download/TileDownloadThread.h"
#include "org/mapsforge/map/layer/download/tilesource/TileSource.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewPosition.h"

@interface OrgMapsforgeMapLayerDownloadTileDownloadLayer () {
 @public
  jlong cacheTimeToLive_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  jboolean started_;
  id<OrgMapsforgeMapLayerCacheTileCache> tileCache_TileDownloadLayer_;
  IOSObjectArray *tileDownloadThreads_;
  id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource_;
}

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadLayer, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadLayer, tileCache_TileDownloadLayer_, id<OrgMapsforgeMapLayerCacheTileCache>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadLayer, tileDownloadThreads_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadLayer, tileSource_, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>)

inline jint OrgMapsforgeMapLayerDownloadTileDownloadLayer_get_DOWNLOAD_THREADS_MAX();
#define OrgMapsforgeMapLayerDownloadTileDownloadLayer_DOWNLOAD_THREADS_MAX 8
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapLayerDownloadTileDownloadLayer, DOWNLOAD_THREADS_MAX, jint)

@implementation OrgMapsforgeMapLayerDownloadTileDownloadLayer

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                   withOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
      withOrgMapsforgeMapLayerDownloadTilesourceTileSource:(id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>)tileSource
                withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory {
  OrgMapsforgeMapLayerDownloadTileDownloadLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_(self, tileCache, mapViewPosition, tileSource, graphicFactory);
  return self;
}

- (void)drawWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                        withByte:(jbyte)zoomLevel
              withOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas
                  withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint {
  if (zoomLevel < [((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(self->tileSource_)) getZoomLevelMin] || zoomLevel > [self->tileSource_ getZoomLevelMax]) {
    return;
  }
  [super drawWithOrgMapsforgeCoreModelBoundingBox:boundingBox withByte:zoomLevel withOrgMapsforgeCoreGraphicsCanvas:canvas withOrgMapsforgeCoreModelPoint:topLeftPoint];
}

- (jlong)getCacheTimeToLive {
  return cacheTimeToLive_;
}

- (void)onDestroy {
  {
    IOSObjectArray *a__ = self->tileDownloadThreads_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMapsforgeMapLayerDownloadTileDownloadThread *tileDownloadThread = *b__++;
      [((OrgMapsforgeMapLayerDownloadTileDownloadThread *) nil_chk(tileDownloadThread)) interrupt];
    }
  }
  [super onDestroy];
}

- (void)onPause {
  {
    IOSObjectArray *a__ = self->tileDownloadThreads_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMapsforgeMapLayerDownloadTileDownloadThread *tileDownloadThread = *b__++;
      [((OrgMapsforgeMapLayerDownloadTileDownloadThread *) nil_chk(tileDownloadThread)) pause];
    }
  }
}

- (void)onResume {
  if (!started_) {
    [self start];
  }
  {
    IOSObjectArray *a__ = self->tileDownloadThreads_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMapsforgeMapLayerDownloadTileDownloadThread *tileDownloadThread = *b__++;
      [((OrgMapsforgeMapLayerDownloadTileDownloadThread *) nil_chk(tileDownloadThread)) proceed];
    }
  }
}

- (void)setCacheTimeToLiveWithLong:(jlong)ttl {
  cacheTimeToLive_ = ttl;
}

- (void)setDisplayModelWithOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  @synchronized(self) {
    [super setDisplayModelWithOrgMapsforgeMapModelDisplayModel:displayModel];
    jint numberOfDownloadThreads = JavaLangMath_minWithInt_withInt_([((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(tileSource_)) getParallelRequestsLimit], OrgMapsforgeMapLayerDownloadTileDownloadLayer_DOWNLOAD_THREADS_MAX);
    if (self->displayModel_ != nil) {
      JreStrongAssignAndConsume(&self->tileDownloadThreads_, [IOSObjectArray newArrayWithLength:numberOfDownloadThreads type:OrgMapsforgeMapLayerDownloadTileDownloadThread_class_()]);
      for (jint i = 0; i < numberOfDownloadThreads; ++i) {
        IOSObjectArray_SetAndConsume(nil_chk(self->tileDownloadThreads_), i, new_OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self->tileCache_TileDownloadLayer_, self->jobQueue_, self, self->graphicFactory_, self->displayModel_));
      }
    }
    else {
      if (self->tileDownloadThreads_ != nil) {
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(tileDownloadThreads_))->size_; ++i) {
          [((OrgMapsforgeMapLayerDownloadTileDownloadThread *) nil_chk(IOSObjectArray_Get(self->tileDownloadThreads_, i))) interrupt];
        }
      }
    }
  }
}

- (void)start {
  {
    IOSObjectArray *a__ = self->tileDownloadThreads_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    OrgMapsforgeMapLayerDownloadTileDownloadThread * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      OrgMapsforgeMapLayerDownloadTileDownloadThread *tileDownloadThread = *b__++;
      [((OrgMapsforgeMapLayerDownloadTileDownloadThread *) nil_chk(tileDownloadThread)) start];
    }
  }
  started_ = true;
}

- (OrgMapsforgeMapLayerDownloadDownloadJob *)createJobWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile {
  return create_OrgMapsforgeMapLayerDownloadDownloadJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_(tile, self->tileSource_);
}

- (jboolean)isTileStaleWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
              withOrgMapsforgeCoreGraphicsTileBitmap:(id<OrgMapsforgeCoreGraphicsTileBitmap>)bitmap {
  if ([((id<OrgMapsforgeCoreGraphicsTileBitmap>) nil_chk(bitmap)) isExpired]) return true;
  if (cacheTimeToLive_ == 0) return false;
  return (([bitmap getTimestamp] + cacheTimeToLive_) < JavaLangSystem_currentTimeMillis());
}

- (void)dealloc {
  RELEASE_(graphicFactory_);
  RELEASE_(tileCache_TileDownloadLayer_);
  RELEASE_(tileDownloadThreads_);
  RELEASE_(tileSource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x21, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapLayerDownloadDownloadJob;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeMapLayerDownloadTilesourceTileSource:withOrgMapsforgeCoreGraphicsGraphicFactory:);
  methods[1].selector = @selector(drawWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreGraphicsCanvas:withOrgMapsforgeCoreModelPoint:);
  methods[2].selector = @selector(getCacheTimeToLive);
  methods[3].selector = @selector(onDestroy);
  methods[4].selector = @selector(onPause);
  methods[5].selector = @selector(onResume);
  methods[6].selector = @selector(setCacheTimeToLiveWithLong:);
  methods[7].selector = @selector(setDisplayModelWithOrgMapsforgeMapModelDisplayModel:);
  methods[8].selector = @selector(start);
  methods[9].selector = @selector(createJobWithOrgMapsforgeCoreModelTile:);
  methods[10].selector = @selector(isTileStaleWithOrgMapsforgeCoreModelTile:withOrgMapsforgeCoreGraphicsTileBitmap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DOWNLOAD_THREADS_MAX", "I", .constantValue.asInt = OrgMapsforgeMapLayerDownloadTileDownloadLayer_DOWNLOAD_THREADS_MAX, 0x1a, -1, -1, -1, -1 },
    { "cacheTimeToLive_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "started_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileCache_TileDownloadLayer_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, 11, -1, -1, -1 },
    { "tileDownloadThreads_", "[LOrgMapsforgeMapLayerDownloadTileDownloadThread;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tileSource_", "LOrgMapsforgeMapLayerDownloadTilesourceTileSource;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeMapLayerDownloadTilesourceTileSource;LOrgMapsforgeCoreGraphicsGraphicFactory;", "draw", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreGraphicsCanvas;LOrgMapsforgeCoreModelPoint;", "setCacheTimeToLive", "J", "setDisplayModel", "LOrgMapsforgeMapModelDisplayModel;", "createJob", "LOrgMapsforgeCoreModelTile;", "isTileStale", "LOrgMapsforgeCoreModelTile;LOrgMapsforgeCoreGraphicsTileBitmap;", "tileCache", "Lorg/mapsforge/map/layer/TileLayer<Lorg/mapsforge/map/layer/download/DownloadJob;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTileDownloadLayer = { "TileDownloadLayer", "org.mapsforge.map.layer.download", ptrTable, methods, fields, 7, 0x1, 11, 7, -1, -1, -1, 12, -1 };
  return &_OrgMapsforgeMapLayerDownloadTileDownloadLayer;
}

@end

void OrgMapsforgeMapLayerDownloadTileDownloadLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_(OrgMapsforgeMapLayerDownloadTileDownloadLayer *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  OrgMapsforgeMapLayerTileLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeCoreGraphicsMatrix_withBoolean_(self, tileCache, mapViewPosition, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createMatrix], [((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(tileSource)) hasAlpha]);
  self->cacheTimeToLive_ = 0;
  JreStrongAssign(&self->tileCache_TileDownloadLayer_, tileCache);
  JreStrongAssign(&self->tileSource_, tileSource);
  self->cacheTimeToLive_ = [tileSource getDefaultTimeToLive];
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
}

OrgMapsforgeMapLayerDownloadTileDownloadLayer *new_OrgMapsforgeMapLayerDownloadTileDownloadLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadTileDownloadLayer, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_, tileCache, mapViewPosition, tileSource, graphicFactory)
}

OrgMapsforgeMapLayerDownloadTileDownloadLayer *create_OrgMapsforgeMapLayerDownloadTileDownloadLayer_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadTileDownloadLayer, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_withOrgMapsforgeCoreGraphicsGraphicFactory_, tileCache, mapViewPosition, tileSource, graphicFactory)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTileDownloadLayer)
