//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/DownloadJob.java
//

#include "J2ObjC_source.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/map/layer/download/DownloadJob.h"
#include "org/mapsforge/map/layer/download/tilesource/TileSource.h"
#include "org/mapsforge/map/layer/queue/Job.h"

@implementation OrgMapsforgeMapLayerDownloadDownloadJob

- (instancetype)initWithOrgMapsforgeCoreModelTile:(OrgMapsforgeCoreModelTile *)tile
withOrgMapsforgeMapLayerDownloadTilesourceTileSource:(id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>)tileSource {
  OrgMapsforgeMapLayerDownloadDownloadJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_(self, tile, tileSource);
  return self;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return true;
  }
  else if (![super isEqual:obj]) {
    return false;
  }
  else if (!([obj isKindOfClass:[OrgMapsforgeMapLayerDownloadDownloadJob class]])) {
    return false;
  }
  OrgMapsforgeMapLayerDownloadDownloadJob *other = (OrgMapsforgeMapLayerDownloadDownloadJob *) cast_chk(obj, [OrgMapsforgeMapLayerDownloadDownloadJob class]);
  if (![((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(self->tileSource_)) isEqual:((OrgMapsforgeMapLayerDownloadDownloadJob *) nil_chk(other))->tileSource_]) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = ((jint) [super hash]);
  result = prime * result + ((jint) [((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(self->tileSource_)) hash]);
  return result;
}

- (void)dealloc {
  RELEASE_(tileSource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeCoreModelTile:withOrgMapsforgeMapLayerDownloadTilesourceTileSource:);
  methods[1].selector = @selector(isEqual:);
  methods[2].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tileSource_", "LOrgMapsforgeMapLayerDownloadTilesourceTileSource;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeCoreModelTile;LOrgMapsforgeMapLayerDownloadTilesourceTileSource;", "equals", "LNSObject;", "hashCode" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadDownloadJob = { "DownloadJob", "org.mapsforge.map.layer.download", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadDownloadJob;
}

@end

void OrgMapsforgeMapLayerDownloadDownloadJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_(OrgMapsforgeMapLayerDownloadDownloadJob *self, OrgMapsforgeCoreModelTile *tile, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource) {
  OrgMapsforgeMapLayerQueueJob_initWithOrgMapsforgeCoreModelTile_withBoolean_(self, tile, [((id<OrgMapsforgeMapLayerDownloadTilesourceTileSource>) nil_chk(tileSource)) hasAlpha]);
  JreStrongAssign(&self->tileSource_, tileSource);
}

OrgMapsforgeMapLayerDownloadDownloadJob *new_OrgMapsforgeMapLayerDownloadDownloadJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_(OrgMapsforgeCoreModelTile *tile, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadDownloadJob, initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_, tile, tileSource)
}

OrgMapsforgeMapLayerDownloadDownloadJob *create_OrgMapsforgeMapLayerDownloadDownloadJob_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_(OrgMapsforgeCoreModelTile *tile, id<OrgMapsforgeMapLayerDownloadTilesourceTileSource> tileSource) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadDownloadJob, initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeMapLayerDownloadTilesourceTileSource_, tile, tileSource)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadDownloadJob)
