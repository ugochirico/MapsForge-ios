//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/layer/download/TileDownloadThread.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/util/logging/Level.h"
#include "java/util/logging/Logger.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/graphics/TileBitmap.h"
#include "org/mapsforge/map/layer/Layer.h"
#include "org/mapsforge/map/layer/cache/TileCache.h"
#include "org/mapsforge/map/layer/download/DownloadJob.h"
#include "org/mapsforge/map/layer/download/TileDownloadThread.h"
#include "org/mapsforge/map/layer/download/TileDownloader.h"
#include "org/mapsforge/map/layer/queue/JobQueue.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/util/PausableThread.h"

@interface OrgMapsforgeMapLayerDownloadTileDownloadThread () {
 @public
  OrgMapsforgeMapModelDisplayModel *displayModel_;
  id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory_;
  OrgMapsforgeMapLayerQueueJobQueue *jobQueue_;
  OrgMapsforgeMapLayerLayer *layer_;
  id<OrgMapsforgeMapLayerCacheTileCache> tileCache_;
}

- (void)downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob:(OrgMapsforgeMapLayerDownloadDownloadJob *)downloadJob;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadThread, displayModel_, OrgMapsforgeMapModelDisplayModel *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadThread, graphicFactory_, id<OrgMapsforgeCoreGraphicsGraphicFactory>)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadThread, jobQueue_, OrgMapsforgeMapLayerQueueJobQueue *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadThread, layer_, OrgMapsforgeMapLayerLayer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapLayerDownloadTileDownloadThread, tileCache_, id<OrgMapsforgeMapLayerCacheTileCache>)

inline JavaUtilLoggingLogger *OrgMapsforgeMapLayerDownloadTileDownloadThread_get_LOGGER();
static JavaUtilLoggingLogger *OrgMapsforgeMapLayerDownloadTileDownloadThread_LOGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgMapsforgeMapLayerDownloadTileDownloadThread, LOGGER, JavaUtilLoggingLogger *)

__attribute__((unused)) static void OrgMapsforgeMapLayerDownloadTileDownloadThread_downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob_(OrgMapsforgeMapLayerDownloadTileDownloadThread *self, OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob);

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapLayerDownloadTileDownloadThread)

@implementation OrgMapsforgeMapLayerDownloadTileDownloadThread

- (instancetype)initWithOrgMapsforgeMapLayerCacheTileCache:(id<OrgMapsforgeMapLayerCacheTileCache>)tileCache
                     withOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue
                             withOrgMapsforgeMapLayerLayer:(OrgMapsforgeMapLayerLayer *)layer
                withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                      withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel {
  OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(self, tileCache, jobQueue, layer, graphicFactory, displayModel);
  return self;
}

- (void)setJobQueueWithOrgMapsforgeMapLayerQueueJobQueue:(OrgMapsforgeMapLayerQueueJobQueue *)jobQueue {
  JreStrongAssign(&self->jobQueue_, jobQueue);
}

- (void)doWork {
  OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob = ((OrgMapsforgeMapLayerDownloadDownloadJob *) [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) get]);
  @try {
    if (![((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) containsKeyWithOrgMapsforgeMapLayerQueueJob:downloadJob]) {
      OrgMapsforgeMapLayerDownloadTileDownloadThread_downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob_(self, downloadJob);
    }
  }
  @catch (JavaIoIOException *e) {
    [((JavaUtilLoggingLogger *) nil_chk(OrgMapsforgeMapLayerDownloadTileDownloadThread_LOGGER)) logWithJavaUtilLoggingLevel:JreLoadStatic(JavaUtilLoggingLevel, SEVERE) withNSString:[e getMessage] withNSException:e];
  }
  @finally {
    [((OrgMapsforgeMapLayerQueueJobQueue *) nil_chk(self->jobQueue_)) removeWithOrgMapsforgeMapLayerQueueJob:downloadJob];
  }
}

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority {
  return JreLoadEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL);
}

- (jboolean)hasWork {
  return true;
}

- (void)downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob:(OrgMapsforgeMapLayerDownloadDownloadJob *)downloadJob {
  OrgMapsforgeMapLayerDownloadTileDownloadThread_downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob_(self, downloadJob);
}

- (void)dealloc {
  RELEASE_(displayModel_);
  RELEASE_(graphicFactory_);
  RELEASE_(jobQueue_);
  RELEASE_(layer_);
  RELEASE_(tileCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x4, -1, -1, 5, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, 8, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapLayerCacheTileCache:withOrgMapsforgeMapLayerQueueJobQueue:withOrgMapsforgeMapLayerLayer:withOrgMapsforgeCoreGraphicsGraphicFactory:withOrgMapsforgeMapModelDisplayModel:);
  methods[1].selector = @selector(setJobQueueWithOrgMapsforgeMapLayerQueueJobQueue:);
  methods[2].selector = @selector(doWork);
  methods[3].selector = @selector(getThreadPriority);
  methods[4].selector = @selector(hasWork);
  methods[5].selector = @selector(downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOGGER", "LJavaUtilLoggingLogger;", .constantValue.asLong = 0, 0x1a, -1, 9, -1, -1 },
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jobQueue_", "LOrgMapsforgeMapLayerQueueJobQueue;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "layer_", "LOrgMapsforgeMapLayerLayer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "tileCache_", "LOrgMapsforgeMapLayerCacheTileCache;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapLayerCacheTileCache;LOrgMapsforgeMapLayerQueueJobQueue;LOrgMapsforgeMapLayerLayer;LOrgMapsforgeCoreGraphicsGraphicFactory;LOrgMapsforgeMapModelDisplayModel;", "(Lorg/mapsforge/map/layer/cache/TileCache;Lorg/mapsforge/map/layer/queue/JobQueue<Lorg/mapsforge/map/layer/download/DownloadJob;>;Lorg/mapsforge/map/layer/Layer;Lorg/mapsforge/core/graphics/GraphicFactory;Lorg/mapsforge/map/model/DisplayModel;)V", "setJobQueue", "LOrgMapsforgeMapLayerQueueJobQueue;", "(Lorg/mapsforge/map/layer/queue/JobQueue<Lorg/mapsforge/map/layer/download/DownloadJob;>;)V", "LJavaLangInterruptedException;", "downloadTile", "LOrgMapsforgeMapLayerDownloadDownloadJob;", "LJavaIoIOException;", &OrgMapsforgeMapLayerDownloadTileDownloadThread_LOGGER, "Lorg/mapsforge/map/layer/queue/JobQueue<Lorg/mapsforge/map/layer/download/DownloadJob;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapLayerDownloadTileDownloadThread = { "TileDownloadThread", "org.mapsforge.map.layer.download", ptrTable, methods, fields, 7, 0x0, 6, 6, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapLayerDownloadTileDownloadThread;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapLayerDownloadTileDownloadThread class]) {
    JreStrongAssign(&OrgMapsforgeMapLayerDownloadTileDownloadThread_LOGGER, JavaUtilLoggingLogger_getLoggerWithNSString_([OrgMapsforgeMapLayerDownloadTileDownloadThread_class_() getName]));
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapLayerDownloadTileDownloadThread)
  }
}

@end

void OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(OrgMapsforgeMapLayerDownloadTileDownloadThread *self, id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  OrgMapsforgeMapUtilPausableThread_init(self);
  JreStrongAssign(&self->tileCache_, tileCache);
  JreStrongAssign(&self->jobQueue_, jobQueue);
  JreStrongAssign(&self->layer_, layer);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssign(&self->displayModel_, displayModel);
}

OrgMapsforgeMapLayerDownloadTileDownloadThread *new_OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapLayerDownloadTileDownloadThread, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_, tileCache, jobQueue, layer, graphicFactory, displayModel)
}

OrgMapsforgeMapLayerDownloadTileDownloadThread *create_OrgMapsforgeMapLayerDownloadTileDownloadThread_initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_(id<OrgMapsforgeMapLayerCacheTileCache> tileCache, OrgMapsforgeMapLayerQueueJobQueue *jobQueue, OrgMapsforgeMapLayerLayer *layer, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, OrgMapsforgeMapModelDisplayModel *displayModel) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapLayerDownloadTileDownloadThread, initWithOrgMapsforgeMapLayerCacheTileCache_withOrgMapsforgeMapLayerQueueJobQueue_withOrgMapsforgeMapLayerLayer_withOrgMapsforgeCoreGraphicsGraphicFactory_withOrgMapsforgeMapModelDisplayModel_, tileCache, jobQueue, layer, graphicFactory, displayModel)
}

void OrgMapsforgeMapLayerDownloadTileDownloadThread_downloadTileWithOrgMapsforgeMapLayerDownloadDownloadJob_(OrgMapsforgeMapLayerDownloadTileDownloadThread *self, OrgMapsforgeMapLayerDownloadDownloadJob *downloadJob) {
  OrgMapsforgeMapLayerDownloadTileDownloader *tileDownloader = create_OrgMapsforgeMapLayerDownloadTileDownloader_initWithOrgMapsforgeMapLayerDownloadDownloadJob_withOrgMapsforgeCoreGraphicsGraphicFactory_(downloadJob, self->graphicFactory_);
  id<OrgMapsforgeCoreGraphicsTileBitmap> bitmap = [tileDownloader downloadImage];
  if (![self isInterrupted] && bitmap != nil) {
    [bitmap scaleToWithInt:[((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize] withInt:[self->displayModel_ getTileSize]];
    [((id<OrgMapsforgeMapLayerCacheTileCache>) nil_chk(self->tileCache_)) putWithOrgMapsforgeMapLayerQueueJob:downloadJob withOrgMapsforgeCoreGraphicsTileBitmap:bitmap];
    [((OrgMapsforgeMapLayerLayer *) nil_chk(self->layer_)) requestRedraw];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapLayerDownloadTileDownloadThread)
