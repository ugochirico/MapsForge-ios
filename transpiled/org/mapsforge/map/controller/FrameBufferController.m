//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/controller/FrameBufferController.java
//

#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "org/mapsforge/core/model/Dimension.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/MapPosition.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/controller/FrameBufferController.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/FrameBufferModel.h"
#include "org/mapsforge/map/model/MapViewDimension.h"
#include "org/mapsforge/map/model/MapViewPosition.h"
#include "org/mapsforge/map/model/Model.h"
#include "org/mapsforge/map/view/FrameBuffer.h"

@interface OrgMapsforgeMapControllerFrameBufferController () {
 @public
  OrgMapsforgeMapViewFrameBuffer *frameBuffer_;
  OrgMapsforgeCoreModelDimension *lastMapViewDimension_;
  jdouble lastOverdrawFactor_;
  OrgMapsforgeMapModelModel *model_;
}

+ (OrgMapsforgeCoreModelDimension *)calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                                                         withDouble:(jdouble)overdrawFactor;

- (instancetype)initWithOrgMapsforgeMapViewFrameBuffer:(OrgMapsforgeMapViewFrameBuffer *)frameBuffer
                         withOrgMapsforgeMapModelModel:(OrgMapsforgeMapModelModel *)model;

- (void)adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition:(OrgMapsforgeCoreModelMapPosition *)mapPositionFrameBuffer
                                 withOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                         withDouble:(jdouble)scaleFactor
                                   withOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)pivot;

- (jboolean)dimensionChangeNeededWithOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                         withDouble:(jdouble)overdrawFactor;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapControllerFrameBufferController, frameBuffer_, OrgMapsforgeMapViewFrameBuffer *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapControllerFrameBufferController, lastMapViewDimension_, OrgMapsforgeCoreModelDimension *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapControllerFrameBufferController, model_, OrgMapsforgeMapModelModel *)

inline jfloat OrgMapsforgeMapControllerFrameBufferController_get_maxAspectRatio();
inline jfloat OrgMapsforgeMapControllerFrameBufferController_set_maxAspectRatio(jfloat value);
inline jfloat *OrgMapsforgeMapControllerFrameBufferController_getRef_maxAspectRatio();
static jfloat OrgMapsforgeMapControllerFrameBufferController_maxAspectRatio = 2;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgMapsforgeMapControllerFrameBufferController, maxAspectRatio, jfloat)

inline jboolean OrgMapsforgeMapControllerFrameBufferController_get_useSquareFrameBuffer();
inline jboolean OrgMapsforgeMapControllerFrameBufferController_set_useSquareFrameBuffer(jboolean value);
inline jboolean *OrgMapsforgeMapControllerFrameBufferController_getRef_useSquareFrameBuffer();
static jboolean OrgMapsforgeMapControllerFrameBufferController_useSquareFrameBuffer = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(OrgMapsforgeMapControllerFrameBufferController, useSquareFrameBuffer, jboolean)

__attribute__((unused)) static OrgMapsforgeCoreModelDimension *OrgMapsforgeMapControllerFrameBufferController_calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension_withDouble_(OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble overdrawFactor);

__attribute__((unused)) static void OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model);

__attribute__((unused)) static OrgMapsforgeMapControllerFrameBufferController *new_OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapControllerFrameBufferController *create_OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model);

__attribute__((unused)) static void OrgMapsforgeMapControllerFrameBufferController_adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withDouble_withOrgMapsforgeCoreModelLatLong_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeCoreModelMapPosition *mapPositionFrameBuffer, OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble scaleFactor, OrgMapsforgeCoreModelLatLong *pivot);

__attribute__((unused)) static jboolean OrgMapsforgeMapControllerFrameBufferController_dimensionChangeNeededWithOrgMapsforgeCoreModelDimension_withDouble_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble overdrawFactor);

@implementation OrgMapsforgeMapControllerFrameBufferController

+ (OrgMapsforgeMapControllerFrameBufferController *)createWithOrgMapsforgeMapViewFrameBuffer:(OrgMapsforgeMapViewFrameBuffer *)frameBuffer
                                                               withOrgMapsforgeMapModelModel:(OrgMapsforgeMapModelModel *)model {
  return OrgMapsforgeMapControllerFrameBufferController_createWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(frameBuffer, model);
}

+ (OrgMapsforgeCoreModelDimension *)calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                                                         withDouble:(jdouble)overdrawFactor {
  return OrgMapsforgeMapControllerFrameBufferController_calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension_withDouble_(mapViewDimension, overdrawFactor);
}

- (instancetype)initWithOrgMapsforgeMapViewFrameBuffer:(OrgMapsforgeMapViewFrameBuffer *)frameBuffer
                         withOrgMapsforgeMapModelModel:(OrgMapsforgeMapModelModel *)model {
  OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(self, frameBuffer, model);
  return self;
}

- (void)destroy {
  [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(((OrgMapsforgeMapModelModel *) nil_chk(self->model_))->mapViewPosition_)) removeObserverWithOrgMapsforgeMapModelCommonObserver:self];
  [((OrgMapsforgeMapModelMapViewDimension *) nil_chk(self->model_->mapViewDimension_)) removeObserverWithOrgMapsforgeMapModelCommonObserver:self];
  [((OrgMapsforgeMapModelFrameBufferModel *) nil_chk(self->model_->frameBufferModel_)) removeObserverWithOrgMapsforgeMapModelCommonObserver:self];
}

- (void)onChange {
  OrgMapsforgeCoreModelDimension *mapViewDimension = [((OrgMapsforgeMapModelMapViewDimension *) nil_chk(((OrgMapsforgeMapModelModel *) nil_chk(self->model_))->mapViewDimension_)) getDimension];
  if (mapViewDimension == nil) {
    return;
  }
  jdouble overdrawFactor = [((OrgMapsforgeMapModelFrameBufferModel *) nil_chk(self->model_->frameBufferModel_)) getOverdrawFactor];
  if (OrgMapsforgeMapControllerFrameBufferController_dimensionChangeNeededWithOrgMapsforgeCoreModelDimension_withDouble_(self, mapViewDimension, overdrawFactor)) {
    OrgMapsforgeCoreModelDimension *newDimension = OrgMapsforgeMapControllerFrameBufferController_calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension_withDouble_(mapViewDimension, overdrawFactor);
    if (!OrgMapsforgeMapControllerFrameBufferController_useSquareFrameBuffer || [((OrgMapsforgeMapViewFrameBuffer *) nil_chk(frameBuffer_)) getDimension] == nil || ((OrgMapsforgeCoreModelDimension *) nil_chk(newDimension))->width_ > ((OrgMapsforgeCoreModelDimension *) nil_chk([frameBuffer_ getDimension]))->width_ || newDimension->height_ > ((OrgMapsforgeCoreModelDimension *) nil_chk([frameBuffer_ getDimension]))->height_) {
      [((OrgMapsforgeMapViewFrameBuffer *) nil_chk(self->frameBuffer_)) setDimensionWithOrgMapsforgeCoreModelDimension:newDimension];
    }
    JreStrongAssign(&self->lastMapViewDimension_, mapViewDimension);
    self->lastOverdrawFactor_ = overdrawFactor;
  }
  @synchronized(self->model_->mapViewPosition_) {
    @synchronized(self->frameBuffer_) {
      OrgMapsforgeCoreModelMapPosition *mapPositionFrameBuffer = [self->model_->frameBufferModel_ getMapPosition];
      if (mapPositionFrameBuffer != nil) {
        jdouble scaleFactor = [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(self->model_->mapViewPosition_)) getScaleFactor];
        OrgMapsforgeCoreModelLatLong *pivot = [self->model_->mapViewPosition_ getPivot];
        OrgMapsforgeMapControllerFrameBufferController_adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withDouble_withOrgMapsforgeCoreModelLatLong_(self, mapPositionFrameBuffer, mapViewDimension, scaleFactor, pivot);
      }
    }
  }
}

- (void)adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition:(OrgMapsforgeCoreModelMapPosition *)mapPositionFrameBuffer
                                 withOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                         withDouble:(jdouble)scaleFactor
                                   withOrgMapsforgeCoreModelLatLong:(OrgMapsforgeCoreModelLatLong *)pivot {
  OrgMapsforgeMapControllerFrameBufferController_adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withDouble_withOrgMapsforgeCoreModelLatLong_(self, mapPositionFrameBuffer, mapViewDimension, scaleFactor, pivot);
}

- (jboolean)dimensionChangeNeededWithOrgMapsforgeCoreModelDimension:(OrgMapsforgeCoreModelDimension *)mapViewDimension
                                                         withDouble:(jdouble)overdrawFactor {
  return OrgMapsforgeMapControllerFrameBufferController_dimensionChangeNeededWithOrgMapsforgeCoreModelDimension_withDouble_(self, mapViewDimension, overdrawFactor);
}

- (void)dealloc {
  RELEASE_(frameBuffer_);
  RELEASE_(lastMapViewDimension_);
  RELEASE_(model_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgMapsforgeMapControllerFrameBufferController;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeCoreModelDimension;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(createWithOrgMapsforgeMapViewFrameBuffer:withOrgMapsforgeMapModelModel:);
  methods[1].selector = @selector(calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension:withDouble:);
  methods[2].selector = @selector(initWithOrgMapsforgeMapViewFrameBuffer:withOrgMapsforgeMapModelModel:);
  methods[3].selector = @selector(destroy);
  methods[4].selector = @selector(onChange);
  methods[5].selector = @selector(adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition:withOrgMapsforgeCoreModelDimension:withDouble:withOrgMapsforgeCoreModelLatLong:);
  methods[6].selector = @selector(dimensionChangeNeededWithOrgMapsforgeCoreModelDimension:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "maxAspectRatio", "F", .constantValue.asLong = 0, 0xa, -1, 7, -1, -1 },
    { "useSquareFrameBuffer", "Z", .constantValue.asLong = 0, 0xa, -1, 8, -1, -1 },
    { "frameBuffer_", "LOrgMapsforgeMapViewFrameBuffer;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lastMapViewDimension_", "LOrgMapsforgeCoreModelDimension;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lastOverdrawFactor_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "model_", "LOrgMapsforgeMapModelModel;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "create", "LOrgMapsforgeMapViewFrameBuffer;LOrgMapsforgeMapModelModel;", "calculateFrameBufferDimension", "LOrgMapsforgeCoreModelDimension;D", "adjustFrameBufferMatrix", "LOrgMapsforgeCoreModelMapPosition;LOrgMapsforgeCoreModelDimension;DLOrgMapsforgeCoreModelLatLong;", "dimensionChangeNeeded", &OrgMapsforgeMapControllerFrameBufferController_maxAspectRatio, &OrgMapsforgeMapControllerFrameBufferController_useSquareFrameBuffer };
  static const J2ObjcClassInfo _OrgMapsforgeMapControllerFrameBufferController = { "FrameBufferController", "org.mapsforge.map.controller", ptrTable, methods, fields, 7, 0x11, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapControllerFrameBufferController;
}

@end

OrgMapsforgeMapControllerFrameBufferController *OrgMapsforgeMapControllerFrameBufferController_createWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model) {
  OrgMapsforgeMapControllerFrameBufferController_initialize();
  OrgMapsforgeMapControllerFrameBufferController *frameBufferController = create_OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(frameBuffer, model);
  [((OrgMapsforgeMapModelFrameBufferModel *) nil_chk(((OrgMapsforgeMapModelModel *) nil_chk(model))->frameBufferModel_)) addObserverWithOrgMapsforgeMapModelCommonObserver:frameBufferController];
  [((OrgMapsforgeMapModelMapViewDimension *) nil_chk(model->mapViewDimension_)) addObserverWithOrgMapsforgeMapModelCommonObserver:frameBufferController];
  [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(model->mapViewPosition_)) addObserverWithOrgMapsforgeMapModelCommonObserver:frameBufferController];
  [((OrgMapsforgeMapModelDisplayModel *) nil_chk(model->displayModel_)) addObserverWithOrgMapsforgeMapModelCommonObserver:frameBufferController];
  return frameBufferController;
}

OrgMapsforgeCoreModelDimension *OrgMapsforgeMapControllerFrameBufferController_calculateFrameBufferDimensionWithOrgMapsforgeCoreModelDimension_withDouble_(OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble overdrawFactor) {
  OrgMapsforgeMapControllerFrameBufferController_initialize();
  jint width = JreFpToInt((((OrgMapsforgeCoreModelDimension *) nil_chk(mapViewDimension))->width_ * overdrawFactor));
  jint height = JreFpToInt((mapViewDimension->height_ * overdrawFactor));
  if (OrgMapsforgeMapControllerFrameBufferController_useSquareFrameBuffer) {
    jfloat aspectRatio = ((jfloat) mapViewDimension->width_) / mapViewDimension->height_;
    if (aspectRatio < OrgMapsforgeMapControllerFrameBufferController_maxAspectRatio && aspectRatio > OrgMapsforgeMapControllerFrameBufferController_maxAspectRatio / 1) {
      width = JavaLangMath_maxWithInt_withInt_(width, height);
      height = width;
    }
  }
  return create_OrgMapsforgeCoreModelDimension_initWithInt_withInt_(width, height);
}

void OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model) {
  NSObject_init(self);
  JreStrongAssign(&self->frameBuffer_, frameBuffer);
  JreStrongAssign(&self->model_, model);
}

OrgMapsforgeMapControllerFrameBufferController *new_OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapControllerFrameBufferController, initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_, frameBuffer, model)
}

OrgMapsforgeMapControllerFrameBufferController *create_OrgMapsforgeMapControllerFrameBufferController_initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_(OrgMapsforgeMapViewFrameBuffer *frameBuffer, OrgMapsforgeMapModelModel *model) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapControllerFrameBufferController, initWithOrgMapsforgeMapViewFrameBuffer_withOrgMapsforgeMapModelModel_, frameBuffer, model)
}

void OrgMapsforgeMapControllerFrameBufferController_adjustFrameBufferMatrixWithOrgMapsforgeCoreModelMapPosition_withOrgMapsforgeCoreModelDimension_withDouble_withOrgMapsforgeCoreModelLatLong_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeCoreModelMapPosition *mapPositionFrameBuffer, OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble scaleFactor, OrgMapsforgeCoreModelLatLong *pivot) {
  OrgMapsforgeCoreModelMapPosition *mapViewPosition = [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(((OrgMapsforgeMapModelModel *) nil_chk(self->model_))->mapViewPosition_)) getMapPosition];
  jlong mapSize = OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(((OrgMapsforgeCoreModelMapPosition *) nil_chk(mapPositionFrameBuffer))->zoomLevel_, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->model_->displayModel_)) getTileSize]);
  OrgMapsforgeCoreModelPoint *pointFrameBuffer = OrgMapsforgeCoreUtilMercatorProjection_getPixelWithOrgMapsforgeCoreModelLatLong_withLong_(mapPositionFrameBuffer->latLong_, mapSize);
  OrgMapsforgeCoreModelPoint *pointMapPosition = OrgMapsforgeCoreUtilMercatorProjection_getPixelWithOrgMapsforgeCoreModelLatLong_withLong_(((OrgMapsforgeCoreModelMapPosition *) nil_chk(mapViewPosition))->latLong_, mapSize);
  jdouble diffX = ((OrgMapsforgeCoreModelPoint *) nil_chk(pointFrameBuffer))->x_ - ((OrgMapsforgeCoreModelPoint *) nil_chk(pointMapPosition))->x_;
  jdouble diffY = pointFrameBuffer->y_ - pointMapPosition->y_;
  jdouble pivotDistanceX = 0.0;
  jdouble pivotDistanceY = 0.0;
  if (pivot != nil) {
    OrgMapsforgeCoreModelPoint *pivotXY = OrgMapsforgeCoreUtilMercatorProjection_getPixelWithOrgMapsforgeCoreModelLatLong_withLong_(pivot, mapSize);
    pivotDistanceX = ((OrgMapsforgeCoreModelPoint *) nil_chk(pivotXY))->x_ - pointFrameBuffer->x_;
    pivotDistanceY = pivotXY->y_ - pointFrameBuffer->y_;
  }
  jfloat currentScaleFactor = (jfloat) (scaleFactor / JavaLangMath_powWithDouble_withDouble_(2, mapPositionFrameBuffer->zoomLevel_));
  [((OrgMapsforgeMapViewFrameBuffer *) nil_chk(self->frameBuffer_)) adjustMatrixWithFloat:(jfloat) diffX withFloat:(jfloat) diffY withFloat:currentScaleFactor withOrgMapsforgeCoreModelDimension:mapViewDimension withFloat:(jfloat) pivotDistanceX withFloat:(jfloat) pivotDistanceY];
}

jboolean OrgMapsforgeMapControllerFrameBufferController_dimensionChangeNeededWithOrgMapsforgeCoreModelDimension_withDouble_(OrgMapsforgeMapControllerFrameBufferController *self, OrgMapsforgeCoreModelDimension *mapViewDimension, jdouble overdrawFactor) {
  if (JavaLangDouble_compareWithDouble_withDouble_(overdrawFactor, self->lastOverdrawFactor_) != 0) {
    return true;
  }
  else if (![((OrgMapsforgeCoreModelDimension *) nil_chk(mapViewDimension)) isEqual:self->lastMapViewDimension_]) {
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapControllerFrameBufferController)
