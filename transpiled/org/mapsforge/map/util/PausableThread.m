//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/util/PausableThread.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"
#include "org/mapsforge/map/util/PausableThread.h"

@interface OrgMapsforgeMapUtilPausableThread () {
 @public
  jboolean pausing_;
  jboolean shouldPause_;
}

@end

__attribute__((unused)) static jboolean OrgMapsforgeMapUtilPausableThread_isPausing(OrgMapsforgeMapUtilPausableThread *self);

__attribute__((unused)) static void OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(OrgMapsforgeMapUtilPausableThread_ThreadPriority *self, jint priority, NSString *__name, jint __ordinal);

@implementation OrgMapsforgeMapUtilPausableThread

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapUtilPausableThread_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)awaitPausing {
  @synchronized(self) {
    while (![self isInterrupted] && !OrgMapsforgeMapUtilPausableThread_isPausing(self)) {
      @try {
        [self java_waitWithLong:100];
      }
      @catch (JavaLangInterruptedException *e) {
        [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
      }
    }
  }
}

- (void)interrupt {
  @synchronized(self) {
    [super interrupt];
  }
}

- (jboolean)isPausing {
  return OrgMapsforgeMapUtilPausableThread_isPausing(self);
}

- (void)pause {
  @synchronized(self) {
    if (!self->shouldPause_) {
      self->shouldPause_ = true;
      [self java_notify];
    }
  }
}

- (void)proceed {
  @synchronized(self) {
    if (self->shouldPause_) {
      self->shouldPause_ = false;
      self->pausing_ = false;
      [self java_notify];
    }
  }
}

- (void)run {
  [self setNameWithNSString:[[self java_getClass] getSimpleName]];
  [self setPriorityWithInt:((OrgMapsforgeMapUtilPausableThread_ThreadPriority *) nil_chk([self getThreadPriority]))->priority_];
  while (![self isInterrupted]) {
    @synchronized(self) {
      while (![self isInterrupted] && (self->shouldPause_ || ![self hasWork])) {
        @try {
          if (self->shouldPause_) {
            self->pausing_ = true;
          }
          [self java_wait];
        }
        @catch (JavaLangInterruptedException *e) {
          [self interrupt];
        }
      }
    }
    if ([self isInterrupted]) {
      break;
    }
    @try {
      [self doWork];
    }
    @catch (JavaLangInterruptedException *e) {
      [self interrupt];
    }
  }
  [self afterRun];
}

- (void)afterRun {
}

- (void)doWork {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)getThreadPriority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasWork {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x31, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, 0, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(awaitPausing);
  methods[2].selector = @selector(interrupt);
  methods[3].selector = @selector(isPausing);
  methods[4].selector = @selector(pause);
  methods[5].selector = @selector(proceed);
  methods[6].selector = @selector(run);
  methods[7].selector = @selector(afterRun);
  methods[8].selector = @selector(doWork);
  methods[9].selector = @selector(getThreadPriority);
  methods[10].selector = @selector(hasWork);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pausing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "shouldPause_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangInterruptedException;", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapUtilPausableThread = { "PausableThread", "org.mapsforge.map.util", ptrTable, methods, fields, 7, 0x401, 11, 2, -1, 1, -1, -1, -1 };
  return &_OrgMapsforgeMapUtilPausableThread;
}

@end

void OrgMapsforgeMapUtilPausableThread_init(OrgMapsforgeMapUtilPausableThread *self) {
  JavaLangThread_init(self);
}

jboolean OrgMapsforgeMapUtilPausableThread_isPausing(OrgMapsforgeMapUtilPausableThread *self) {
  @synchronized(self) {
    return self->pausing_;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapUtilPausableThread)

J2OBJC_INITIALIZED_DEFN(OrgMapsforgeMapUtilPausableThread_ThreadPriority)

OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_values_[5];

@implementation OrgMapsforgeMapUtilPausableThread_ThreadPriority

+ (IOSObjectArray *)values {
  return OrgMapsforgeMapUtilPausableThread_ThreadPriority_values();
}

+ (OrgMapsforgeMapUtilPausableThread_ThreadPriority *)valueOfWithNSString:(NSString *)name {
  return OrgMapsforgeMapUtilPausableThread_ThreadPriority_valueOfWithNSString_(name);
}

- (id)copyWithZone:(NSZone *)zone {
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ABOVE_NORMAL", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "BELOW_NORMAL", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "HIGHEST", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "LOWEST", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "NORMAL", "LOrgMapsforgeMapUtilPausableThread_ThreadPriority;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "priority_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, ABOVE_NORMAL), &JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL), &JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, HIGHEST), &JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, LOWEST), &JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, NORMAL), "LOrgMapsforgeMapUtilPausableThread;", "Ljava/lang/Enum<Lorg/mapsforge/map/util/PausableThread$ThreadPriority;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapUtilPausableThread_ThreadPriority = { "ThreadPriority", "org.mapsforge.map.util", ptrTable, methods, fields, 7, 0x401c, 2, 6, 7, -1, -1, 8, -1 };
  return &_OrgMapsforgeMapUtilPausableThread_ThreadPriority;
}

+ (void)initialize {
  if (self == [OrgMapsforgeMapUtilPausableThread_ThreadPriority class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, ABOVE_NORMAL) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(e, (JavaLangThread_NORM_PRIORITY + JavaLangThread_MAX_PRIORITY) / 2, @"ABOVE_NORMAL", 0);
    (JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, BELOW_NORMAL) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(e, (JavaLangThread_NORM_PRIORITY + JavaLangThread_MIN_PRIORITY) / 2, @"BELOW_NORMAL", 1);
    (JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, HIGHEST) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(e, JavaLangThread_MAX_PRIORITY, @"HIGHEST", 2);
    (JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, LOWEST) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(e, JavaLangThread_MIN_PRIORITY, @"LOWEST", 3);
    (JreEnum(OrgMapsforgeMapUtilPausableThread_ThreadPriority, NORMAL) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(e, JavaLangThread_NORM_PRIORITY, @"NORMAL", 4);
    J2OBJC_SET_INITIALIZED(OrgMapsforgeMapUtilPausableThread_ThreadPriority)
  }
}

@end

void OrgMapsforgeMapUtilPausableThread_ThreadPriority_initWithInt_withNSString_withInt_(OrgMapsforgeMapUtilPausableThread_ThreadPriority *self, jint priority, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  if (priority < JavaLangThread_MIN_PRIORITY || priority > JavaLangThread_MAX_PRIORITY) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"invalid priority: ", priority));
  }
  self->priority_ = priority;
}

IOSObjectArray *OrgMapsforgeMapUtilPausableThread_ThreadPriority_values() {
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_initialize();
  return [IOSObjectArray arrayWithObjects:OrgMapsforgeMapUtilPausableThread_ThreadPriority_values_ count:5 type:OrgMapsforgeMapUtilPausableThread_ThreadPriority_class_()];
}

OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_valueOfWithNSString_(NSString *name) {
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_initialize();
  for (int i = 0; i < 5; i++) {
    OrgMapsforgeMapUtilPausableThread_ThreadPriority *e = OrgMapsforgeMapUtilPausableThread_ThreadPriority_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgMapsforgeMapUtilPausableThread_ThreadPriority *OrgMapsforgeMapUtilPausableThread_ThreadPriority_fromOrdinal(NSUInteger ordinal) {
  OrgMapsforgeMapUtilPausableThread_ThreadPriority_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return OrgMapsforgeMapUtilPausableThread_ThreadPriority_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapUtilPausableThread_ThreadPriority)
