//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/util/LayerUtil.java
//

#include "J2ObjC_source.h"
#include "java/lang/IllegalStateException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "org/mapsforge/core/mapelements/MapElementContainer.h"
#include "org/mapsforge/core/model/BoundingBox.h"
#include "org/mapsforge/core/model/Point.h"
#include "org/mapsforge/core/model/Tile.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/layer/TilePosition.h"
#include "org/mapsforge/map/util/LayerUtil.h"

@interface OrgMapsforgeMapUtilLayerUtil ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgMapsforgeMapUtilLayerUtil_init(OrgMapsforgeMapUtilLayerUtil *self);

__attribute__((unused)) static OrgMapsforgeMapUtilLayerUtil *new_OrgMapsforgeMapUtilLayerUtil_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgMapsforgeMapUtilLayerUtil *create_OrgMapsforgeMapUtilLayerUtil_init();

@implementation OrgMapsforgeMapUtilLayerUtil

+ (id<JavaUtilList>)getTilePositionsWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                                withByte:(jbyte)zoomLevel
                                          withOrgMapsforgeCoreModelPoint:(OrgMapsforgeCoreModelPoint *)topLeftPoint
                                                                 withInt:(jint)tileSize {
  return OrgMapsforgeMapUtilLayerUtil_getTilePositionsWithOrgMapsforgeCoreModelBoundingBox_withByte_withOrgMapsforgeCoreModelPoint_withInt_(boundingBox, zoomLevel, topLeftPoint, tileSize);
}

+ (id<JavaUtilSet>)getTilesWithOrgMapsforgeCoreModelBoundingBox:(OrgMapsforgeCoreModelBoundingBox *)boundingBox
                                                       withByte:(jbyte)zoomLevel
                                                        withInt:(jint)tileSize {
  return OrgMapsforgeMapUtilLayerUtil_getTilesWithOrgMapsforgeCoreModelBoundingBox_withByte_withInt_(boundingBox, zoomLevel, tileSize);
}

+ (id<JavaUtilList>)collisionFreeOrderedWithJavaUtilList:(id<JavaUtilList>)input {
  return OrgMapsforgeMapUtilLayerUtil_collisionFreeOrderedWithJavaUtilList_(input);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgMapsforgeMapUtilLayerUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x9, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 6, 7, -1, 8, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getTilePositionsWithOrgMapsforgeCoreModelBoundingBox:withByte:withOrgMapsforgeCoreModelPoint:withInt:);
  methods[1].selector = @selector(getTilesWithOrgMapsforgeCoreModelBoundingBox:withByte:withInt:);
  methods[2].selector = @selector(collisionFreeOrderedWithJavaUtilList:);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getTilePositions", "LOrgMapsforgeCoreModelBoundingBox;BLOrgMapsforgeCoreModelPoint;I", "(Lorg/mapsforge/core/model/BoundingBox;BLorg/mapsforge/core/model/Point;I)Ljava/util/List<Lorg/mapsforge/map/layer/TilePosition;>;", "getTiles", "LOrgMapsforgeCoreModelBoundingBox;BI", "(Lorg/mapsforge/core/model/BoundingBox;BI)Ljava/util/Set<Lorg/mapsforge/core/model/Tile;>;", "collisionFreeOrdered", "LJavaUtilList;", "(Ljava/util/List<Lorg/mapsforge/core/mapelements/MapElementContainer;>;)Ljava/util/List<Lorg/mapsforge/core/mapelements/MapElementContainer;>;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapUtilLayerUtil = { "LayerUtil", "org.mapsforge.map.util", ptrTable, methods, NULL, 7, 0x11, 4, 0, -1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapUtilLayerUtil;
}

@end

id<JavaUtilList> OrgMapsforgeMapUtilLayerUtil_getTilePositionsWithOrgMapsforgeCoreModelBoundingBox_withByte_withOrgMapsforgeCoreModelPoint_withInt_(OrgMapsforgeCoreModelBoundingBox *boundingBox, jbyte zoomLevel, OrgMapsforgeCoreModelPoint *topLeftPoint, jint tileSize) {
  OrgMapsforgeMapUtilLayerUtil_initialize();
  jint tileLeft = OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(((OrgMapsforgeCoreModelBoundingBox *) nil_chk(boundingBox))->minLongitude_, zoomLevel);
  jint tileTop = OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(boundingBox->maxLatitude_, zoomLevel);
  jint tileRight = OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(boundingBox->maxLongitude_, zoomLevel);
  jint tileBottom = OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(boundingBox->minLatitude_, zoomLevel);
  jint initialCapacity = (tileRight - tileLeft + 1) * (tileBottom - tileTop + 1);
  id<JavaUtilList> tilePositions = create_JavaUtilArrayList_initWithInt_(initialCapacity);
  for (jint tileY = tileTop; tileY <= tileBottom; ++tileY) {
    for (jint tileX = tileLeft; tileX <= tileRight; ++tileX) {
      jdouble pixelX = OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(tileX, tileSize) - ((OrgMapsforgeCoreModelPoint *) nil_chk(topLeftPoint))->x_;
      jdouble pixelY = OrgMapsforgeCoreUtilMercatorProjection_tileToPixelWithLong_withInt_(tileY, tileSize) - topLeftPoint->y_;
      [tilePositions addWithId:create_OrgMapsforgeMapLayerTilePosition_initWithOrgMapsforgeCoreModelTile_withOrgMapsforgeCoreModelPoint_(create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(tileX, tileY, zoomLevel, tileSize), create_OrgMapsforgeCoreModelPoint_initWithDouble_withDouble_(pixelX, pixelY))];
    }
  }
  return tilePositions;
}

id<JavaUtilSet> OrgMapsforgeMapUtilLayerUtil_getTilesWithOrgMapsforgeCoreModelBoundingBox_withByte_withInt_(OrgMapsforgeCoreModelBoundingBox *boundingBox, jbyte zoomLevel, jint tileSize) {
  OrgMapsforgeMapUtilLayerUtil_initialize();
  jint tileLeft = OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(((OrgMapsforgeCoreModelBoundingBox *) nil_chk(boundingBox))->minLongitude_, zoomLevel);
  jint tileTop = OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(boundingBox->maxLatitude_, zoomLevel);
  jint tileRight = OrgMapsforgeCoreUtilMercatorProjection_longitudeToTileXWithDouble_withByte_(boundingBox->maxLongitude_, zoomLevel);
  jint tileBottom = OrgMapsforgeCoreUtilMercatorProjection_latitudeToTileYWithDouble_withByte_(boundingBox->minLatitude_, zoomLevel);
  id<JavaUtilSet> tiles = create_JavaUtilHashSet_init();
  for (jint tileY = tileTop; tileY <= tileBottom; ++tileY) {
    for (jint tileX = tileLeft; tileX <= tileRight; ++tileX) {
      [tiles addWithId:create_OrgMapsforgeCoreModelTile_initWithInt_withInt_withByte_withInt_(tileX, tileY, zoomLevel, tileSize)];
    }
  }
  return tiles;
}

id<JavaUtilList> OrgMapsforgeMapUtilLayerUtil_collisionFreeOrderedWithJavaUtilList_(id<JavaUtilList> input) {
  OrgMapsforgeMapUtilLayerUtil_initialize();
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(input, JavaUtilCollections_reverseOrder());
  id<JavaUtilList> output = create_JavaUtilLinkedList_init();
  for (OrgMapsforgeCoreMapelementsMapElementContainer * __strong item in nil_chk(input)) {
    jboolean hasSpace = true;
    for (OrgMapsforgeCoreMapelementsMapElementContainer * __strong outputElement in output) {
      if ([((OrgMapsforgeCoreMapelementsMapElementContainer *) nil_chk(outputElement)) clashesWithWithOrgMapsforgeCoreMapelementsMapElementContainer:item]) {
        hasSpace = false;
        break;
      }
    }
    if (hasSpace) {
      [output addWithId:item];
    }
  }
  return output;
}

void OrgMapsforgeMapUtilLayerUtil_init(OrgMapsforgeMapUtilLayerUtil *self) {
  NSObject_init(self);
  @throw create_JavaLangIllegalStateException_init();
}

OrgMapsforgeMapUtilLayerUtil *new_OrgMapsforgeMapUtilLayerUtil_init() {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapUtilLayerUtil, init)
}

OrgMapsforgeMapUtilLayerUtil *create_OrgMapsforgeMapUtilLayerUtil_init() {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapUtilLayerUtil, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapUtilLayerUtil)
