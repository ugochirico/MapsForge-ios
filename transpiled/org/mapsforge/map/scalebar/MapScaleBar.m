//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: ./org/mapsforge/map/scalebar/MapScaleBar.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/mapsforge/core/graphics/Bitmap.h"
#include "org/mapsforge/core/graphics/Canvas.h"
#include "org/mapsforge/core/graphics/GraphicContext.h"
#include "org/mapsforge/core/graphics/GraphicFactory.h"
#include "org/mapsforge/core/model/Dimension.h"
#include "org/mapsforge/core/model/LatLong.h"
#include "org/mapsforge/core/model/MapPosition.h"
#include "org/mapsforge/core/util/MercatorProjection.h"
#include "org/mapsforge/map/model/DisplayModel.h"
#include "org/mapsforge/map/model/MapViewDimension.h"
#include "org/mapsforge/map/model/MapViewPosition.h"
#include "org/mapsforge/map/scalebar/DistanceUnitAdapter.h"
#include "org/mapsforge/map/scalebar/MapScaleBar.h"
#include "org/mapsforge/map/scalebar/MetricUnitAdapter.h"

@interface OrgMapsforgeMapScalebarMapScaleBar () {
 @public
  OrgMapsforgeMapModelMapViewPosition *mapViewPosition_;
  OrgMapsforgeMapModelMapViewDimension *mapViewDimension_;
  OrgMapsforgeCoreModelMapPosition *prevMapPosition_;
  id<OrgMapsforgeCoreGraphicsBitmap> mapScaleBitmap_;
}

- (jboolean)isRedrawNecessary;

@end

J2OBJC_FIELD_SETTER(OrgMapsforgeMapScalebarMapScaleBar, mapViewPosition_, OrgMapsforgeMapModelMapViewPosition *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapScalebarMapScaleBar, mapViewDimension_, OrgMapsforgeMapModelMapViewDimension *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapScalebarMapScaleBar, prevMapPosition_, OrgMapsforgeCoreModelMapPosition *)
J2OBJC_FIELD_SETTER(OrgMapsforgeMapScalebarMapScaleBar, mapScaleBitmap_, id<OrgMapsforgeCoreGraphicsBitmap>)

inline jint OrgMapsforgeMapScalebarMapScaleBar_get_MARGIN_BOTTOM();
#define OrgMapsforgeMapScalebarMapScaleBar_MARGIN_BOTTOM 0
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapScalebarMapScaleBar, MARGIN_BOTTOM, jint)

inline jint OrgMapsforgeMapScalebarMapScaleBar_get_MARGIN_LEFT();
#define OrgMapsforgeMapScalebarMapScaleBar_MARGIN_LEFT 5
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapScalebarMapScaleBar, MARGIN_LEFT, jint)

inline jdouble OrgMapsforgeMapScalebarMapScaleBar_get_LATITUDE_REDRAW_THRESHOLD();
#define OrgMapsforgeMapScalebarMapScaleBar_LATITUDE_REDRAW_THRESHOLD 0.2
J2OBJC_STATIC_FIELD_CONSTANT(OrgMapsforgeMapScalebarMapScaleBar, LATITUDE_REDRAW_THRESHOLD, jdouble)

__attribute__((unused)) static jboolean OrgMapsforgeMapScalebarMapScaleBar_isRedrawNecessary(OrgMapsforgeMapScalebarMapScaleBar *self);

@implementation OrgMapsforgeMapScalebarMapScaleBar

- (instancetype)initWithOrgMapsforgeMapModelMapViewPosition:(OrgMapsforgeMapModelMapViewPosition *)mapViewPosition
                   withOrgMapsforgeMapModelMapViewDimension:(OrgMapsforgeMapModelMapViewDimension *)mapViewDimension
                       withOrgMapsforgeMapModelDisplayModel:(OrgMapsforgeMapModelDisplayModel *)displayModel
                 withOrgMapsforgeCoreGraphicsGraphicFactory:(id<OrgMapsforgeCoreGraphicsGraphicFactory>)graphicFactory
                                                    withInt:(jint)width
                                                    withInt:(jint)height {
  OrgMapsforgeMapScalebarMapScaleBar_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelMapViewDimension_withOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsGraphicFactory_withInt_withInt_(self, mapViewPosition, mapViewDimension, displayModel, graphicFactory, width, height);
  return self;
}

- (void)destroy {
  [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->mapScaleBitmap_)) decrementRefCount];
  [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(self->mapScaleCanvas_)) destroy];
}

- (jboolean)isVisible {
  return self->visible_;
}

- (void)setVisibleWithBoolean:(jboolean)visible {
  self->visible_ = visible;
}

- (id<OrgMapsforgeMapScalebarDistanceUnitAdapter>)getDistanceUnitAdapter {
  return self->distanceUnitAdapter_;
}

- (void)setDistanceUnitAdapterWithOrgMapsforgeMapScalebarDistanceUnitAdapter:(id<OrgMapsforgeMapScalebarDistanceUnitAdapter>)distanceUnitAdapter {
  if (distanceUnitAdapter == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"adapter must not be null");
  }
  JreStrongAssign(&self->distanceUnitAdapter_, distanceUnitAdapter);
  self->redrawNeeded_ = true;
}

- (OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue *)calculateScaleBarLengthAndValueWithOrgMapsforgeMapScalebarDistanceUnitAdapter:(id<OrgMapsforgeMapScalebarDistanceUnitAdapter>)unitAdapter {
  JreStrongAssign(&self->prevMapPosition_, [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(self->mapViewPosition_)) getMapPosition]);
  jdouble groundResolution = OrgMapsforgeCoreUtilMercatorProjection_calculateGroundResolutionWithDouble_withLong_(((OrgMapsforgeCoreModelLatLong *) nil_chk(((OrgMapsforgeCoreModelMapPosition *) nil_chk(self->prevMapPosition_))->latLong_))->latitude_, OrgMapsforgeCoreUtilMercatorProjection_getMapSizeWithByte_withInt_(self->prevMapPosition_->zoomLevel_, [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getTileSize]));
  groundResolution = groundResolution / [((id<OrgMapsforgeMapScalebarDistanceUnitAdapter>) nil_chk(unitAdapter)) getMeterRatio];
  IOSIntArray *scaleBarValues = [unitAdapter getScaleBarValues];
  jint scaleBarLength = 0;
  jint mapScaleValue = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(scaleBarValues))->size_; ++i) {
    mapScaleValue = IOSIntArray_Get(scaleBarValues, i);
    scaleBarLength = JreFpToInt((mapScaleValue / groundResolution));
    if (scaleBarLength < ([((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->mapScaleBitmap_)) getWidth] - 10)) {
      break;
    }
  }
  return create_OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue_initWithInt_withInt_(scaleBarLength, mapScaleValue);
}

- (OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue *)calculateScaleBarLengthAndValue {
  return [self calculateScaleBarLengthAndValueWithOrgMapsforgeMapScalebarDistanceUnitAdapter:self->distanceUnitAdapter_];
}

- (void)drawWithOrgMapsforgeCoreGraphicsGraphicContext:(id<OrgMapsforgeCoreGraphicsGraphicContext>)graphicContext {
  if (!self->visible_) {
    return;
  }
  if ([((OrgMapsforgeMapModelMapViewDimension *) nil_chk(self->mapViewDimension_)) getDimension] == nil) {
    return;
  }
  if (OrgMapsforgeMapScalebarMapScaleBar_isRedrawNecessary(self)) {
    [self redrawWithOrgMapsforgeCoreGraphicsCanvas:self->mapScaleCanvas_];
    self->redrawNeeded_ = false;
  }
  jint top = ((OrgMapsforgeCoreModelDimension *) nil_chk([((OrgMapsforgeMapModelMapViewDimension *) nil_chk(self->mapViewDimension_)) getDimension]))->height_ - [((id<OrgMapsforgeCoreGraphicsBitmap>) nil_chk(self->mapScaleBitmap_)) getHeight] - OrgMapsforgeMapScalebarMapScaleBar_MARGIN_BOTTOM;
  [((id<OrgMapsforgeCoreGraphicsGraphicContext>) nil_chk(graphicContext)) drawBitmapWithOrgMapsforgeCoreGraphicsBitmap:self->mapScaleBitmap_ withInt:OrgMapsforgeMapScalebarMapScaleBar_MARGIN_LEFT withInt:top];
}

- (void)redrawScaleBar {
  self->redrawNeeded_ = true;
}

- (jboolean)isRedrawNecessary {
  return OrgMapsforgeMapScalebarMapScaleBar_isRedrawNecessary(self);
}

- (void)redrawWithOrgMapsforgeCoreGraphicsCanvas:(id<OrgMapsforgeCoreGraphicsCanvas>)canvas {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(mapViewPosition_);
  RELEASE_(mapViewDimension_);
  RELEASE_(prevMapPosition_);
  RELEASE_(displayModel_);
  RELEASE_(graphicFactory_);
  RELEASE_(mapScaleBitmap_);
  RELEASE_(mapScaleCanvas_);
  RELEASE_(distanceUnitAdapter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapScalebarDistanceUnitAdapter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue;", 0x4, 5, 4, -1, -1, -1, -1 },
    { NULL, "LOrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgMapsforgeMapModelMapViewPosition:withOrgMapsforgeMapModelMapViewDimension:withOrgMapsforgeMapModelDisplayModel:withOrgMapsforgeCoreGraphicsGraphicFactory:withInt:withInt:);
  methods[1].selector = @selector(destroy);
  methods[2].selector = @selector(isVisible);
  methods[3].selector = @selector(setVisibleWithBoolean:);
  methods[4].selector = @selector(getDistanceUnitAdapter);
  methods[5].selector = @selector(setDistanceUnitAdapterWithOrgMapsforgeMapScalebarDistanceUnitAdapter:);
  methods[6].selector = @selector(calculateScaleBarLengthAndValueWithOrgMapsforgeMapScalebarDistanceUnitAdapter:);
  methods[7].selector = @selector(calculateScaleBarLengthAndValue);
  methods[8].selector = @selector(drawWithOrgMapsforgeCoreGraphicsGraphicContext:);
  methods[9].selector = @selector(redrawScaleBar);
  methods[10].selector = @selector(isRedrawNecessary);
  methods[11].selector = @selector(redrawWithOrgMapsforgeCoreGraphicsCanvas:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MARGIN_BOTTOM", "I", .constantValue.asInt = OrgMapsforgeMapScalebarMapScaleBar_MARGIN_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "MARGIN_LEFT", "I", .constantValue.asInt = OrgMapsforgeMapScalebarMapScaleBar_MARGIN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "LATITUDE_REDRAW_THRESHOLD", "D", .constantValue.asDouble = OrgMapsforgeMapScalebarMapScaleBar_LATITUDE_REDRAW_THRESHOLD, 0x1a, -1, -1, -1, -1 },
    { "mapViewPosition_", "LOrgMapsforgeMapModelMapViewPosition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mapViewDimension_", "LOrgMapsforgeMapModelMapViewDimension;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prevMapPosition_", "LOrgMapsforgeCoreModelMapPosition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "displayModel_", "LOrgMapsforgeMapModelDisplayModel;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "graphicFactory_", "LOrgMapsforgeCoreGraphicsGraphicFactory;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mapScaleBitmap_", "LOrgMapsforgeCoreGraphicsBitmap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mapScaleCanvas_", "LOrgMapsforgeCoreGraphicsCanvas;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "distanceUnitAdapter_", "LOrgMapsforgeMapScalebarDistanceUnitAdapter;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "visible_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "redrawNeeded_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LOrgMapsforgeMapModelMapViewPosition;LOrgMapsforgeMapModelMapViewDimension;LOrgMapsforgeMapModelDisplayModel;LOrgMapsforgeCoreGraphicsGraphicFactory;II", "setVisible", "Z", "setDistanceUnitAdapter", "LOrgMapsforgeMapScalebarDistanceUnitAdapter;", "calculateScaleBarLengthAndValue", "draw", "LOrgMapsforgeCoreGraphicsGraphicContext;", "redraw", "LOrgMapsforgeCoreGraphicsCanvas;", "LOrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapScalebarMapScaleBar = { "MapScaleBar", "org.mapsforge.map.scalebar", ptrTable, methods, fields, 7, 0x401, 12, 13, -1, 10, -1, -1, -1 };
  return &_OrgMapsforgeMapScalebarMapScaleBar;
}

@end

void OrgMapsforgeMapScalebarMapScaleBar_initWithOrgMapsforgeMapModelMapViewPosition_withOrgMapsforgeMapModelMapViewDimension_withOrgMapsforgeMapModelDisplayModel_withOrgMapsforgeCoreGraphicsGraphicFactory_withInt_withInt_(OrgMapsforgeMapScalebarMapScaleBar *self, OrgMapsforgeMapModelMapViewPosition *mapViewPosition, OrgMapsforgeMapModelMapViewDimension *mapViewDimension, OrgMapsforgeMapModelDisplayModel *displayModel, id<OrgMapsforgeCoreGraphicsGraphicFactory> graphicFactory, jint width, jint height) {
  NSObject_init(self);
  JreStrongAssign(&self->mapViewPosition_, mapViewPosition);
  JreStrongAssign(&self->mapViewDimension_, mapViewDimension);
  JreStrongAssign(&self->displayModel_, displayModel);
  JreStrongAssign(&self->graphicFactory_, graphicFactory);
  JreStrongAssign(&self->mapScaleBitmap_, [((id<OrgMapsforgeCoreGraphicsGraphicFactory>) nil_chk(graphicFactory)) createBitmapWithInt:JreFpToInt((width * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor])) withInt:JreFpToInt((height * [((OrgMapsforgeMapModelDisplayModel *) nil_chk(self->displayModel_)) getScaleFactor]))]);
  JreStrongAssign(&self->mapScaleCanvas_, [graphicFactory createCanvas]);
  [((id<OrgMapsforgeCoreGraphicsCanvas>) nil_chk(self->mapScaleCanvas_)) setBitmapWithOrgMapsforgeCoreGraphicsBitmap:self->mapScaleBitmap_];
  JreStrongAssign(&self->distanceUnitAdapter_, JreLoadStatic(OrgMapsforgeMapScalebarMetricUnitAdapter, INSTANCE));
  self->visible_ = true;
  self->redrawNeeded_ = true;
}

jboolean OrgMapsforgeMapScalebarMapScaleBar_isRedrawNecessary(OrgMapsforgeMapScalebarMapScaleBar *self) {
  if (self->redrawNeeded_ || self->prevMapPosition_ == nil) {
    return true;
  }
  OrgMapsforgeCoreModelMapPosition *currentMapPosition = [((OrgMapsforgeMapModelMapViewPosition *) nil_chk(self->mapViewPosition_)) getMapPosition];
  if (((OrgMapsforgeCoreModelMapPosition *) nil_chk(currentMapPosition))->zoomLevel_ != ((OrgMapsforgeCoreModelMapPosition *) nil_chk(self->prevMapPosition_))->zoomLevel_) {
    return true;
  }
  jdouble latitudeDiff = JavaLangMath_absWithDouble_(((OrgMapsforgeCoreModelLatLong *) nil_chk(currentMapPosition->latLong_))->latitude_ - self->prevMapPosition_->latLong_->latitude_);
  return latitudeDiff > OrgMapsforgeMapScalebarMapScaleBar_LATITUDE_REDRAW_THRESHOLD;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapScalebarMapScaleBar)

@implementation OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue

- (instancetype)initWithInt:(jint)scaleBarLength
                    withInt:(jint)scaleBarValue {
  OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue_initWithInt_withInt_(self, scaleBarLength, scaleBarValue);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scaleBarLength_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "scaleBarValue_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LOrgMapsforgeMapScalebarMapScaleBar;" };
  static const J2ObjcClassInfo _OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue = { "ScaleBarLengthAndValue", "org.mapsforge.map.scalebar", ptrTable, methods, fields, 7, 0xc, 1, 2, 1, -1, -1, -1, -1 };
  return &_OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue;
}

@end

void OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue_initWithInt_withInt_(OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue *self, jint scaleBarLength, jint scaleBarValue) {
  NSObject_init(self);
  self->scaleBarLength_ = scaleBarLength;
  self->scaleBarValue_ = scaleBarValue;
}

OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue *new_OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue_initWithInt_withInt_(jint scaleBarLength, jint scaleBarValue) {
  J2OBJC_NEW_IMPL(OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue, initWithInt_withInt_, scaleBarLength, scaleBarValue)
}

OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue *create_OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue_initWithInt_withInt_(jint scaleBarLength, jint scaleBarValue) {
  J2OBJC_CREATE_IMPL(OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue, initWithInt_withInt_, scaleBarLength, scaleBarValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgMapsforgeMapScalebarMapScaleBar_ScaleBarLengthAndValue)
